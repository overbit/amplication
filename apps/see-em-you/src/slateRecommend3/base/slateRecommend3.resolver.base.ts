/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateSlateRecommend3Args } from "./CreateSlateRecommend3Args";
import { UpdateSlateRecommend3Args } from "./UpdateSlateRecommend3Args";
import { DeleteSlateRecommend3Args } from "./DeleteSlateRecommend3Args";
import { SlateRecommend3CountArgs } from "./SlateRecommend3CountArgs";
import { SlateRecommend3FindManyArgs } from "./SlateRecommend3FindManyArgs";
import { SlateRecommend3FindUniqueArgs } from "./SlateRecommend3FindUniqueArgs";
import { SlateRecommend3 } from "./SlateRecommend3";
import { SlateRecommend3Service } from "../slateRecommend3.service";
@graphql.Resolver(() => SlateRecommend3)
export class SlateRecommend3ResolverBase {
  constructor(protected readonly service: SlateRecommend3Service) {}

  async _slateRecommend3sMeta(
    @graphql.Args() args: SlateRecommend3CountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SlateRecommend3])
  async slateRecommend3s(
    @graphql.Args() args: SlateRecommend3FindManyArgs
  ): Promise<SlateRecommend3[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => SlateRecommend3, { nullable: true })
  async slateRecommend3(
    @graphql.Args() args: SlateRecommend3FindUniqueArgs
  ): Promise<SlateRecommend3 | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SlateRecommend3)
  async createSlateRecommend3(
    @graphql.Args() args: CreateSlateRecommend3Args
  ): Promise<SlateRecommend3> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SlateRecommend3)
  async updateSlateRecommend3(
    @graphql.Args() args: UpdateSlateRecommend3Args
  ): Promise<SlateRecommend3 | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SlateRecommend3)
  async deleteSlateRecommend3(
    @graphql.Args() args: DeleteSlateRecommend3Args
  ): Promise<SlateRecommend3 | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
