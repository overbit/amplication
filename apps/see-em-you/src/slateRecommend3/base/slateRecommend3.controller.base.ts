/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SlateRecommend3Service } from "../slateRecommend3.service";
import { SlateRecommend3CreateInput } from "./SlateRecommend3CreateInput";
import { SlateRecommend3WhereInput } from "./SlateRecommend3WhereInput";
import { SlateRecommend3WhereUniqueInput } from "./SlateRecommend3WhereUniqueInput";
import { SlateRecommend3FindManyArgs } from "./SlateRecommend3FindManyArgs";
import { SlateRecommend3UpdateInput } from "./SlateRecommend3UpdateInput";
import { SlateRecommend3 } from "./SlateRecommend3";

export class SlateRecommend3ControllerBase {
  constructor(protected readonly service: SlateRecommend3Service) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SlateRecommend3 })
  async create(
    @common.Body() data: SlateRecommend3CreateInput
  ): Promise<SlateRecommend3> {
    return await this.service.create({
      data: data,
      select: {
        first: true,
        id: true,
        last: true,
        middle: true,
        prefix: true,
        reference3Email: true,
        reference3First: true,
        reference3Industry: true,
        reference3Last: true,
        reference3Organization: true,
        reference3Phone: true,
        reference3Submitted: true,
        reference3Title: true,
        reference3Type: true,
        referenceNum3IsrmsRecommenderScore1: true,
        referenceNum3IsrmsRecommenderScore10: true,
        referenceNum3IsrmsRecommenderScore11: true,
        referenceNum3IsrmsRecommenderScore12: true,
        referenceNum3IsrmsRecommenderScore13: true,
        referenceNum3IsrmsRecommenderScore14: true,
        referenceNum3IsrmsRecommenderScore15: true,
        referenceNum3IsrmsRecommenderScore2: true,
        referenceNum3IsrmsRecommenderScore3: true,
        referenceNum3IsrmsRecommenderScore4: true,
        referenceNum3IsrmsRecommenderScore5: true,
        referenceNum3IsrmsRecommenderScore6: true,
        referenceNum3IsrmsRecommenderScore7: true,
        referenceNum3IsrmsRecommenderScore8: true,
        referenceNum3IsrmsRecommenderScore9: true,
        referenceNum3MseRecommendationAdditional: true,
        referenceNum3MseRecommendationComparison: true,
        referenceNum3MseRecommendationHowKnown: true,
        referenceNum3MseRecommendationProjectPerformance: true,
        referenceNum3MseRecommendationStrengthsWeakness: true,
        referenceNum3RecommenderScore1: true,
        referenceNum3RecommenderScore2: true,
        referenceNum3RecommenderScore3: true,
        referenceNum3RecommenderScore4: true,
        referenceNum3RecommenderScore5: true,
        referenceNum3RecommenderScore6: true,
        referenceNum3RecommenderScore7: true,
        referenceNum3RecommenderScore8: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SlateRecommend3] })
  @ApiNestedQuery(SlateRecommend3FindManyArgs)
  async findMany(@common.Req() request: Request): Promise<SlateRecommend3[]> {
    const args = plainToClass(SlateRecommend3FindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        first: true,
        id: true,
        last: true,
        middle: true,
        prefix: true,
        reference3Email: true,
        reference3First: true,
        reference3Industry: true,
        reference3Last: true,
        reference3Organization: true,
        reference3Phone: true,
        reference3Submitted: true,
        reference3Title: true,
        reference3Type: true,
        referenceNum3IsrmsRecommenderScore1: true,
        referenceNum3IsrmsRecommenderScore10: true,
        referenceNum3IsrmsRecommenderScore11: true,
        referenceNum3IsrmsRecommenderScore12: true,
        referenceNum3IsrmsRecommenderScore13: true,
        referenceNum3IsrmsRecommenderScore14: true,
        referenceNum3IsrmsRecommenderScore15: true,
        referenceNum3IsrmsRecommenderScore2: true,
        referenceNum3IsrmsRecommenderScore3: true,
        referenceNum3IsrmsRecommenderScore4: true,
        referenceNum3IsrmsRecommenderScore5: true,
        referenceNum3IsrmsRecommenderScore6: true,
        referenceNum3IsrmsRecommenderScore7: true,
        referenceNum3IsrmsRecommenderScore8: true,
        referenceNum3IsrmsRecommenderScore9: true,
        referenceNum3MseRecommendationAdditional: true,
        referenceNum3MseRecommendationComparison: true,
        referenceNum3MseRecommendationHowKnown: true,
        referenceNum3MseRecommendationProjectPerformance: true,
        referenceNum3MseRecommendationStrengthsWeakness: true,
        referenceNum3RecommenderScore1: true,
        referenceNum3RecommenderScore2: true,
        referenceNum3RecommenderScore3: true,
        referenceNum3RecommenderScore4: true,
        referenceNum3RecommenderScore5: true,
        referenceNum3RecommenderScore6: true,
        referenceNum3RecommenderScore7: true,
        referenceNum3RecommenderScore8: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SlateRecommend3 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: SlateRecommend3WhereUniqueInput
  ): Promise<SlateRecommend3 | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        first: true,
        id: true,
        last: true,
        middle: true,
        prefix: true,
        reference3Email: true,
        reference3First: true,
        reference3Industry: true,
        reference3Last: true,
        reference3Organization: true,
        reference3Phone: true,
        reference3Submitted: true,
        reference3Title: true,
        reference3Type: true,
        referenceNum3IsrmsRecommenderScore1: true,
        referenceNum3IsrmsRecommenderScore10: true,
        referenceNum3IsrmsRecommenderScore11: true,
        referenceNum3IsrmsRecommenderScore12: true,
        referenceNum3IsrmsRecommenderScore13: true,
        referenceNum3IsrmsRecommenderScore14: true,
        referenceNum3IsrmsRecommenderScore15: true,
        referenceNum3IsrmsRecommenderScore2: true,
        referenceNum3IsrmsRecommenderScore3: true,
        referenceNum3IsrmsRecommenderScore4: true,
        referenceNum3IsrmsRecommenderScore5: true,
        referenceNum3IsrmsRecommenderScore6: true,
        referenceNum3IsrmsRecommenderScore7: true,
        referenceNum3IsrmsRecommenderScore8: true,
        referenceNum3IsrmsRecommenderScore9: true,
        referenceNum3MseRecommendationAdditional: true,
        referenceNum3MseRecommendationComparison: true,
        referenceNum3MseRecommendationHowKnown: true,
        referenceNum3MseRecommendationProjectPerformance: true,
        referenceNum3MseRecommendationStrengthsWeakness: true,
        referenceNum3RecommenderScore1: true,
        referenceNum3RecommenderScore2: true,
        referenceNum3RecommenderScore3: true,
        referenceNum3RecommenderScore4: true,
        referenceNum3RecommenderScore5: true,
        referenceNum3RecommenderScore6: true,
        referenceNum3RecommenderScore7: true,
        referenceNum3RecommenderScore8: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SlateRecommend3 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: SlateRecommend3WhereUniqueInput,
    @common.Body() data: SlateRecommend3UpdateInput
  ): Promise<SlateRecommend3 | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          first: true,
          id: true,
          last: true,
          middle: true,
          prefix: true,
          reference3Email: true,
          reference3First: true,
          reference3Industry: true,
          reference3Last: true,
          reference3Organization: true,
          reference3Phone: true,
          reference3Submitted: true,
          reference3Title: true,
          reference3Type: true,
          referenceNum3IsrmsRecommenderScore1: true,
          referenceNum3IsrmsRecommenderScore10: true,
          referenceNum3IsrmsRecommenderScore11: true,
          referenceNum3IsrmsRecommenderScore12: true,
          referenceNum3IsrmsRecommenderScore13: true,
          referenceNum3IsrmsRecommenderScore14: true,
          referenceNum3IsrmsRecommenderScore15: true,
          referenceNum3IsrmsRecommenderScore2: true,
          referenceNum3IsrmsRecommenderScore3: true,
          referenceNum3IsrmsRecommenderScore4: true,
          referenceNum3IsrmsRecommenderScore5: true,
          referenceNum3IsrmsRecommenderScore6: true,
          referenceNum3IsrmsRecommenderScore7: true,
          referenceNum3IsrmsRecommenderScore8: true,
          referenceNum3IsrmsRecommenderScore9: true,
          referenceNum3MseRecommendationAdditional: true,
          referenceNum3MseRecommendationComparison: true,
          referenceNum3MseRecommendationHowKnown: true,
          referenceNum3MseRecommendationProjectPerformance: true,
          referenceNum3MseRecommendationStrengthsWeakness: true,
          referenceNum3RecommenderScore1: true,
          referenceNum3RecommenderScore2: true,
          referenceNum3RecommenderScore3: true,
          referenceNum3RecommenderScore4: true,
          referenceNum3RecommenderScore5: true,
          referenceNum3RecommenderScore6: true,
          referenceNum3RecommenderScore7: true,
          referenceNum3RecommenderScore8: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SlateRecommend3 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: SlateRecommend3WhereUniqueInput
  ): Promise<SlateRecommend3 | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          first: true,
          id: true,
          last: true,
          middle: true,
          prefix: true,
          reference3Email: true,
          reference3First: true,
          reference3Industry: true,
          reference3Last: true,
          reference3Organization: true,
          reference3Phone: true,
          reference3Submitted: true,
          reference3Title: true,
          reference3Type: true,
          referenceNum3IsrmsRecommenderScore1: true,
          referenceNum3IsrmsRecommenderScore10: true,
          referenceNum3IsrmsRecommenderScore11: true,
          referenceNum3IsrmsRecommenderScore12: true,
          referenceNum3IsrmsRecommenderScore13: true,
          referenceNum3IsrmsRecommenderScore14: true,
          referenceNum3IsrmsRecommenderScore15: true,
          referenceNum3IsrmsRecommenderScore2: true,
          referenceNum3IsrmsRecommenderScore3: true,
          referenceNum3IsrmsRecommenderScore4: true,
          referenceNum3IsrmsRecommenderScore5: true,
          referenceNum3IsrmsRecommenderScore6: true,
          referenceNum3IsrmsRecommenderScore7: true,
          referenceNum3IsrmsRecommenderScore8: true,
          referenceNum3IsrmsRecommenderScore9: true,
          referenceNum3MseRecommendationAdditional: true,
          referenceNum3MseRecommendationComparison: true,
          referenceNum3MseRecommendationHowKnown: true,
          referenceNum3MseRecommendationProjectPerformance: true,
          referenceNum3MseRecommendationStrengthsWeakness: true,
          referenceNum3RecommenderScore1: true,
          referenceNum3RecommenderScore2: true,
          referenceNum3RecommenderScore3: true,
          referenceNum3RecommenderScore4: true,
          referenceNum3RecommenderScore5: true,
          referenceNum3RecommenderScore6: true,
          referenceNum3RecommenderScore7: true,
          referenceNum3RecommenderScore8: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
