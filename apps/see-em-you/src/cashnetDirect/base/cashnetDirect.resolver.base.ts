/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateCashnetDirectArgs } from "./CreateCashnetDirectArgs";
import { UpdateCashnetDirectArgs } from "./UpdateCashnetDirectArgs";
import { DeleteCashnetDirectArgs } from "./DeleteCashnetDirectArgs";
import { CashnetDirectCountArgs } from "./CashnetDirectCountArgs";
import { CashnetDirectFindManyArgs } from "./CashnetDirectFindManyArgs";
import { CashnetDirectFindUniqueArgs } from "./CashnetDirectFindUniqueArgs";
import { CashnetDirect } from "./CashnetDirect";
import { CashnetDirectService } from "../cashnetDirect.service";
@graphql.Resolver(() => CashnetDirect)
export class CashnetDirectResolverBase {
  constructor(protected readonly service: CashnetDirectService) {}

  async _cashnetDirectsMeta(
    @graphql.Args() args: CashnetDirectCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CashnetDirect])
  async cashnetDirects(
    @graphql.Args() args: CashnetDirectFindManyArgs
  ): Promise<CashnetDirect[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => CashnetDirect, { nullable: true })
  async cashnetDirect(
    @graphql.Args() args: CashnetDirectFindUniqueArgs
  ): Promise<CashnetDirect | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CashnetDirect)
  async createCashnetDirect(
    @graphql.Args() args: CreateCashnetDirectArgs
  ): Promise<CashnetDirect> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CashnetDirect)
  async updateCashnetDirect(
    @graphql.Args() args: UpdateCashnetDirectArgs
  ): Promise<CashnetDirect | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CashnetDirect)
  async deleteCashnetDirect(
    @graphql.Args() args: DeleteCashnetDirectArgs
  ): Promise<CashnetDirect | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
