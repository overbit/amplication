/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CashnetDirectService } from "../cashnetDirect.service";
import { CashnetDirectCreateInput } from "./CashnetDirectCreateInput";
import { CashnetDirect } from "./CashnetDirect";
import { CashnetDirectFindManyArgs } from "./CashnetDirectFindManyArgs";
import { CashnetDirectWhereUniqueInput } from "./CashnetDirectWhereUniqueInput";
import { CashnetDirectUpdateInput } from "./CashnetDirectUpdateInput";

export class CashnetDirectControllerBase {
  constructor(protected readonly service: CashnetDirectService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CashnetDirect })
  async createCashnetDirect(
    @common.Body() data: CashnetDirectCreateInput
  ): Promise<CashnetDirect> {
    return await this.service.createCashnetDirect({
      data: data,
      select: {
        amount: true,
        appEmail: true,
        appId: true,
        batch: true,
        created: true,
        custCode: true,
        dept: true,
        id: true,
        name: true,
        paymentType: true,
        station: true,
        status: true,
        transType: true,
        txNumber: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CashnetDirect] })
  @ApiNestedQuery(CashnetDirectFindManyArgs)
  async cashnetDirects(
    @common.Req() request: Request
  ): Promise<CashnetDirect[]> {
    const args = plainToClass(CashnetDirectFindManyArgs, request.query);
    return this.service.cashnetDirects({
      ...args,
      select: {
        amount: true,
        appEmail: true,
        appId: true,
        batch: true,
        created: true,
        custCode: true,
        dept: true,
        id: true,
        name: true,
        paymentType: true,
        station: true,
        status: true,
        transType: true,
        txNumber: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CashnetDirect })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cashnetDirect(
    @common.Param() params: CashnetDirectWhereUniqueInput
  ): Promise<CashnetDirect | null> {
    const result = await this.service.cashnetDirect({
      where: params,
      select: {
        amount: true,
        appEmail: true,
        appId: true,
        batch: true,
        created: true,
        custCode: true,
        dept: true,
        id: true,
        name: true,
        paymentType: true,
        station: true,
        status: true,
        transType: true,
        txNumber: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CashnetDirect })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCashnetDirect(
    @common.Param() params: CashnetDirectWhereUniqueInput,
    @common.Body() data: CashnetDirectUpdateInput
  ): Promise<CashnetDirect | null> {
    try {
      return await this.service.updateCashnetDirect({
        where: params,
        data: data,
        select: {
          amount: true,
          appEmail: true,
          appId: true,
          batch: true,
          created: true,
          custCode: true,
          dept: true,
          id: true,
          name: true,
          paymentType: true,
          station: true,
          status: true,
          transType: true,
          txNumber: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CashnetDirect })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCashnetDirect(
    @common.Param() params: CashnetDirectWhereUniqueInput
  ): Promise<CashnetDirect | null> {
    try {
      return await this.service.deleteCashnetDirect({
        where: params,
        select: {
          amount: true,
          appEmail: true,
          appId: true,
          batch: true,
          created: true,
          custCode: true,
          dept: true,
          id: true,
          name: true,
          paymentType: true,
          station: true,
          status: true,
          transType: true,
          txNumber: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
