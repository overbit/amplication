/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LegacyEthnicityService } from "../legacyEthnicity.service";
import { LegacyEthnicityCreateInput } from "./LegacyEthnicityCreateInput";
import { LegacyEthnicity } from "./LegacyEthnicity";
import { LegacyEthnicityFindManyArgs } from "./LegacyEthnicityFindManyArgs";
import { LegacyEthnicityWhereUniqueInput } from "./LegacyEthnicityWhereUniqueInput";
import { LegacyEthnicityUpdateInput } from "./LegacyEthnicityUpdateInput";

export class LegacyEthnicityControllerBase {
  constructor(protected readonly service: LegacyEthnicityService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LegacyEthnicity })
  async createLegacyEthnicity(
    @common.Body() data: LegacyEthnicityCreateInput
  ): Promise<LegacyEthnicity> {
    return await this.service.createLegacyEthnicity({
      data: data,
      select: {
        name: true,
        sortorder: true,
        ethnicityId: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LegacyEthnicity] })
  @ApiNestedQuery(LegacyEthnicityFindManyArgs)
  async legacyEthnicities(
    @common.Req() request: Request
  ): Promise<LegacyEthnicity[]> {
    const args = plainToClass(LegacyEthnicityFindManyArgs, request.query);
    return this.service.legacyEthnicities({
      ...args,
      select: {
        name: true,
        sortorder: true,
        ethnicityId: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LegacyEthnicity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async legacyEthnicity(
    @common.Param() params: LegacyEthnicityWhereUniqueInput
  ): Promise<LegacyEthnicity | null> {
    const result = await this.service.legacyEthnicity({
      where: params,
      select: {
        name: true,
        sortorder: true,
        ethnicityId: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LegacyEthnicity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLegacyEthnicity(
    @common.Param() params: LegacyEthnicityWhereUniqueInput,
    @common.Body() data: LegacyEthnicityUpdateInput
  ): Promise<LegacyEthnicity | null> {
    try {
      return await this.service.updateLegacyEthnicity({
        where: params,
        data: data,
        select: {
          name: true,
          sortorder: true,
          ethnicityId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LegacyEthnicity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLegacyEthnicity(
    @common.Param() params: LegacyEthnicityWhereUniqueInput
  ): Promise<LegacyEthnicity | null> {
    try {
      return await this.service.deleteLegacyEthnicity({
        where: params,
        select: {
          name: true,
          sortorder: true,
          ethnicityId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
