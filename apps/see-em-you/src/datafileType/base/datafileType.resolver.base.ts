/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateDatafileTypeArgs } from "./CreateDatafileTypeArgs";
import { UpdateDatafileTypeArgs } from "./UpdateDatafileTypeArgs";
import { DeleteDatafileTypeArgs } from "./DeleteDatafileTypeArgs";
import { DatafileTypeCountArgs } from "./DatafileTypeCountArgs";
import { DatafileTypeFindManyArgs } from "./DatafileTypeFindManyArgs";
import { DatafileTypeFindUniqueArgs } from "./DatafileTypeFindUniqueArgs";
import { DatafileType } from "./DatafileType";
import { DatafileTypeService } from "../datafileType.service";
@graphql.Resolver(() => DatafileType)
export class DatafileTypeResolverBase {
  constructor(protected readonly service: DatafileTypeService) {}

  async _datafileTypesMeta(
    @graphql.Args() args: DatafileTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DatafileType])
  async datafileTypes(
    @graphql.Args() args: DatafileTypeFindManyArgs
  ): Promise<DatafileType[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => DatafileType, { nullable: true })
  async datafileType(
    @graphql.Args() args: DatafileTypeFindUniqueArgs
  ): Promise<DatafileType | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DatafileType)
  async createDatafileType(
    @graphql.Args() args: CreateDatafileTypeArgs
  ): Promise<DatafileType> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DatafileType)
  async updateDatafileType(
    @graphql.Args() args: UpdateDatafileTypeArgs
  ): Promise<DatafileType | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DatafileType)
  async deleteDatafileType(
    @graphql.Args() args: DeleteDatafileTypeArgs
  ): Promise<DatafileType | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
