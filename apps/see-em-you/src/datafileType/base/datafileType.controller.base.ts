/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DatafileTypeService } from "../datafileType.service";
import { DatafileTypeCreateInput } from "./DatafileTypeCreateInput";
import { DatafileType } from "./DatafileType";
import { DatafileTypeFindManyArgs } from "./DatafileTypeFindManyArgs";
import { DatafileTypeWhereUniqueInput } from "./DatafileTypeWhereUniqueInput";
import { DatafileTypeUpdateInput } from "./DatafileTypeUpdateInput";

export class DatafileTypeControllerBase {
  constructor(protected readonly service: DatafileTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DatafileType })
  async createDatafileType(
    @common.Body() data: DatafileTypeCreateInput
  ): Promise<DatafileType> {
    return await this.service.createDatafileType({
      data: data,
      select: {
        datafileType: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DatafileType] })
  @ApiNestedQuery(DatafileTypeFindManyArgs)
  async datafileTypes(@common.Req() request: Request): Promise<DatafileType[]> {
    const args = plainToClass(DatafileTypeFindManyArgs, request.query);
    return this.service.datafileTypes({
      ...args,
      select: {
        datafileType: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DatafileType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async datafileType(
    @common.Param() params: DatafileTypeWhereUniqueInput
  ): Promise<DatafileType | null> {
    const result = await this.service.datafileType({
      where: params,
      select: {
        datafileType: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DatafileType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDatafileType(
    @common.Param() params: DatafileTypeWhereUniqueInput,
    @common.Body() data: DatafileTypeUpdateInput
  ): Promise<DatafileType | null> {
    try {
      return await this.service.updateDatafileType({
        where: params,
        data: data,
        select: {
          datafileType: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DatafileType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDatafileType(
    @common.Param() params: DatafileTypeWhereUniqueInput
  ): Promise<DatafileType | null> {
    try {
      return await this.service.deleteDatafileType({
        where: params,
        select: {
          datafileType: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
