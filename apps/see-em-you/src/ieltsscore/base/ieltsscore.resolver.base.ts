/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateIeltsscoreArgs } from "./CreateIeltsscoreArgs";
import { UpdateIeltsscoreArgs } from "./UpdateIeltsscoreArgs";
import { DeleteIeltsscoreArgs } from "./DeleteIeltsscoreArgs";
import { IeltsscoreCountArgs } from "./IeltsscoreCountArgs";
import { IeltsscoreFindManyArgs } from "./IeltsscoreFindManyArgs";
import { IeltsscoreFindUniqueArgs } from "./IeltsscoreFindUniqueArgs";
import { Ieltsscore } from "./Ieltsscore";
import { Application } from "../../application/base/Application";
import { IeltsscoreService } from "../ieltsscore.service";
@graphql.Resolver(() => Ieltsscore)
export class IeltsscoreResolverBase {
  constructor(protected readonly service: IeltsscoreService) {}

  async _ieltsscoresMeta(
    @graphql.Args() args: IeltsscoreCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Ieltsscore])
  async ieltsscores(
    @graphql.Args() args: IeltsscoreFindManyArgs
  ): Promise<Ieltsscore[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Ieltsscore, { nullable: true })
  async ieltsscore(
    @graphql.Args() args: IeltsscoreFindUniqueArgs
  ): Promise<Ieltsscore | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Ieltsscore)
  async createIeltsscore(
    @graphql.Args() args: CreateIeltsscoreArgs
  ): Promise<Ieltsscore> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        application: {
          connect: args.data.application,
        },
      },
    });
  }

  @graphql.Mutation(() => Ieltsscore)
  async updateIeltsscore(
    @graphql.Args() args: UpdateIeltsscoreArgs
  ): Promise<Ieltsscore | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          application: {
            connect: args.data.application,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Ieltsscore)
  async deleteIeltsscore(
    @graphql.Args() args: DeleteIeltsscoreArgs
  ): Promise<Ieltsscore | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Application, {
    nullable: true,
    name: "application",
  })
  async resolveFieldApplication(
    @graphql.Parent() parent: Ieltsscore
  ): Promise<Application | null> {
    const result = await this.service.getApplication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
