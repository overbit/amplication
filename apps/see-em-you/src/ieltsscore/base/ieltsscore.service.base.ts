/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Ieltsscore as PrismaIeltsscore,
  Application as PrismaApplication,
} from "@prisma/client";

export class IeltsscoreServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.IeltsscoreCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.IeltsscoreCountArgs>
  ): Promise<number> {
    return this.prisma.ieltsscore.count(args);
  }

  async ieltsscores<T extends Prisma.IeltsscoreFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.IeltsscoreFindManyArgs>
  ): Promise<PrismaIeltsscore[]> {
    return this.prisma.ieltsscore.findMany(args);
  }
  async ieltsscore<T extends Prisma.IeltsscoreFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.IeltsscoreFindUniqueArgs>
  ): Promise<PrismaIeltsscore | null> {
    return this.prisma.ieltsscore.findUnique(args);
  }
  async createIeltsscore<T extends Prisma.IeltsscoreCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.IeltsscoreCreateArgs>
  ): Promise<PrismaIeltsscore> {
    return this.prisma.ieltsscore.create<T>(args);
  }
  async updateIeltsscore<T extends Prisma.IeltsscoreUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.IeltsscoreUpdateArgs>
  ): Promise<PrismaIeltsscore> {
    return this.prisma.ieltsscore.update<T>(args);
  }
  async deleteIeltsscore<T extends Prisma.IeltsscoreDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.IeltsscoreDeleteArgs>
  ): Promise<PrismaIeltsscore> {
    return this.prisma.ieltsscore.delete(args);
  }

  async getApplication(parentId: number): Promise<PrismaApplication | null> {
    return this.prisma.ieltsscore
      .findUnique({
        where: { id: parentId },
      })
      .application();
  }
}
