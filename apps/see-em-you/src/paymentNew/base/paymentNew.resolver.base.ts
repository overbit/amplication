/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PaymentNew } from "./PaymentNew";
import { PaymentNewCountArgs } from "./PaymentNewCountArgs";
import { PaymentNewFindManyArgs } from "./PaymentNewFindManyArgs";
import { PaymentNewFindUniqueArgs } from "./PaymentNewFindUniqueArgs";
import { CreatePaymentNewArgs } from "./CreatePaymentNewArgs";
import { UpdatePaymentNewArgs } from "./UpdatePaymentNewArgs";
import { DeletePaymentNewArgs } from "./DeletePaymentNewArgs";
import { PaymentNewService } from "../paymentNew.service";
@graphql.Resolver(() => PaymentNew)
export class PaymentNewResolverBase {
  constructor(protected readonly service: PaymentNewService) {}

  async _paymentNewsMeta(
    @graphql.Args() args: PaymentNewCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PaymentNew])
  async paymentNews(
    @graphql.Args() args: PaymentNewFindManyArgs
  ): Promise<PaymentNew[]> {
    return this.service.paymentNews(args);
  }

  @graphql.Query(() => PaymentNew, { nullable: true })
  async paymentNew(
    @graphql.Args() args: PaymentNewFindUniqueArgs
  ): Promise<PaymentNew | null> {
    const result = await this.service.paymentNew(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PaymentNew)
  async createPaymentNew(
    @graphql.Args() args: CreatePaymentNewArgs
  ): Promise<PaymentNew> {
    return await this.service.createPaymentNew({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PaymentNew)
  async updatePaymentNew(
    @graphql.Args() args: UpdatePaymentNewArgs
  ): Promise<PaymentNew | null> {
    try {
      return await this.service.updatePaymentNew({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PaymentNew)
  async deletePaymentNew(
    @graphql.Args() args: DeletePaymentNewArgs
  ): Promise<PaymentNew | null> {
    try {
      return await this.service.deletePaymentNew(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
