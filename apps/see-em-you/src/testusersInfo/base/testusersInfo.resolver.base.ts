/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTestusersInfoArgs } from "./CreateTestusersInfoArgs";
import { UpdateTestusersInfoArgs } from "./UpdateTestusersInfoArgs";
import { DeleteTestusersInfoArgs } from "./DeleteTestusersInfoArgs";
import { TestusersInfoCountArgs } from "./TestusersInfoCountArgs";
import { TestusersInfoFindManyArgs } from "./TestusersInfoFindManyArgs";
import { TestusersInfoFindUniqueArgs } from "./TestusersInfoFindUniqueArgs";
import { TestusersInfo } from "./TestusersInfo";
import { TestusersInfoService } from "../testusersInfo.service";
@graphql.Resolver(() => TestusersInfo)
export class TestusersInfoResolverBase {
  constructor(protected readonly service: TestusersInfoService) {}

  async _testusersInfosMeta(
    @graphql.Args() args: TestusersInfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TestusersInfo])
  async testusersInfos(
    @graphql.Args() args: TestusersInfoFindManyArgs
  ): Promise<TestusersInfo[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TestusersInfo, { nullable: true })
  async testusersInfo(
    @graphql.Args() args: TestusersInfoFindUniqueArgs
  ): Promise<TestusersInfo | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TestusersInfo)
  async createTestusersInfo(
    @graphql.Args() args: CreateTestusersInfoArgs
  ): Promise<TestusersInfo> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TestusersInfo)
  async updateTestusersInfo(
    @graphql.Args() args: UpdateTestusersInfoArgs
  ): Promise<TestusersInfo | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TestusersInfo)
  async deleteTestusersInfo(
    @graphql.Args() args: DeleteTestusersInfoArgs
  ): Promise<TestusersInfo | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
