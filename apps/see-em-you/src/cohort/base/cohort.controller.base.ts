/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CohortService } from "../cohort.service";
import { CohortCreateInput } from "./CohortCreateInput";
import { Cohort } from "./Cohort";
import { CohortFindManyArgs } from "./CohortFindManyArgs";
import { CohortWhereUniqueInput } from "./CohortWhereUniqueInput";
import { CohortUpdateInput } from "./CohortUpdateInput";

export class CohortControllerBase {
  constructor(protected readonly service: CohortService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Cohort })
  async createCohort(@common.Body() data: CohortCreateInput): Promise<Cohort> {
    return await this.service.createCohort({
      data: {
        ...data,

        period: data.period
          ? {
              connect: data.period,
            }
          : undefined,
      },
      select: {
        closed: true,
        cohortId: true,
        id: true,

        period: {
          select: {
            id: true,
          },
        },

        startDate: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Cohort] })
  @ApiNestedQuery(CohortFindManyArgs)
  async cohorts(@common.Req() request: Request): Promise<Cohort[]> {
    const args = plainToClass(CohortFindManyArgs, request.query);
    return this.service.cohorts({
      ...args,
      select: {
        closed: true,
        cohortId: true,
        id: true,

        period: {
          select: {
            id: true,
          },
        },

        startDate: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Cohort })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cohort(
    @common.Param() params: CohortWhereUniqueInput
  ): Promise<Cohort | null> {
    const result = await this.service.cohort({
      where: params,
      select: {
        closed: true,
        cohortId: true,
        id: true,

        period: {
          select: {
            id: true,
          },
        },

        startDate: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Cohort })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCohort(
    @common.Param() params: CohortWhereUniqueInput,
    @common.Body() data: CohortUpdateInput
  ): Promise<Cohort | null> {
    try {
      return await this.service.updateCohort({
        where: params,
        data: {
          ...data,

          period: data.period
            ? {
                connect: data.period,
              }
            : undefined,
        },
        select: {
          closed: true,
          cohortId: true,
          id: true,

          period: {
            select: {
              id: true,
            },
          },

          startDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Cohort })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCohort(
    @common.Param() params: CohortWhereUniqueInput
  ): Promise<Cohort | null> {
    try {
      return await this.service.deleteCohort({
        where: params,
        select: {
          closed: true,
          cohortId: true,
          id: true,

          period: {
            select: {
              id: true,
            },
          },

          startDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
