/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EtsGre } from "./EtsGre";
import { EtsGreCountArgs } from "./EtsGreCountArgs";
import { EtsGreFindManyArgs } from "./EtsGreFindManyArgs";
import { EtsGreFindUniqueArgs } from "./EtsGreFindUniqueArgs";
import { CreateEtsGreArgs } from "./CreateEtsGreArgs";
import { UpdateEtsGreArgs } from "./UpdateEtsGreArgs";
import { DeleteEtsGreArgs } from "./DeleteEtsGreArgs";
import { EtsGreService } from "../etsGre.service";
@graphql.Resolver(() => EtsGre)
export class EtsGreResolverBase {
  constructor(protected readonly service: EtsGreService) {}

  async _etsGresMeta(
    @graphql.Args() args: EtsGreCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EtsGre])
  async etsGres(@graphql.Args() args: EtsGreFindManyArgs): Promise<EtsGre[]> {
    return this.service.etsGres(args);
  }

  @graphql.Query(() => EtsGre, { nullable: true })
  async etsGre(
    @graphql.Args() args: EtsGreFindUniqueArgs
  ): Promise<EtsGre | null> {
    const result = await this.service.etsGre(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EtsGre)
  async createEtsGre(@graphql.Args() args: CreateEtsGreArgs): Promise<EtsGre> {
    return await this.service.createEtsGre({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => EtsGre)
  async updateEtsGre(
    @graphql.Args() args: UpdateEtsGreArgs
  ): Promise<EtsGre | null> {
    try {
      return await this.service.updateEtsGre({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EtsGre)
  async deleteEtsGre(
    @graphql.Args() args: DeleteEtsGreArgs
  ): Promise<EtsGre | null> {
    try {
      return await this.service.deleteEtsGre(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
