/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, EtsGre as PrismaEtsGre } from "@prisma/client";

export class EtsGreServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.EtsGreCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.EtsGreCountArgs>
  ): Promise<number> {
    return this.prisma.etsGre.count(args);
  }

  async etsGres<T extends Prisma.EtsGreFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EtsGreFindManyArgs>
  ): Promise<PrismaEtsGre[]> {
    return this.prisma.etsGre.findMany(args);
  }
  async etsGre<T extends Prisma.EtsGreFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.EtsGreFindUniqueArgs>
  ): Promise<PrismaEtsGre | null> {
    return this.prisma.etsGre.findUnique(args);
  }
  async createEtsGre<T extends Prisma.EtsGreCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EtsGreCreateArgs>
  ): Promise<PrismaEtsGre> {
    return this.prisma.etsGre.create<T>(args);
  }
  async updateEtsGre<T extends Prisma.EtsGreUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EtsGreUpdateArgs>
  ): Promise<PrismaEtsGre> {
    return this.prisma.etsGre.update<T>(args);
  }
  async deleteEtsGre<T extends Prisma.EtsGreDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.EtsGreDeleteArgs>
  ): Promise<PrismaEtsGre> {
    return this.prisma.etsGre.delete(args);
  }
}
