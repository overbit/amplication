/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateIniYearsExperienceArgs } from "./CreateIniYearsExperienceArgs";
import { UpdateIniYearsExperienceArgs } from "./UpdateIniYearsExperienceArgs";
import { DeleteIniYearsExperienceArgs } from "./DeleteIniYearsExperienceArgs";
import { IniYearsExperienceCountArgs } from "./IniYearsExperienceCountArgs";
import { IniYearsExperienceFindManyArgs } from "./IniYearsExperienceFindManyArgs";
import { IniYearsExperienceFindUniqueArgs } from "./IniYearsExperienceFindUniqueArgs";
import { IniYearsExperience } from "./IniYearsExperience";
import { IniYearsExperienceService } from "../iniYearsExperience.service";
@graphql.Resolver(() => IniYearsExperience)
export class IniYearsExperienceResolverBase {
  constructor(protected readonly service: IniYearsExperienceService) {}

  async _iniYearsExperiencesMeta(
    @graphql.Args() args: IniYearsExperienceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [IniYearsExperience])
  async iniYearsExperiences(
    @graphql.Args() args: IniYearsExperienceFindManyArgs
  ): Promise<IniYearsExperience[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => IniYearsExperience, { nullable: true })
  async iniYearsExperience(
    @graphql.Args() args: IniYearsExperienceFindUniqueArgs
  ): Promise<IniYearsExperience | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => IniYearsExperience)
  async createIniYearsExperience(
    @graphql.Args() args: CreateIniYearsExperienceArgs
  ): Promise<IniYearsExperience> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => IniYearsExperience)
  async updateIniYearsExperience(
    @graphql.Args() args: UpdateIniYearsExperienceArgs
  ): Promise<IniYearsExperience | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => IniYearsExperience)
  async deleteIniYearsExperience(
    @graphql.Args() args: DeleteIniYearsExperienceArgs
  ): Promise<IniYearsExperience | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
