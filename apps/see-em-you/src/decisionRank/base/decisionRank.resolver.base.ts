/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DecisionRank } from "./DecisionRank";
import { DecisionRankCountArgs } from "./DecisionRankCountArgs";
import { DecisionRankFindManyArgs } from "./DecisionRankFindManyArgs";
import { DecisionRankFindUniqueArgs } from "./DecisionRankFindUniqueArgs";
import { CreateDecisionRankArgs } from "./CreateDecisionRankArgs";
import { UpdateDecisionRankArgs } from "./UpdateDecisionRankArgs";
import { DeleteDecisionRankArgs } from "./DeleteDecisionRankArgs";
import { DecisionRankService } from "../decisionRank.service";
@graphql.Resolver(() => DecisionRank)
export class DecisionRankResolverBase {
  constructor(protected readonly service: DecisionRankService) {}

  async _decisionRanksMeta(
    @graphql.Args() args: DecisionRankCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DecisionRank])
  async decisionRanks(
    @graphql.Args() args: DecisionRankFindManyArgs
  ): Promise<DecisionRank[]> {
    return this.service.decisionRanks(args);
  }

  @graphql.Query(() => DecisionRank, { nullable: true })
  async decisionRank(
    @graphql.Args() args: DecisionRankFindUniqueArgs
  ): Promise<DecisionRank | null> {
    const result = await this.service.decisionRank(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DecisionRank)
  async createDecisionRank(
    @graphql.Args() args: CreateDecisionRankArgs
  ): Promise<DecisionRank> {
    return await this.service.createDecisionRank({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DecisionRank)
  async updateDecisionRank(
    @graphql.Args() args: UpdateDecisionRankArgs
  ): Promise<DecisionRank | null> {
    try {
      return await this.service.updateDecisionRank({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DecisionRank)
  async deleteDecisionRank(
    @graphql.Args() args: DeleteDecisionRankArgs
  ): Promise<DecisionRank | null> {
    try {
      return await this.service.deleteDecisionRank(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
