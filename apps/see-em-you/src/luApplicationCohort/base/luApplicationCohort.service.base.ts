/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  LuApplicationCohort, // @ts-ignore
  Application,
} from "@prisma/client";

export class LuApplicationCohortServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.LuApplicationCohortCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.LuApplicationCohortCountArgs>
  ): Promise<number> {
    return this.prisma.luApplicationCohort.count(args);
  }

  async luApplicationCohorts<T extends Prisma.LuApplicationCohortFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LuApplicationCohortFindManyArgs>
  ): Promise<LuApplicationCohort[]> {
    return this.prisma.luApplicationCohort.findMany(args);
  }
  async luApplicationCohort<T extends Prisma.LuApplicationCohortFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LuApplicationCohortFindUniqueArgs>
  ): Promise<LuApplicationCohort | null> {
    return this.prisma.luApplicationCohort.findUnique(args);
  }
  async createLuApplicationCohort<
    T extends Prisma.LuApplicationCohortCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.LuApplicationCohortCreateArgs>
  ): Promise<LuApplicationCohort> {
    return this.prisma.luApplicationCohort.create<T>(args);
  }
  async updateLuApplicationCohort<
    T extends Prisma.LuApplicationCohortUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.LuApplicationCohortUpdateArgs>
  ): Promise<LuApplicationCohort> {
    return this.prisma.luApplicationCohort.update<T>(args);
  }
  async deleteLuApplicationCohort<
    T extends Prisma.LuApplicationCohortDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.LuApplicationCohortDeleteArgs>
  ): Promise<LuApplicationCohort> {
    return this.prisma.luApplicationCohort.delete(args);
  }

  async getApplication(parentId: number): Promise<Application | null> {
    return this.prisma.luApplicationCohort
      .findUnique({
        where: { id: parentId },
      })
      .application();
  }
}
