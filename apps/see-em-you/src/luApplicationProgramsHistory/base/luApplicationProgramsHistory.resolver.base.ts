/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateLuApplicationProgramsHistoryArgs } from "./CreateLuApplicationProgramsHistoryArgs";
import { UpdateLuApplicationProgramsHistoryArgs } from "./UpdateLuApplicationProgramsHistoryArgs";
import { DeleteLuApplicationProgramsHistoryArgs } from "./DeleteLuApplicationProgramsHistoryArgs";
import { LuApplicationProgramsHistoryCountArgs } from "./LuApplicationProgramsHistoryCountArgs";
import { LuApplicationProgramsHistoryFindManyArgs } from "./LuApplicationProgramsHistoryFindManyArgs";
import { LuApplicationProgramsHistoryFindUniqueArgs } from "./LuApplicationProgramsHistoryFindUniqueArgs";
import { LuApplicationProgramsHistory } from "./LuApplicationProgramsHistory";
import { LuApplicationProgramsHistoryService } from "../luApplicationProgramsHistory.service";
@graphql.Resolver(() => LuApplicationProgramsHistory)
export class LuApplicationProgramsHistoryResolverBase {
  constructor(
    protected readonly service: LuApplicationProgramsHistoryService
  ) {}

  async _luApplicationProgramsHistoriesMeta(
    @graphql.Args() args: LuApplicationProgramsHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LuApplicationProgramsHistory])
  async luApplicationProgramsHistories(
    @graphql.Args() args: LuApplicationProgramsHistoryFindManyArgs
  ): Promise<LuApplicationProgramsHistory[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => LuApplicationProgramsHistory, { nullable: true })
  async luApplicationProgramsHistory(
    @graphql.Args() args: LuApplicationProgramsHistoryFindUniqueArgs
  ): Promise<LuApplicationProgramsHistory | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LuApplicationProgramsHistory)
  async createLuApplicationProgramsHistory(
    @graphql.Args() args: CreateLuApplicationProgramsHistoryArgs
  ): Promise<LuApplicationProgramsHistory> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LuApplicationProgramsHistory)
  async updateLuApplicationProgramsHistory(
    @graphql.Args() args: UpdateLuApplicationProgramsHistoryArgs
  ): Promise<LuApplicationProgramsHistory | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LuApplicationProgramsHistory)
  async deleteLuApplicationProgramsHistory(
    @graphql.Args() args: DeleteLuApplicationProgramsHistoryArgs
  ): Promise<LuApplicationProgramsHistory | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
