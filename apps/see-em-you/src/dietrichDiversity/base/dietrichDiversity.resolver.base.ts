/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateDietrichDiversityArgs } from "./CreateDietrichDiversityArgs";
import { UpdateDietrichDiversityArgs } from "./UpdateDietrichDiversityArgs";
import { DeleteDietrichDiversityArgs } from "./DeleteDietrichDiversityArgs";
import { DietrichDiversityCountArgs } from "./DietrichDiversityCountArgs";
import { DietrichDiversityFindManyArgs } from "./DietrichDiversityFindManyArgs";
import { DietrichDiversityFindUniqueArgs } from "./DietrichDiversityFindUniqueArgs";
import { DietrichDiversity } from "./DietrichDiversity";
import { DietrichDiversityService } from "../dietrichDiversity.service";
@graphql.Resolver(() => DietrichDiversity)
export class DietrichDiversityResolverBase {
  constructor(protected readonly service: DietrichDiversityService) {}

  async _dietrichDiversitiesMeta(
    @graphql.Args() args: DietrichDiversityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DietrichDiversity])
  async dietrichDiversities(
    @graphql.Args() args: DietrichDiversityFindManyArgs
  ): Promise<DietrichDiversity[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => DietrichDiversity, { nullable: true })
  async dietrichDiversity(
    @graphql.Args() args: DietrichDiversityFindUniqueArgs
  ): Promise<DietrichDiversity | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DietrichDiversity)
  async createDietrichDiversity(
    @graphql.Args() args: CreateDietrichDiversityArgs
  ): Promise<DietrichDiversity> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DietrichDiversity)
  async updateDietrichDiversity(
    @graphql.Args() args: UpdateDietrichDiversityArgs
  ): Promise<DietrichDiversity | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DietrichDiversity)
  async deleteDietrichDiversity(
    @graphql.Args() args: DeleteDietrichDiversityArgs
  ): Promise<DietrichDiversity | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
