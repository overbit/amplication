/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DietrichDiversityService } from "../dietrichDiversity.service";
import { DietrichDiversityCreateInput } from "./DietrichDiversityCreateInput";
import { DietrichDiversity } from "./DietrichDiversity";
import { DietrichDiversityFindManyArgs } from "./DietrichDiversityFindManyArgs";
import { DietrichDiversityWhereUniqueInput } from "./DietrichDiversityWhereUniqueInput";
import { DietrichDiversityUpdateInput } from "./DietrichDiversityUpdateInput";

export class DietrichDiversityControllerBase {
  constructor(protected readonly service: DietrichDiversityService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DietrichDiversity })
  async createDietrichDiversity(
    @common.Body() data: DietrichDiversityCreateInput
  ): Promise<DietrichDiversity> {
    return await this.service.createDietrichDiversity({
      data: data,
      select: {
        applicationId: true,
        background: true,
        id: true,
        lifeExperience: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DietrichDiversity] })
  @ApiNestedQuery(DietrichDiversityFindManyArgs)
  async dietrichDiversities(
    @common.Req() request: Request
  ): Promise<DietrichDiversity[]> {
    const args = plainToClass(DietrichDiversityFindManyArgs, request.query);
    return this.service.dietrichDiversities({
      ...args,
      select: {
        applicationId: true,
        background: true,
        id: true,
        lifeExperience: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DietrichDiversity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dietrichDiversity(
    @common.Param() params: DietrichDiversityWhereUniqueInput
  ): Promise<DietrichDiversity | null> {
    const result = await this.service.dietrichDiversity({
      where: params,
      select: {
        applicationId: true,
        background: true,
        id: true,
        lifeExperience: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DietrichDiversity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDietrichDiversity(
    @common.Param() params: DietrichDiversityWhereUniqueInput,
    @common.Body() data: DietrichDiversityUpdateInput
  ): Promise<DietrichDiversity | null> {
    try {
      return await this.service.updateDietrichDiversity({
        where: params,
        data: data,
        select: {
          applicationId: true,
          background: true,
          id: true,
          lifeExperience: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DietrichDiversity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDietrichDiversity(
    @common.Param() params: DietrichDiversityWhereUniqueInput
  ): Promise<DietrichDiversity | null> {
    try {
      return await this.service.deleteDietrichDiversity({
        where: params,
        select: {
          applicationId: true,
          background: true,
          id: true,
          lifeExperience: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
