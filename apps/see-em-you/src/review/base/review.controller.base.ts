/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReviewService } from "../review.service";
import { ReviewCreateInput } from "./ReviewCreateInput";
import { ReviewWhereInput } from "./ReviewWhereInput";
import { ReviewWhereUniqueInput } from "./ReviewWhereUniqueInput";
import { ReviewFindManyArgs } from "./ReviewFindManyArgs";
import { ReviewUpdateInput } from "./ReviewUpdateInput";
import { Review } from "./Review";

export class ReviewControllerBase {
  constructor(protected readonly service: ReviewService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Review })
  async create(@common.Body() data: ReviewCreateInput): Promise<Review> {
    return await this.service.create({
      data: {
        ...data,

        application: {
          connect: data.application,
        },
      },
      select: {
        admitVote: true,
        adviseTime: true,

        application: {
          select: {
            id: true,
          },
        },

        background: true,
        brilliance: true,
        comments: true,
        commitMoney: true,
        committeeVote: true,
        departmentId: true,
        facVote: true,
        fundSource: true,
        grades: true,
        gradName: true,
        id: true,
        impressed: true,
        interview: true,
        mseExperienceLen: true,
        otherInterest: true,
        pertinentInfo: true,
        point: true,
        point2: true,
        point2Certainty: true,
        pointCertainty: true,
        privateComments: true,
        publications: true,
        recommendations: true,
        recruited: true,
        reviewerId: true,
        round: true,
        round2: true,
        round3: true,
        rrank: true,
        statement: true,
        supplementalReview: true,
        touched: true,
        updated: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Review] })
  @ApiNestedQuery(ReviewFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Review[]> {
    const args = plainToClass(ReviewFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        admitVote: true,
        adviseTime: true,

        application: {
          select: {
            id: true,
          },
        },

        background: true,
        brilliance: true,
        comments: true,
        commitMoney: true,
        committeeVote: true,
        departmentId: true,
        facVote: true,
        fundSource: true,
        grades: true,
        gradName: true,
        id: true,
        impressed: true,
        interview: true,
        mseExperienceLen: true,
        otherInterest: true,
        pertinentInfo: true,
        point: true,
        point2: true,
        point2Certainty: true,
        pointCertainty: true,
        privateComments: true,
        publications: true,
        recommendations: true,
        recruited: true,
        reviewerId: true,
        round: true,
        round2: true,
        round3: true,
        rrank: true,
        statement: true,
        supplementalReview: true,
        touched: true,
        updated: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Review })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: ReviewWhereUniqueInput
  ): Promise<Review | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        admitVote: true,
        adviseTime: true,

        application: {
          select: {
            id: true,
          },
        },

        background: true,
        brilliance: true,
        comments: true,
        commitMoney: true,
        committeeVote: true,
        departmentId: true,
        facVote: true,
        fundSource: true,
        grades: true,
        gradName: true,
        id: true,
        impressed: true,
        interview: true,
        mseExperienceLen: true,
        otherInterest: true,
        pertinentInfo: true,
        point: true,
        point2: true,
        point2Certainty: true,
        pointCertainty: true,
        privateComments: true,
        publications: true,
        recommendations: true,
        recruited: true,
        reviewerId: true,
        round: true,
        round2: true,
        round3: true,
        rrank: true,
        statement: true,
        supplementalReview: true,
        touched: true,
        updated: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Review })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: ReviewWhereUniqueInput,
    @common.Body() data: ReviewUpdateInput
  ): Promise<Review | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          application: {
            connect: data.application,
          },
        },
        select: {
          admitVote: true,
          adviseTime: true,

          application: {
            select: {
              id: true,
            },
          },

          background: true,
          brilliance: true,
          comments: true,
          commitMoney: true,
          committeeVote: true,
          departmentId: true,
          facVote: true,
          fundSource: true,
          grades: true,
          gradName: true,
          id: true,
          impressed: true,
          interview: true,
          mseExperienceLen: true,
          otherInterest: true,
          pertinentInfo: true,
          point: true,
          point2: true,
          point2Certainty: true,
          pointCertainty: true,
          privateComments: true,
          publications: true,
          recommendations: true,
          recruited: true,
          reviewerId: true,
          round: true,
          round2: true,
          round3: true,
          rrank: true,
          statement: true,
          supplementalReview: true,
          touched: true,
          updated: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Review })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: ReviewWhereUniqueInput
  ): Promise<Review | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          admitVote: true,
          adviseTime: true,

          application: {
            select: {
              id: true,
            },
          },

          background: true,
          brilliance: true,
          comments: true,
          commitMoney: true,
          committeeVote: true,
          departmentId: true,
          facVote: true,
          fundSource: true,
          grades: true,
          gradName: true,
          id: true,
          impressed: true,
          interview: true,
          mseExperienceLen: true,
          otherInterest: true,
          pertinentInfo: true,
          point: true,
          point2: true,
          point2Certainty: true,
          pointCertainty: true,
          privateComments: true,
          publications: true,
          recommendations: true,
          recruited: true,
          reviewerId: true,
          round: true,
          round2: true,
          round3: true,
          rrank: true,
          statement: true,
          supplementalReview: true,
          touched: true,
          updated: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
