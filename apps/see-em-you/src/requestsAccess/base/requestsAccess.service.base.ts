/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, RequestsAccess as PrismaRequestsAccess } from "@prisma/client";

export class RequestsAccessServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.RequestsAccessCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.RequestsAccessCountArgs>
  ): Promise<number> {
    return this.prisma.requestsAccess.count(args);
  }

  async requestsAccesses<T extends Prisma.RequestsAccessFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RequestsAccessFindManyArgs>
  ): Promise<PrismaRequestsAccess[]> {
    return this.prisma.requestsAccess.findMany(args);
  }
  async requestsAccess<T extends Prisma.RequestsAccessFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RequestsAccessFindUniqueArgs>
  ): Promise<PrismaRequestsAccess | null> {
    return this.prisma.requestsAccess.findUnique(args);
  }
  async createRequestsAccess<T extends Prisma.RequestsAccessCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RequestsAccessCreateArgs>
  ): Promise<PrismaRequestsAccess> {
    return this.prisma.requestsAccess.create<T>(args);
  }
  async updateRequestsAccess<T extends Prisma.RequestsAccessUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RequestsAccessUpdateArgs>
  ): Promise<PrismaRequestsAccess> {
    return this.prisma.requestsAccess.update<T>(args);
  }
  async deleteRequestsAccess<T extends Prisma.RequestsAccessDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RequestsAccessDeleteArgs>
  ): Promise<PrismaRequestsAccess> {
    return this.prisma.requestsAccess.delete(args);
  }
}
