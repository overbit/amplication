/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RequestsAccessService } from "../requestsAccess.service";
import { RequestsAccessCreateInput } from "./RequestsAccessCreateInput";
import { RequestsAccess } from "./RequestsAccess";
import { RequestsAccessFindManyArgs } from "./RequestsAccessFindManyArgs";
import { RequestsAccessWhereUniqueInput } from "./RequestsAccessWhereUniqueInput";
import { RequestsAccessUpdateInput } from "./RequestsAccessUpdateInput";

export class RequestsAccessControllerBase {
  constructor(protected readonly service: RequestsAccessService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RequestsAccess })
  async createRequestsAccess(
    @common.Body() data: RequestsAccessCreateInput
  ): Promise<RequestsAccess> {
    return await this.service.createRequestsAccess({
      data: data,
      select: {
        createdDate: true,
        id: true,
        user: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RequestsAccess] })
  @ApiNestedQuery(RequestsAccessFindManyArgs)
  async requestsAccesses(
    @common.Req() request: Request
  ): Promise<RequestsAccess[]> {
    const args = plainToClass(RequestsAccessFindManyArgs, request.query);
    return this.service.requestsAccesses({
      ...args,
      select: {
        createdDate: true,
        id: true,
        user: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RequestsAccess })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async requestsAccess(
    @common.Param() params: RequestsAccessWhereUniqueInput
  ): Promise<RequestsAccess | null> {
    const result = await this.service.requestsAccess({
      where: params,
      select: {
        createdDate: true,
        id: true,
        user: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RequestsAccess })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRequestsAccess(
    @common.Param() params: RequestsAccessWhereUniqueInput,
    @common.Body() data: RequestsAccessUpdateInput
  ): Promise<RequestsAccess | null> {
    try {
      return await this.service.updateRequestsAccess({
        where: params,
        data: data,
        select: {
          createdDate: true,
          id: true,
          user: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RequestsAccess })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRequestsAccess(
    @common.Param() params: RequestsAccessWhereUniqueInput
  ): Promise<RequestsAccess | null> {
    try {
      return await this.service.deleteRequestsAccess({
        where: params,
        select: {
          createdDate: true,
          id: true,
          user: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
