/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  LangProfRecommenderInfo as PrismaLangProfRecommenderInfo,
} from "@prisma/client";

export class LangProfRecommenderInfoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.LangProfRecommenderInfoCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.LangProfRecommenderInfoCountArgs>
  ): Promise<number> {
    return this.prisma.langProfRecommenderInfo.count(args);
  }

  async langProfRecommenderInfos<
    T extends Prisma.LangProfRecommenderInfoFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.LangProfRecommenderInfoFindManyArgs>
  ): Promise<PrismaLangProfRecommenderInfo[]> {
    return this.prisma.langProfRecommenderInfo.findMany(args);
  }
  async langProfRecommenderInfo<
    T extends Prisma.LangProfRecommenderInfoFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.LangProfRecommenderInfoFindUniqueArgs>
  ): Promise<PrismaLangProfRecommenderInfo | null> {
    return this.prisma.langProfRecommenderInfo.findUnique(args);
  }
  async createLangProfRecommenderInfo<
    T extends Prisma.LangProfRecommenderInfoCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.LangProfRecommenderInfoCreateArgs>
  ): Promise<PrismaLangProfRecommenderInfo> {
    return this.prisma.langProfRecommenderInfo.create<T>(args);
  }
  async updateLangProfRecommenderInfo<
    T extends Prisma.LangProfRecommenderInfoUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.LangProfRecommenderInfoUpdateArgs>
  ): Promise<PrismaLangProfRecommenderInfo> {
    return this.prisma.langProfRecommenderInfo.update<T>(args);
  }
  async deleteLangProfRecommenderInfo<
    T extends Prisma.LangProfRecommenderInfoDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.LangProfRecommenderInfoDeleteArgs>
  ): Promise<PrismaLangProfRecommenderInfo> {
    return this.prisma.langProfRecommenderInfo.delete(args);
  }
}
