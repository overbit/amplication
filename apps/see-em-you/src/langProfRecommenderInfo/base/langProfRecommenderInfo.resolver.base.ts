/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LangProfRecommenderInfo } from "./LangProfRecommenderInfo";
import { LangProfRecommenderInfoCountArgs } from "./LangProfRecommenderInfoCountArgs";
import { LangProfRecommenderInfoFindManyArgs } from "./LangProfRecommenderInfoFindManyArgs";
import { LangProfRecommenderInfoFindUniqueArgs } from "./LangProfRecommenderInfoFindUniqueArgs";
import { CreateLangProfRecommenderInfoArgs } from "./CreateLangProfRecommenderInfoArgs";
import { UpdateLangProfRecommenderInfoArgs } from "./UpdateLangProfRecommenderInfoArgs";
import { DeleteLangProfRecommenderInfoArgs } from "./DeleteLangProfRecommenderInfoArgs";
import { LangProfRecommenderInfoService } from "../langProfRecommenderInfo.service";
@graphql.Resolver(() => LangProfRecommenderInfo)
export class LangProfRecommenderInfoResolverBase {
  constructor(protected readonly service: LangProfRecommenderInfoService) {}

  async _langProfRecommenderInfosMeta(
    @graphql.Args() args: LangProfRecommenderInfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LangProfRecommenderInfo])
  async langProfRecommenderInfos(
    @graphql.Args() args: LangProfRecommenderInfoFindManyArgs
  ): Promise<LangProfRecommenderInfo[]> {
    return this.service.langProfRecommenderInfos(args);
  }

  @graphql.Query(() => LangProfRecommenderInfo, { nullable: true })
  async langProfRecommenderInfo(
    @graphql.Args() args: LangProfRecommenderInfoFindUniqueArgs
  ): Promise<LangProfRecommenderInfo | null> {
    const result = await this.service.langProfRecommenderInfo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LangProfRecommenderInfo)
  async createLangProfRecommenderInfo(
    @graphql.Args() args: CreateLangProfRecommenderInfoArgs
  ): Promise<LangProfRecommenderInfo> {
    return await this.service.createLangProfRecommenderInfo({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LangProfRecommenderInfo)
  async updateLangProfRecommenderInfo(
    @graphql.Args() args: UpdateLangProfRecommenderInfoArgs
  ): Promise<LangProfRecommenderInfo | null> {
    try {
      return await this.service.updateLangProfRecommenderInfo({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LangProfRecommenderInfo)
  async deleteLangProfRecommenderInfo(
    @graphql.Args() args: DeleteLangProfRecommenderInfoArgs
  ): Promise<LangProfRecommenderInfo | null> {
    try {
      return await this.service.deleteLangProfRecommenderInfo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
