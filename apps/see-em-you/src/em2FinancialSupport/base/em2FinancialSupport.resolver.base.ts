/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Em2FinancialSupport } from "./Em2FinancialSupport";
import { Em2FinancialSupportCountArgs } from "./Em2FinancialSupportCountArgs";
import { Em2FinancialSupportFindManyArgs } from "./Em2FinancialSupportFindManyArgs";
import { Em2FinancialSupportFindUniqueArgs } from "./Em2FinancialSupportFindUniqueArgs";
import { CreateEm2FinancialSupportArgs } from "./CreateEm2FinancialSupportArgs";
import { UpdateEm2FinancialSupportArgs } from "./UpdateEm2FinancialSupportArgs";
import { DeleteEm2FinancialSupportArgs } from "./DeleteEm2FinancialSupportArgs";
import { Em2FinancialSupportService } from "../em2FinancialSupport.service";
@graphql.Resolver(() => Em2FinancialSupport)
export class Em2FinancialSupportResolverBase {
  constructor(protected readonly service: Em2FinancialSupportService) {}

  async _em2FinancialSupportsMeta(
    @graphql.Args() args: Em2FinancialSupportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Em2FinancialSupport])
  async em2FinancialSupports(
    @graphql.Args() args: Em2FinancialSupportFindManyArgs
  ): Promise<Em2FinancialSupport[]> {
    return this.service.em2FinancialSupports(args);
  }

  @graphql.Query(() => Em2FinancialSupport, { nullable: true })
  async em2FinancialSupport(
    @graphql.Args() args: Em2FinancialSupportFindUniqueArgs
  ): Promise<Em2FinancialSupport | null> {
    const result = await this.service.em2FinancialSupport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Em2FinancialSupport)
  async createEm2FinancialSupport(
    @graphql.Args() args: CreateEm2FinancialSupportArgs
  ): Promise<Em2FinancialSupport> {
    return await this.service.createEm2FinancialSupport({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Em2FinancialSupport)
  async updateEm2FinancialSupport(
    @graphql.Args() args: UpdateEm2FinancialSupportArgs
  ): Promise<Em2FinancialSupport | null> {
    try {
      return await this.service.updateEm2FinancialSupport({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Em2FinancialSupport)
  async deleteEm2FinancialSupport(
    @graphql.Args() args: DeleteEm2FinancialSupportArgs
  ): Promise<Em2FinancialSupport | null> {
    try {
      return await this.service.deleteEm2FinancialSupport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
