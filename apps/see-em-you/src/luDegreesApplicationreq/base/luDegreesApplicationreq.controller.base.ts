/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LuDegreesApplicationreqService } from "../luDegreesApplicationreq.service";
import { LuDegreesApplicationreqCreateInput } from "./LuDegreesApplicationreqCreateInput";
import { LuDegreesApplicationreq } from "./LuDegreesApplicationreq";
import { LuDegreesApplicationreqFindManyArgs } from "./LuDegreesApplicationreqFindManyArgs";
import { LuDegreesApplicationreqWhereUniqueInput } from "./LuDegreesApplicationreqWhereUniqueInput";
import { LuDegreesApplicationreqUpdateInput } from "./LuDegreesApplicationreqUpdateInput";

export class LuDegreesApplicationreqControllerBase {
  constructor(protected readonly service: LuDegreesApplicationreqService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LuDegreesApplicationreq })
  async createLuDegreesApplicationreq(
    @common.Body() data: LuDegreesApplicationreqCreateInput
  ): Promise<LuDegreesApplicationreq> {
    return await this.service.createLuDegreesApplicationreq({
      data: data,
      select: {
        degreeId: true,
        appreqId: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LuDegreesApplicationreq] })
  @ApiNestedQuery(LuDegreesApplicationreqFindManyArgs)
  async luDegreesApplicationreqs(
    @common.Req() request: Request
  ): Promise<LuDegreesApplicationreq[]> {
    const args = plainToClass(
      LuDegreesApplicationreqFindManyArgs,
      request.query
    );
    return this.service.luDegreesApplicationreqs({
      ...args,
      select: {
        degreeId: true,
        appreqId: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LuDegreesApplicationreq })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async luDegreesApplicationreq(
    @common.Param() params: LuDegreesApplicationreqWhereUniqueInput
  ): Promise<LuDegreesApplicationreq | null> {
    const result = await this.service.luDegreesApplicationreq({
      where: params,
      select: {
        degreeId: true,
        appreqId: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LuDegreesApplicationreq })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLuDegreesApplicationreq(
    @common.Param() params: LuDegreesApplicationreqWhereUniqueInput,
    @common.Body() data: LuDegreesApplicationreqUpdateInput
  ): Promise<LuDegreesApplicationreq | null> {
    try {
      return await this.service.updateLuDegreesApplicationreq({
        where: params,
        data: data,
        select: {
          degreeId: true,
          appreqId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LuDegreesApplicationreq })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLuDegreesApplicationreq(
    @common.Param() params: LuDegreesApplicationreqWhereUniqueInput
  ): Promise<LuDegreesApplicationreq | null> {
    try {
      return await this.service.deleteLuDegreesApplicationreq({
        where: params,
        select: {
          degreeId: true,
          appreqId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
