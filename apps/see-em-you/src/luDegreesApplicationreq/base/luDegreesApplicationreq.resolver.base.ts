/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LuDegreesApplicationreq } from "./LuDegreesApplicationreq";
import { LuDegreesApplicationreqCountArgs } from "./LuDegreesApplicationreqCountArgs";
import { LuDegreesApplicationreqFindManyArgs } from "./LuDegreesApplicationreqFindManyArgs";
import { LuDegreesApplicationreqFindUniqueArgs } from "./LuDegreesApplicationreqFindUniqueArgs";
import { CreateLuDegreesApplicationreqArgs } from "./CreateLuDegreesApplicationreqArgs";
import { UpdateLuDegreesApplicationreqArgs } from "./UpdateLuDegreesApplicationreqArgs";
import { DeleteLuDegreesApplicationreqArgs } from "./DeleteLuDegreesApplicationreqArgs";
import { LuDegreesApplicationreqService } from "../luDegreesApplicationreq.service";
@graphql.Resolver(() => LuDegreesApplicationreq)
export class LuDegreesApplicationreqResolverBase {
  constructor(protected readonly service: LuDegreesApplicationreqService) {}

  async _luDegreesApplicationreqsMeta(
    @graphql.Args() args: LuDegreesApplicationreqCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LuDegreesApplicationreq])
  async luDegreesApplicationreqs(
    @graphql.Args() args: LuDegreesApplicationreqFindManyArgs
  ): Promise<LuDegreesApplicationreq[]> {
    return this.service.luDegreesApplicationreqs(args);
  }

  @graphql.Query(() => LuDegreesApplicationreq, { nullable: true })
  async luDegreesApplicationreq(
    @graphql.Args() args: LuDegreesApplicationreqFindUniqueArgs
  ): Promise<LuDegreesApplicationreq | null> {
    const result = await this.service.luDegreesApplicationreq(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LuDegreesApplicationreq)
  async createLuDegreesApplicationreq(
    @graphql.Args() args: CreateLuDegreesApplicationreqArgs
  ): Promise<LuDegreesApplicationreq> {
    return await this.service.createLuDegreesApplicationreq({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LuDegreesApplicationreq)
  async updateLuDegreesApplicationreq(
    @graphql.Args() args: UpdateLuDegreesApplicationreqArgs
  ): Promise<LuDegreesApplicationreq | null> {
    try {
      return await this.service.updateLuDegreesApplicationreq({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LuDegreesApplicationreq)
  async deleteLuDegreesApplicationreq(
    @graphql.Args() args: DeleteLuDegreesApplicationreqArgs
  ): Promise<LuDegreesApplicationreq | null> {
    try {
      return await this.service.deleteLuDegreesApplicationreq(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
