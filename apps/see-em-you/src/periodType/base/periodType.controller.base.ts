/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PeriodTypeService } from "../periodType.service";
import { PeriodTypeCreateInput } from "./PeriodTypeCreateInput";
import { PeriodType } from "./PeriodType";
import { PeriodTypeFindManyArgs } from "./PeriodTypeFindManyArgs";
import { PeriodTypeWhereUniqueInput } from "./PeriodTypeWhereUniqueInput";
import { PeriodTypeUpdateInput } from "./PeriodTypeUpdateInput";

export class PeriodTypeControllerBase {
  constructor(protected readonly service: PeriodTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PeriodType })
  async createPeriodType(
    @common.Body() data: PeriodTypeCreateInput
  ): Promise<PeriodType> {
    return await this.service.createPeriodType({
      data: data,
      select: {
        id: true,
        periodType: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PeriodType] })
  @ApiNestedQuery(PeriodTypeFindManyArgs)
  async periodTypes(@common.Req() request: Request): Promise<PeriodType[]> {
    const args = plainToClass(PeriodTypeFindManyArgs, request.query);
    return this.service.periodTypes({
      ...args,
      select: {
        id: true,
        periodType: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PeriodType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async periodType(
    @common.Param() params: PeriodTypeWhereUniqueInput
  ): Promise<PeriodType | null> {
    const result = await this.service.periodType({
      where: params,
      select: {
        id: true,
        periodType: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PeriodType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePeriodType(
    @common.Param() params: PeriodTypeWhereUniqueInput,
    @common.Body() data: PeriodTypeUpdateInput
  ): Promise<PeriodType | null> {
    try {
      return await this.service.updatePeriodType({
        where: params,
        data: data,
        select: {
          id: true,
          periodType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PeriodType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePeriodType(
    @common.Param() params: PeriodTypeWhereUniqueInput
  ): Promise<PeriodType | null> {
    try {
      return await this.service.deletePeriodType({
        where: params,
        select: {
          id: true,
          periodType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
