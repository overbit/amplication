/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MlSupportingCourseworkService } from "../mlSupportingCoursework.service";
import { MlSupportingCourseworkCreateInput } from "./MlSupportingCourseworkCreateInput";
import { MlSupportingCoursework } from "./MlSupportingCoursework";
import { MlSupportingCourseworkFindManyArgs } from "./MlSupportingCourseworkFindManyArgs";
import { MlSupportingCourseworkWhereUniqueInput } from "./MlSupportingCourseworkWhereUniqueInput";
import { MlSupportingCourseworkUpdateInput } from "./MlSupportingCourseworkUpdateInput";

export class MlSupportingCourseworkControllerBase {
  constructor(protected readonly service: MlSupportingCourseworkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MlSupportingCoursework })
  async createMlSupportingCoursework(
    @common.Body() data: MlSupportingCourseworkCreateInput
  ): Promise<MlSupportingCoursework> {
    return await this.service.createMlSupportingCoursework({
      data: {
        ...data,

        application: {
          connect: data.application,
        },
      },
      select: {
        introCourseNum: true,
        introCourseSemester: true,
        introCourseGrade: true,
        introCourse2Num: true,
        introCourse2Semester: true,
        introCourse2Grade: true,
        ml1CourseNum: true,
        ml1CourseSemester: true,
        ml1CourseGrade: true,
        ml2CourseNum: true,
        ml2CourseSemester: true,
        ml2CourseGrade: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MlSupportingCoursework] })
  @ApiNestedQuery(MlSupportingCourseworkFindManyArgs)
  async mlSupportingCourseworks(
    @common.Req() request: Request
  ): Promise<MlSupportingCoursework[]> {
    const args = plainToClass(
      MlSupportingCourseworkFindManyArgs,
      request.query
    );
    return this.service.mlSupportingCourseworks({
      ...args,
      select: {
        introCourseNum: true,
        introCourseSemester: true,
        introCourseGrade: true,
        introCourse2Num: true,
        introCourse2Semester: true,
        introCourse2Grade: true,
        ml1CourseNum: true,
        ml1CourseSemester: true,
        ml1CourseGrade: true,
        ml2CourseNum: true,
        ml2CourseSemester: true,
        ml2CourseGrade: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MlSupportingCoursework })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mlSupportingCoursework(
    @common.Param() params: MlSupportingCourseworkWhereUniqueInput
  ): Promise<MlSupportingCoursework | null> {
    const result = await this.service.mlSupportingCoursework({
      where: params,
      select: {
        introCourseNum: true,
        introCourseSemester: true,
        introCourseGrade: true,
        introCourse2Num: true,
        introCourse2Semester: true,
        introCourse2Grade: true,
        ml1CourseNum: true,
        ml1CourseSemester: true,
        ml1CourseGrade: true,
        ml2CourseNum: true,
        ml2CourseSemester: true,
        ml2CourseGrade: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MlSupportingCoursework })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMlSupportingCoursework(
    @common.Param() params: MlSupportingCourseworkWhereUniqueInput,
    @common.Body() data: MlSupportingCourseworkUpdateInput
  ): Promise<MlSupportingCoursework | null> {
    try {
      return await this.service.updateMlSupportingCoursework({
        where: params,
        data: {
          ...data,

          application: {
            connect: data.application,
          },
        },
        select: {
          introCourseNum: true,
          introCourseSemester: true,
          introCourseGrade: true,
          introCourse2Num: true,
          introCourse2Semester: true,
          introCourse2Grade: true,
          ml1CourseNum: true,
          ml1CourseSemester: true,
          ml1CourseGrade: true,
          ml2CourseNum: true,
          ml2CourseSemester: true,
          ml2CourseGrade: true,

          application: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MlSupportingCoursework })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMlSupportingCoursework(
    @common.Param() params: MlSupportingCourseworkWhereUniqueInput
  ): Promise<MlSupportingCoursework | null> {
    try {
      return await this.service.deleteMlSupportingCoursework({
        where: params,
        select: {
          introCourseNum: true,
          introCourseSemester: true,
          introCourseGrade: true,
          introCourse2Num: true,
          introCourse2Semester: true,
          introCourse2Grade: true,
          ml1CourseNum: true,
          ml1CourseSemester: true,
          ml1CourseGrade: true,
          ml2CourseNum: true,
          ml2CourseSemester: true,
          ml2CourseGrade: true,

          application: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
