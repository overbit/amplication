/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MlSupportingCourseworkService } from "../mlSupportingCoursework.service";
import { MlSupportingCourseworkCreateInput } from "./MlSupportingCourseworkCreateInput";
import { MlSupportingCourseworkWhereInput } from "./MlSupportingCourseworkWhereInput";
import { MlSupportingCourseworkWhereUniqueInput } from "./MlSupportingCourseworkWhereUniqueInput";
import { MlSupportingCourseworkFindManyArgs } from "./MlSupportingCourseworkFindManyArgs";
import { MlSupportingCourseworkUpdateInput } from "./MlSupportingCourseworkUpdateInput";
import { MlSupportingCoursework } from "./MlSupportingCoursework";

export class MlSupportingCourseworkControllerBase {
  constructor(protected readonly service: MlSupportingCourseworkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MlSupportingCoursework })
  async create(
    @common.Body() data: MlSupportingCourseworkCreateInput
  ): Promise<MlSupportingCoursework> {
    return await this.service.create({
      data: {
        ...data,

        application: {
          connect: data.application,
        },
      },
      select: {
        application: {
          select: {
            id: true,
          },
        },

        id: true,
        introCourse2Grade: true,
        introCourse2Num: true,
        introCourse2Semester: true,
        introCourseGrade: true,
        introCourseNum: true,
        introCourseSemester: true,
        ml1CourseGrade: true,
        ml1CourseNum: true,
        ml1CourseSemester: true,
        ml2CourseGrade: true,
        ml2CourseNum: true,
        ml2CourseSemester: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MlSupportingCoursework] })
  @ApiNestedQuery(MlSupportingCourseworkFindManyArgs)
  async findMany(
    @common.Req() request: Request
  ): Promise<MlSupportingCoursework[]> {
    const args = plainToClass(
      MlSupportingCourseworkFindManyArgs,
      request.query
    );
    return this.service.findMany({
      ...args,
      select: {
        application: {
          select: {
            id: true,
          },
        },

        id: true,
        introCourse2Grade: true,
        introCourse2Num: true,
        introCourse2Semester: true,
        introCourseGrade: true,
        introCourseNum: true,
        introCourseSemester: true,
        ml1CourseGrade: true,
        ml1CourseNum: true,
        ml1CourseSemester: true,
        ml2CourseGrade: true,
        ml2CourseNum: true,
        ml2CourseSemester: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MlSupportingCoursework })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: MlSupportingCourseworkWhereUniqueInput
  ): Promise<MlSupportingCoursework | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        application: {
          select: {
            id: true,
          },
        },

        id: true,
        introCourse2Grade: true,
        introCourse2Num: true,
        introCourse2Semester: true,
        introCourseGrade: true,
        introCourseNum: true,
        introCourseSemester: true,
        ml1CourseGrade: true,
        ml1CourseNum: true,
        ml1CourseSemester: true,
        ml2CourseGrade: true,
        ml2CourseNum: true,
        ml2CourseSemester: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MlSupportingCoursework })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: MlSupportingCourseworkWhereUniqueInput,
    @common.Body() data: MlSupportingCourseworkUpdateInput
  ): Promise<MlSupportingCoursework | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          application: {
            connect: data.application,
          },
        },
        select: {
          application: {
            select: {
              id: true,
            },
          },

          id: true,
          introCourse2Grade: true,
          introCourse2Num: true,
          introCourse2Semester: true,
          introCourseGrade: true,
          introCourseNum: true,
          introCourseSemester: true,
          ml1CourseGrade: true,
          ml1CourseNum: true,
          ml1CourseSemester: true,
          ml2CourseGrade: true,
          ml2CourseNum: true,
          ml2CourseSemester: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MlSupportingCoursework })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: MlSupportingCourseworkWhereUniqueInput
  ): Promise<MlSupportingCoursework | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          application: {
            select: {
              id: true,
            },
          },

          id: true,
          introCourse2Grade: true,
          introCourse2Num: true,
          introCourse2Semester: true,
          introCourseGrade: true,
          introCourseNum: true,
          introCourseSemester: true,
          ml1CourseGrade: true,
          ml1CourseNum: true,
          ml1CourseSemester: true,
          ml2CourseGrade: true,
          ml2CourseNum: true,
          ml2CourseSemester: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
