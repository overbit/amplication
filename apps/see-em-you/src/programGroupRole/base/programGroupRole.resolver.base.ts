/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateProgramGroupRoleArgs } from "./CreateProgramGroupRoleArgs";
import { UpdateProgramGroupRoleArgs } from "./UpdateProgramGroupRoleArgs";
import { DeleteProgramGroupRoleArgs } from "./DeleteProgramGroupRoleArgs";
import { ProgramGroupRoleCountArgs } from "./ProgramGroupRoleCountArgs";
import { ProgramGroupRoleFindManyArgs } from "./ProgramGroupRoleFindManyArgs";
import { ProgramGroupRoleFindUniqueArgs } from "./ProgramGroupRoleFindUniqueArgs";
import { ProgramGroupRole } from "./ProgramGroupRole";
import { ProgramGroupRoleService } from "../programGroupRole.service";
@graphql.Resolver(() => ProgramGroupRole)
export class ProgramGroupRoleResolverBase {
  constructor(protected readonly service: ProgramGroupRoleService) {}

  async _programGroupRolesMeta(
    @graphql.Args() args: ProgramGroupRoleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProgramGroupRole])
  async programGroupRoles(
    @graphql.Args() args: ProgramGroupRoleFindManyArgs
  ): Promise<ProgramGroupRole[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ProgramGroupRole, { nullable: true })
  async programGroupRole(
    @graphql.Args() args: ProgramGroupRoleFindUniqueArgs
  ): Promise<ProgramGroupRole | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProgramGroupRole)
  async createProgramGroupRole(
    @graphql.Args() args: CreateProgramGroupRoleArgs
  ): Promise<ProgramGroupRole> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ProgramGroupRole)
  async updateProgramGroupRole(
    @graphql.Args() args: UpdateProgramGroupRoleArgs
  ): Promise<ProgramGroupRole | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProgramGroupRole)
  async deleteProgramGroupRole(
    @graphql.Args() args: DeleteProgramGroupRoleArgs
  ): Promise<ProgramGroupRole | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
