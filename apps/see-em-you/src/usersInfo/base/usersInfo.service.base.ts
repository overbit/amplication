/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, UsersInfo as PrismaUsersInfo } from "@prisma/client";

export class UsersInfoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.UsersInfoCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.UsersInfoCountArgs>
  ): Promise<number> {
    return this.prisma.usersInfo.count(args);
  }

  async usersInfos<T extends Prisma.UsersInfoFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UsersInfoFindManyArgs>
  ): Promise<PrismaUsersInfo[]> {
    return this.prisma.usersInfo.findMany(args);
  }
  async usersInfo<T extends Prisma.UsersInfoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UsersInfoFindUniqueArgs>
  ): Promise<PrismaUsersInfo | null> {
    return this.prisma.usersInfo.findUnique(args);
  }
  async createUsersInfo<T extends Prisma.UsersInfoCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UsersInfoCreateArgs>
  ): Promise<PrismaUsersInfo> {
    return this.prisma.usersInfo.create<T>(args);
  }
  async updateUsersInfo<T extends Prisma.UsersInfoUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UsersInfoUpdateArgs>
  ): Promise<PrismaUsersInfo> {
    return this.prisma.usersInfo.update<T>(args);
  }
  async deleteUsersInfo<T extends Prisma.UsersInfoDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UsersInfoDeleteArgs>
  ): Promise<PrismaUsersInfo> {
    return this.prisma.usersInfo.delete(args);
  }
}
