/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LangProfRecommendService } from "../langProfRecommend.service";
import { LangProfRecommendCreateInput } from "./LangProfRecommendCreateInput";
import { LangProfRecommend } from "./LangProfRecommend";
import { LangProfRecommendFindManyArgs } from "./LangProfRecommendFindManyArgs";
import { LangProfRecommendWhereUniqueInput } from "./LangProfRecommendWhereUniqueInput";
import { LangProfRecommendUpdateInput } from "./LangProfRecommendUpdateInput";

export class LangProfRecommendControllerBase {
  constructor(protected readonly service: LangProfRecommendService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LangProfRecommend })
  async createLangProfRecommend(
    @common.Body() data: LangProfRecommendCreateInput
  ): Promise<LangProfRecommend> {
    return await this.service.createLangProfRecommend({
      data: data,
      select: {
        applicationId: true,
        content: true,
        datafileId: true,
        id: true,
        langProfRecId: true,
        languageSpecialization: true,
        lastReminderSent: true,
        recUserId: true,
        reminderSentCount: true,
        submitted: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LangProfRecommend] })
  @ApiNestedQuery(LangProfRecommendFindManyArgs)
  async langProfRecommends(
    @common.Req() request: Request
  ): Promise<LangProfRecommend[]> {
    const args = plainToClass(LangProfRecommendFindManyArgs, request.query);
    return this.service.langProfRecommends({
      ...args,
      select: {
        applicationId: true,
        content: true,
        datafileId: true,
        id: true,
        langProfRecId: true,
        languageSpecialization: true,
        lastReminderSent: true,
        recUserId: true,
        reminderSentCount: true,
        submitted: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LangProfRecommend })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async langProfRecommend(
    @common.Param() params: LangProfRecommendWhereUniqueInput
  ): Promise<LangProfRecommend | null> {
    const result = await this.service.langProfRecommend({
      where: params,
      select: {
        applicationId: true,
        content: true,
        datafileId: true,
        id: true,
        langProfRecId: true,
        languageSpecialization: true,
        lastReminderSent: true,
        recUserId: true,
        reminderSentCount: true,
        submitted: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LangProfRecommend })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLangProfRecommend(
    @common.Param() params: LangProfRecommendWhereUniqueInput,
    @common.Body() data: LangProfRecommendUpdateInput
  ): Promise<LangProfRecommend | null> {
    try {
      return await this.service.updateLangProfRecommend({
        where: params,
        data: data,
        select: {
          applicationId: true,
          content: true,
          datafileId: true,
          id: true,
          langProfRecId: true,
          languageSpecialization: true,
          lastReminderSent: true,
          recUserId: true,
          reminderSentCount: true,
          submitted: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LangProfRecommend })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLangProfRecommend(
    @common.Param() params: LangProfRecommendWhereUniqueInput
  ): Promise<LangProfRecommend | null> {
    try {
      return await this.service.deleteLangProfRecommend({
        where: params,
        select: {
          applicationId: true,
          content: true,
          datafileId: true,
          id: true,
          langProfRecId: true,
          languageSpecialization: true,
          lastReminderSent: true,
          recUserId: true,
          reminderSentCount: true,
          submitted: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
