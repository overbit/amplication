/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LangProfRecommend } from "./LangProfRecommend";
import { LangProfRecommendCountArgs } from "./LangProfRecommendCountArgs";
import { LangProfRecommendFindManyArgs } from "./LangProfRecommendFindManyArgs";
import { LangProfRecommendFindUniqueArgs } from "./LangProfRecommendFindUniqueArgs";
import { CreateLangProfRecommendArgs } from "./CreateLangProfRecommendArgs";
import { UpdateLangProfRecommendArgs } from "./UpdateLangProfRecommendArgs";
import { DeleteLangProfRecommendArgs } from "./DeleteLangProfRecommendArgs";
import { LangProfRecommendService } from "../langProfRecommend.service";
@graphql.Resolver(() => LangProfRecommend)
export class LangProfRecommendResolverBase {
  constructor(protected readonly service: LangProfRecommendService) {}

  async _langProfRecommendsMeta(
    @graphql.Args() args: LangProfRecommendCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LangProfRecommend])
  async langProfRecommends(
    @graphql.Args() args: LangProfRecommendFindManyArgs
  ): Promise<LangProfRecommend[]> {
    return this.service.langProfRecommends(args);
  }

  @graphql.Query(() => LangProfRecommend, { nullable: true })
  async langProfRecommend(
    @graphql.Args() args: LangProfRecommendFindUniqueArgs
  ): Promise<LangProfRecommend | null> {
    const result = await this.service.langProfRecommend(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LangProfRecommend)
  async createLangProfRecommend(
    @graphql.Args() args: CreateLangProfRecommendArgs
  ): Promise<LangProfRecommend> {
    return await this.service.createLangProfRecommend({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LangProfRecommend)
  async updateLangProfRecommend(
    @graphql.Args() args: UpdateLangProfRecommendArgs
  ): Promise<LangProfRecommend | null> {
    try {
      return await this.service.updateLangProfRecommend({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LangProfRecommend)
  async deleteLangProfRecommend(
    @graphql.Args() args: DeleteLangProfRecommendArgs
  ): Promise<LangProfRecommend | null> {
    try {
      return await this.service.deleteLangProfRecommend(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
