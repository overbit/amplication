/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateUsHsStatusArgs } from "./CreateUsHsStatusArgs";
import { UpdateUsHsStatusArgs } from "./UpdateUsHsStatusArgs";
import { DeleteUsHsStatusArgs } from "./DeleteUsHsStatusArgs";
import { UsHsStatusCountArgs } from "./UsHsStatusCountArgs";
import { UsHsStatusFindManyArgs } from "./UsHsStatusFindManyArgs";
import { UsHsStatusFindUniqueArgs } from "./UsHsStatusFindUniqueArgs";
import { UsHsStatus } from "./UsHsStatus";
import { UsHsStatusService } from "../usHsStatus.service";
@graphql.Resolver(() => UsHsStatus)
export class UsHsStatusResolverBase {
  constructor(protected readonly service: UsHsStatusService) {}

  async _usHsStatusesMeta(
    @graphql.Args() args: UsHsStatusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UsHsStatus])
  async usHsStatuses(
    @graphql.Args() args: UsHsStatusFindManyArgs
  ): Promise<UsHsStatus[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => UsHsStatus, { nullable: true })
  async usHsStatus(
    @graphql.Args() args: UsHsStatusFindUniqueArgs
  ): Promise<UsHsStatus | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UsHsStatus)
  async createUsHsStatus(
    @graphql.Args() args: CreateUsHsStatusArgs
  ): Promise<UsHsStatus> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UsHsStatus)
  async updateUsHsStatus(
    @graphql.Args() args: UpdateUsHsStatusArgs
  ): Promise<UsHsStatus | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UsHsStatus)
  async deleteUsHsStatus(
    @graphql.Args() args: DeleteUsHsStatusArgs
  ): Promise<UsHsStatus | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
