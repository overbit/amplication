/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MhciPrereqsReferenceService } from "../mhciPrereqsReference.service";
import { MhciPrereqsReferenceCreateInput } from "./MhciPrereqsReferenceCreateInput";
import { MhciPrereqsReference } from "./MhciPrereqsReference";
import { MhciPrereqsReferenceFindManyArgs } from "./MhciPrereqsReferenceFindManyArgs";
import { MhciPrereqsReferenceWhereUniqueInput } from "./MhciPrereqsReferenceWhereUniqueInput";
import { MhciPrereqsReferenceUpdateInput } from "./MhciPrereqsReferenceUpdateInput";

export class MhciPrereqsReferenceControllerBase {
  constructor(protected readonly service: MhciPrereqsReferenceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MhciPrereqsReference })
  async createMhciPrereqsReference(
    @common.Body() data: MhciPrereqsReferenceCreateInput
  ): Promise<MhciPrereqsReference> {
    return await this.service.createMhciPrereqsReference({
      data: data,
      select: {
        applicationId: true,
        refUserId: true,
        content: true,
        datafileId: true,
        submitted: true,
        reminderSentCount: true,
        lastReminderSent: true,
        anova_knowledge: true,
        anovaComment: true,
        regression_knowledge: true,
        regressionComment: true,
        periodId: true,
        programId: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MhciPrereqsReference] })
  @ApiNestedQuery(MhciPrereqsReferenceFindManyArgs)
  async mhciPrereqsReferences(
    @common.Req() request: Request
  ): Promise<MhciPrereqsReference[]> {
    const args = plainToClass(MhciPrereqsReferenceFindManyArgs, request.query);
    return this.service.mhciPrereqsReferences({
      ...args,
      select: {
        applicationId: true,
        refUserId: true,
        content: true,
        datafileId: true,
        submitted: true,
        reminderSentCount: true,
        lastReminderSent: true,
        anova_knowledge: true,
        anovaComment: true,
        regression_knowledge: true,
        regressionComment: true,
        periodId: true,
        programId: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MhciPrereqsReference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mhciPrereqsReference(
    @common.Param() params: MhciPrereqsReferenceWhereUniqueInput
  ): Promise<MhciPrereqsReference | null> {
    const result = await this.service.mhciPrereqsReference({
      where: params,
      select: {
        applicationId: true,
        refUserId: true,
        content: true,
        datafileId: true,
        submitted: true,
        reminderSentCount: true,
        lastReminderSent: true,
        anova_knowledge: true,
        anovaComment: true,
        regression_knowledge: true,
        regressionComment: true,
        periodId: true,
        programId: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MhciPrereqsReference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMhciPrereqsReference(
    @common.Param() params: MhciPrereqsReferenceWhereUniqueInput,
    @common.Body() data: MhciPrereqsReferenceUpdateInput
  ): Promise<MhciPrereqsReference | null> {
    try {
      return await this.service.updateMhciPrereqsReference({
        where: params,
        data: data,
        select: {
          applicationId: true,
          refUserId: true,
          content: true,
          datafileId: true,
          submitted: true,
          reminderSentCount: true,
          lastReminderSent: true,
          anova_knowledge: true,
          anovaComment: true,
          regression_knowledge: true,
          regressionComment: true,
          periodId: true,
          programId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MhciPrereqsReference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMhciPrereqsReference(
    @common.Param() params: MhciPrereqsReferenceWhereUniqueInput
  ): Promise<MhciPrereqsReference | null> {
    try {
      return await this.service.deleteMhciPrereqsReference({
        where: params,
        select: {
          applicationId: true,
          refUserId: true,
          content: true,
          datafileId: true,
          submitted: true,
          reminderSentCount: true,
          lastReminderSent: true,
          anova_knowledge: true,
          anovaComment: true,
          regression_knowledge: true,
          regressionComment: true,
          periodId: true,
          programId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
