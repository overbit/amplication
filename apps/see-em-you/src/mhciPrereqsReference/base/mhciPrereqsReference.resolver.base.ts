/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MhciPrereqsReference } from "./MhciPrereqsReference";
import { MhciPrereqsReferenceCountArgs } from "./MhciPrereqsReferenceCountArgs";
import { MhciPrereqsReferenceFindManyArgs } from "./MhciPrereqsReferenceFindManyArgs";
import { MhciPrereqsReferenceFindUniqueArgs } from "./MhciPrereqsReferenceFindUniqueArgs";
import { CreateMhciPrereqsReferenceArgs } from "./CreateMhciPrereqsReferenceArgs";
import { UpdateMhciPrereqsReferenceArgs } from "./UpdateMhciPrereqsReferenceArgs";
import { DeleteMhciPrereqsReferenceArgs } from "./DeleteMhciPrereqsReferenceArgs";
import { MhciPrereqsReferenceService } from "../mhciPrereqsReference.service";
@graphql.Resolver(() => MhciPrereqsReference)
export class MhciPrereqsReferenceResolverBase {
  constructor(protected readonly service: MhciPrereqsReferenceService) {}

  async _mhciPrereqsReferencesMeta(
    @graphql.Args() args: MhciPrereqsReferenceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MhciPrereqsReference])
  async mhciPrereqsReferences(
    @graphql.Args() args: MhciPrereqsReferenceFindManyArgs
  ): Promise<MhciPrereqsReference[]> {
    return this.service.mhciPrereqsReferences(args);
  }

  @graphql.Query(() => MhciPrereqsReference, { nullable: true })
  async mhciPrereqsReference(
    @graphql.Args() args: MhciPrereqsReferenceFindUniqueArgs
  ): Promise<MhciPrereqsReference | null> {
    const result = await this.service.mhciPrereqsReference(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MhciPrereqsReference)
  async createMhciPrereqsReference(
    @graphql.Args() args: CreateMhciPrereqsReferenceArgs
  ): Promise<MhciPrereqsReference> {
    return await this.service.createMhciPrereqsReference({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MhciPrereqsReference)
  async updateMhciPrereqsReference(
    @graphql.Args() args: UpdateMhciPrereqsReferenceArgs
  ): Promise<MhciPrereqsReference | null> {
    try {
      return await this.service.updateMhciPrereqsReference({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MhciPrereqsReference)
  async deleteMhciPrereqsReference(
    @graphql.Args() args: DeleteMhciPrereqsReferenceArgs
  ): Promise<MhciPrereqsReference | null> {
    try {
      return await this.service.deleteMhciPrereqsReference(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
