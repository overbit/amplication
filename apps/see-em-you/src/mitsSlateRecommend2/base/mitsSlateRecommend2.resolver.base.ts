/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateMitsSlateRecommend2Args } from "./CreateMitsSlateRecommend2Args";
import { UpdateMitsSlateRecommend2Args } from "./UpdateMitsSlateRecommend2Args";
import { DeleteMitsSlateRecommend2Args } from "./DeleteMitsSlateRecommend2Args";
import { MitsSlateRecommend2CountArgs } from "./MitsSlateRecommend2CountArgs";
import { MitsSlateRecommend2FindManyArgs } from "./MitsSlateRecommend2FindManyArgs";
import { MitsSlateRecommend2FindUniqueArgs } from "./MitsSlateRecommend2FindUniqueArgs";
import { MitsSlateRecommend2 } from "./MitsSlateRecommend2";
import { MitsSlateRecommend2Service } from "../mitsSlateRecommend2.service";
@graphql.Resolver(() => MitsSlateRecommend2)
export class MitsSlateRecommend2ResolverBase {
  constructor(protected readonly service: MitsSlateRecommend2Service) {}

  async _mitsSlateRecommend2sMeta(
    @graphql.Args() args: MitsSlateRecommend2CountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MitsSlateRecommend2])
  async mitsSlateRecommend2s(
    @graphql.Args() args: MitsSlateRecommend2FindManyArgs
  ): Promise<MitsSlateRecommend2[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => MitsSlateRecommend2, { nullable: true })
  async mitsSlateRecommend2(
    @graphql.Args() args: MitsSlateRecommend2FindUniqueArgs
  ): Promise<MitsSlateRecommend2 | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MitsSlateRecommend2)
  async createMitsSlateRecommend2(
    @graphql.Args() args: CreateMitsSlateRecommend2Args
  ): Promise<MitsSlateRecommend2> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MitsSlateRecommend2)
  async updateMitsSlateRecommend2(
    @graphql.Args() args: UpdateMitsSlateRecommend2Args
  ): Promise<MitsSlateRecommend2 | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MitsSlateRecommend2)
  async deleteMitsSlateRecommend2(
    @graphql.Args() args: DeleteMitsSlateRecommend2Args
  ): Promise<MitsSlateRecommend2 | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
