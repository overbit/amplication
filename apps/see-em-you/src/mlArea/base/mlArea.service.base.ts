/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MlArea as PrismaMlArea,
  Application as PrismaApplication,
  ProgramModel as PrismaProgramModel,
} from "@prisma/client";

export class MlAreaServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.MlAreaCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.MlAreaCountArgs>
  ): Promise<number> {
    return this.prisma.mlArea.count(args);
  }

  async mlAreas<T extends Prisma.MlAreaFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MlAreaFindManyArgs>
  ): Promise<PrismaMlArea[]> {
    return this.prisma.mlArea.findMany(args);
  }
  async mlArea<T extends Prisma.MlAreaFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MlAreaFindUniqueArgs>
  ): Promise<PrismaMlArea | null> {
    return this.prisma.mlArea.findUnique(args);
  }
  async createMlArea<T extends Prisma.MlAreaCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MlAreaCreateArgs>
  ): Promise<PrismaMlArea> {
    return this.prisma.mlArea.create<T>(args);
  }
  async updateMlArea<T extends Prisma.MlAreaUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MlAreaUpdateArgs>
  ): Promise<PrismaMlArea> {
    return this.prisma.mlArea.update<T>(args);
  }
  async deleteMlArea<T extends Prisma.MlAreaDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MlAreaDeleteArgs>
  ): Promise<PrismaMlArea> {
    return this.prisma.mlArea.delete(args);
  }

  async getApplication(parentId: number): Promise<PrismaApplication | null> {
    return this.prisma.mlArea
      .findUnique({
        where: { id: parentId },
      })
      .application();
  }

  async getPrograms(parentId: number): Promise<PrismaProgramModel | null> {
    return this.prisma.mlArea
      .findUnique({
        where: { id: parentId },
      })
      .programs();
  }
}
