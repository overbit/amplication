/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateMlAreaArgs } from "./CreateMlAreaArgs";
import { UpdateMlAreaArgs } from "./UpdateMlAreaArgs";
import { DeleteMlAreaArgs } from "./DeleteMlAreaArgs";
import { MlAreaCountArgs } from "./MlAreaCountArgs";
import { MlAreaFindManyArgs } from "./MlAreaFindManyArgs";
import { MlAreaFindUniqueArgs } from "./MlAreaFindUniqueArgs";
import { MlArea } from "./MlArea";
import { Application } from "../../application/base/Application";
import { ProgramModel } from "../../programModel/base/ProgramModel";
import { MlAreaService } from "../mlArea.service";
@graphql.Resolver(() => MlArea)
export class MlAreaResolverBase {
  constructor(protected readonly service: MlAreaService) {}

  async _mlAreasMeta(
    @graphql.Args() args: MlAreaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MlArea])
  async mlAreas(@graphql.Args() args: MlAreaFindManyArgs): Promise<MlArea[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => MlArea, { nullable: true })
  async mlArea(
    @graphql.Args() args: MlAreaFindUniqueArgs
  ): Promise<MlArea | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MlArea)
  async createMlArea(@graphql.Args() args: CreateMlAreaArgs): Promise<MlArea> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        application: {
          connect: args.data.application,
        },

        programs: {
          connect: args.data.programs,
        },
      },
    });
  }

  @graphql.Mutation(() => MlArea)
  async updateMlArea(
    @graphql.Args() args: UpdateMlAreaArgs
  ): Promise<MlArea | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          application: {
            connect: args.data.application,
          },

          programs: {
            connect: args.data.programs,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MlArea)
  async deleteMlArea(
    @graphql.Args() args: DeleteMlAreaArgs
  ): Promise<MlArea | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Application, {
    nullable: true,
    name: "application",
  })
  async resolveFieldApplication(
    @graphql.Parent() parent: MlArea
  ): Promise<Application | null> {
    const result = await this.service.getApplication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => ProgramModel, {
    nullable: true,
    name: "programs",
  })
  async resolveFieldPrograms(
    @graphql.Parent() parent: MlArea
  ): Promise<ProgramModel | null> {
    const result = await this.service.getPrograms(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
