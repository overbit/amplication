/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Institute as PrismaInstitute } from "@prisma/client";

export class InstituteServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.InstituteCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.InstituteCountArgs>
  ): Promise<number> {
    return this.prisma.institute.count(args);
  }

  async institutes<T extends Prisma.InstituteFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.InstituteFindManyArgs>
  ): Promise<PrismaInstitute[]> {
    return this.prisma.institute.findMany(args);
  }
  async institute<T extends Prisma.InstituteFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.InstituteFindUniqueArgs>
  ): Promise<PrismaInstitute | null> {
    return this.prisma.institute.findUnique(args);
  }
  async createInstitute<T extends Prisma.InstituteCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InstituteCreateArgs>
  ): Promise<PrismaInstitute> {
    return this.prisma.institute.create<T>(args);
  }
  async updateInstitute<T extends Prisma.InstituteUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InstituteUpdateArgs>
  ): Promise<PrismaInstitute> {
    return this.prisma.institute.update<T>(args);
  }
  async deleteInstitute<T extends Prisma.InstituteDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.InstituteDeleteArgs>
  ): Promise<PrismaInstitute> {
    return this.prisma.institute.delete(args);
  }
}
