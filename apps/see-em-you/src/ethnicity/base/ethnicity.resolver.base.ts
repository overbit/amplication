/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Ethnicity } from "./Ethnicity";
import { EthnicityCountArgs } from "./EthnicityCountArgs";
import { EthnicityFindManyArgs } from "./EthnicityFindManyArgs";
import { EthnicityFindUniqueArgs } from "./EthnicityFindUniqueArgs";
import { CreateEthnicityArgs } from "./CreateEthnicityArgs";
import { UpdateEthnicityArgs } from "./UpdateEthnicityArgs";
import { DeleteEthnicityArgs } from "./DeleteEthnicityArgs";
import { EthnicityService } from "../ethnicity.service";
@graphql.Resolver(() => Ethnicity)
export class EthnicityResolverBase {
  constructor(protected readonly service: EthnicityService) {}

  async _ethnicitiesMeta(
    @graphql.Args() args: EthnicityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Ethnicity])
  async ethnicities(
    @graphql.Args() args: EthnicityFindManyArgs
  ): Promise<Ethnicity[]> {
    return this.service.ethnicities(args);
  }

  @graphql.Query(() => Ethnicity, { nullable: true })
  async ethnicity(
    @graphql.Args() args: EthnicityFindUniqueArgs
  ): Promise<Ethnicity | null> {
    const result = await this.service.ethnicity(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Ethnicity)
  async createEthnicity(
    @graphql.Args() args: CreateEthnicityArgs
  ): Promise<Ethnicity> {
    return await this.service.createEthnicity({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Ethnicity)
  async updateEthnicity(
    @graphql.Args() args: UpdateEthnicityArgs
  ): Promise<Ethnicity | null> {
    try {
      return await this.service.updateEthnicity({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Ethnicity)
  async deleteEthnicity(
    @graphql.Args() args: DeleteEthnicityArgs
  ): Promise<Ethnicity | null> {
    try {
      return await this.service.deleteEthnicity(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
