/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateReviewRiskFactorArgs } from "./CreateReviewRiskFactorArgs";
import { UpdateReviewRiskFactorArgs } from "./UpdateReviewRiskFactorArgs";
import { DeleteReviewRiskFactorArgs } from "./DeleteReviewRiskFactorArgs";
import { ReviewRiskFactorCountArgs } from "./ReviewRiskFactorCountArgs";
import { ReviewRiskFactorFindManyArgs } from "./ReviewRiskFactorFindManyArgs";
import { ReviewRiskFactorFindUniqueArgs } from "./ReviewRiskFactorFindUniqueArgs";
import { ReviewRiskFactor } from "./ReviewRiskFactor";
import { ReviewRiskFactorService } from "../reviewRiskFactor.service";
@graphql.Resolver(() => ReviewRiskFactor)
export class ReviewRiskFactorResolverBase {
  constructor(protected readonly service: ReviewRiskFactorService) {}

  async _reviewRiskFactorsMeta(
    @graphql.Args() args: ReviewRiskFactorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ReviewRiskFactor])
  async reviewRiskFactors(
    @graphql.Args() args: ReviewRiskFactorFindManyArgs
  ): Promise<ReviewRiskFactor[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ReviewRiskFactor, { nullable: true })
  async reviewRiskFactor(
    @graphql.Args() args: ReviewRiskFactorFindUniqueArgs
  ): Promise<ReviewRiskFactor | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ReviewRiskFactor)
  async createReviewRiskFactor(
    @graphql.Args() args: CreateReviewRiskFactorArgs
  ): Promise<ReviewRiskFactor> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ReviewRiskFactor)
  async updateReviewRiskFactor(
    @graphql.Args() args: UpdateReviewRiskFactorArgs
  ): Promise<ReviewRiskFactor | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReviewRiskFactor)
  async deleteReviewRiskFactor(
    @graphql.Args() args: DeleteReviewRiskFactorArgs
  ): Promise<ReviewRiskFactor | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
