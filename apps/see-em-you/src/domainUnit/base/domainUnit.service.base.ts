/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DomainUnit as PrismaDomainUnit,
  Domain as PrismaDomain,
  Unit as PrismaUnit,
} from "@prisma/client";

export class DomainUnitServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.DomainUnitCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.DomainUnitCountArgs>
  ): Promise<number> {
    return this.prisma.domainUnit.count(args);
  }

  async domainUnits<T extends Prisma.DomainUnitFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DomainUnitFindManyArgs>
  ): Promise<PrismaDomainUnit[]> {
    return this.prisma.domainUnit.findMany(args);
  }
  async domainUnit<T extends Prisma.DomainUnitFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DomainUnitFindUniqueArgs>
  ): Promise<PrismaDomainUnit | null> {
    return this.prisma.domainUnit.findUnique(args);
  }
  async createDomainUnit<T extends Prisma.DomainUnitCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DomainUnitCreateArgs>
  ): Promise<PrismaDomainUnit> {
    return this.prisma.domainUnit.create<T>(args);
  }
  async updateDomainUnit<T extends Prisma.DomainUnitUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DomainUnitUpdateArgs>
  ): Promise<PrismaDomainUnit> {
    return this.prisma.domainUnit.update<T>(args);
  }
  async deleteDomainUnit<T extends Prisma.DomainUnitDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DomainUnitDeleteArgs>
  ): Promise<PrismaDomainUnit> {
    return this.prisma.domainUnit.delete(args);
  }

  async getDomain(parentId: string): Promise<PrismaDomain | null> {
    return this.prisma.domainUnit
      .findUnique({
        where: { id: parentId },
      })
      .domain();
  }

  async getUnit(parentId: string): Promise<PrismaUnit | null> {
    return this.prisma.domainUnit
      .findUnique({
        where: { id: parentId },
      })
      .unit();
  }
}
