/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DomainUnitService } from "../domainUnit.service";
import { DomainUnitCreateInput } from "./DomainUnitCreateInput";
import { DomainUnit } from "./DomainUnit";
import { DomainUnitFindManyArgs } from "./DomainUnitFindManyArgs";
import { DomainUnitWhereUniqueInput } from "./DomainUnitWhereUniqueInput";
import { DomainUnitUpdateInput } from "./DomainUnitUpdateInput";

export class DomainUnitControllerBase {
  constructor(protected readonly service: DomainUnitService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DomainUnit })
  async createDomainUnit(
    @common.Body() data: DomainUnitCreateInput
  ): Promise<DomainUnit> {
    return await this.service.createDomainUnit({
      data: {
        ...data,

        domain: {
          connect: data.domain,
        },

        unit: {
          connect: data.unit,
        },
      },
      select: {
        domain: {
          select: {
            id: true,
          },
        },

        unit: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DomainUnit] })
  @ApiNestedQuery(DomainUnitFindManyArgs)
  async domainUnits(@common.Req() request: Request): Promise<DomainUnit[]> {
    const args = plainToClass(DomainUnitFindManyArgs, request.query);
    return this.service.domainUnits({
      ...args,
      select: {
        domain: {
          select: {
            id: true,
          },
        },

        unit: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DomainUnit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async domainUnit(
    @common.Param() params: DomainUnitWhereUniqueInput
  ): Promise<DomainUnit | null> {
    const result = await this.service.domainUnit({
      where: params,
      select: {
        domain: {
          select: {
            id: true,
          },
        },

        unit: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DomainUnit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDomainUnit(
    @common.Param() params: DomainUnitWhereUniqueInput,
    @common.Body() data: DomainUnitUpdateInput
  ): Promise<DomainUnit | null> {
    try {
      return await this.service.updateDomainUnit({
        where: params,
        data: {
          ...data,

          domain: {
            connect: data.domain,
          },

          unit: {
            connect: data.unit,
          },
        },
        select: {
          domain: {
            select: {
              id: true,
            },
          },

          unit: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DomainUnit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDomainUnit(
    @common.Param() params: DomainUnitWhereUniqueInput
  ): Promise<DomainUnit | null> {
    try {
      return await this.service.deleteDomainUnit({
        where: params,
        select: {
          domain: {
            select: {
              id: true,
            },
          },

          unit: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
