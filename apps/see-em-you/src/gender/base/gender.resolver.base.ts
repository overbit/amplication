/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateGenderArgs } from "./CreateGenderArgs";
import { UpdateGenderArgs } from "./UpdateGenderArgs";
import { DeleteGenderArgs } from "./DeleteGenderArgs";
import { GenderCountArgs } from "./GenderCountArgs";
import { GenderFindManyArgs } from "./GenderFindManyArgs";
import { GenderFindUniqueArgs } from "./GenderFindUniqueArgs";
import { Gender } from "./Gender";
import { GenderService } from "../gender.service";
@graphql.Resolver(() => Gender)
export class GenderResolverBase {
  constructor(protected readonly service: GenderService) {}

  async _gendersMeta(
    @graphql.Args() args: GenderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Gender])
  async genders(@graphql.Args() args: GenderFindManyArgs): Promise<Gender[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Gender, { nullable: true })
  async gender(
    @graphql.Args() args: GenderFindUniqueArgs
  ): Promise<Gender | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Gender)
  async createGender(@graphql.Args() args: CreateGenderArgs): Promise<Gender> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Gender)
  async updateGender(
    @graphql.Args() args: UpdateGenderArgs
  ): Promise<Gender | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Gender)
  async deleteGender(
    @graphql.Args() args: DeleteGenderArgs
  ): Promise<Gender | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
