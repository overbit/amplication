/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MhciPrereqsCourseDatafileService } from "../mhciPrereqsCourseDatafile.service";
import { MhciPrereqsCourseDatafileCreateInput } from "./MhciPrereqsCourseDatafileCreateInput";
import { MhciPrereqsCourseDatafile } from "./MhciPrereqsCourseDatafile";
import { MhciPrereqsCourseDatafileFindManyArgs } from "./MhciPrereqsCourseDatafileFindManyArgs";
import { MhciPrereqsCourseDatafileWhereUniqueInput } from "./MhciPrereqsCourseDatafileWhereUniqueInput";
import { MhciPrereqsCourseDatafileUpdateInput } from "./MhciPrereqsCourseDatafileUpdateInput";

export class MhciPrereqsCourseDatafileControllerBase {
  constructor(protected readonly service: MhciPrereqsCourseDatafileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MhciPrereqsCourseDatafile })
  async createMhciPrereqsCourseDatafile(
    @common.Body() data: MhciPrereqsCourseDatafileCreateInput
  ): Promise<MhciPrereqsCourseDatafile> {
    return await this.service.createMhciPrereqsCourseDatafile({
      data: {
        ...data,

        mhciPrereqsCourses: {
          connect: data.mhciPrereqsCourses,
        },
      },
      select: {
        datafileinfoId: true,
        note: true,
        submittedToReviewer: true,
        newFileUploaded: true,

        mhciPrereqsCourses: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MhciPrereqsCourseDatafile] })
  @ApiNestedQuery(MhciPrereqsCourseDatafileFindManyArgs)
  async mhciPrereqsCourseDatafiles(
    @common.Req() request: Request
  ): Promise<MhciPrereqsCourseDatafile[]> {
    const args = plainToClass(
      MhciPrereqsCourseDatafileFindManyArgs,
      request.query
    );
    return this.service.mhciPrereqsCourseDatafiles({
      ...args,
      select: {
        datafileinfoId: true,
        note: true,
        submittedToReviewer: true,
        newFileUploaded: true,

        mhciPrereqsCourses: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MhciPrereqsCourseDatafile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mhciPrereqsCourseDatafile(
    @common.Param() params: MhciPrereqsCourseDatafileWhereUniqueInput
  ): Promise<MhciPrereqsCourseDatafile | null> {
    const result = await this.service.mhciPrereqsCourseDatafile({
      where: params,
      select: {
        datafileinfoId: true,
        note: true,
        submittedToReviewer: true,
        newFileUploaded: true,

        mhciPrereqsCourses: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MhciPrereqsCourseDatafile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMhciPrereqsCourseDatafile(
    @common.Param() params: MhciPrereqsCourseDatafileWhereUniqueInput,
    @common.Body() data: MhciPrereqsCourseDatafileUpdateInput
  ): Promise<MhciPrereqsCourseDatafile | null> {
    try {
      return await this.service.updateMhciPrereqsCourseDatafile({
        where: params,
        data: {
          ...data,

          mhciPrereqsCourses: {
            connect: data.mhciPrereqsCourses,
          },
        },
        select: {
          datafileinfoId: true,
          note: true,
          submittedToReviewer: true,
          newFileUploaded: true,

          mhciPrereqsCourses: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MhciPrereqsCourseDatafile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMhciPrereqsCourseDatafile(
    @common.Param() params: MhciPrereqsCourseDatafileWhereUniqueInput
  ): Promise<MhciPrereqsCourseDatafile | null> {
    try {
      return await this.service.deleteMhciPrereqsCourseDatafile({
        where: params,
        select: {
          datafileinfoId: true,
          note: true,
          submittedToReviewer: true,
          newFileUploaded: true,

          mhciPrereqsCourses: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
