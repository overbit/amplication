/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MhciPrereqsCourseDatafile, // @ts-ignore
  MhciPrereqsCourse,
} from "@prisma/client";

export class MhciPrereqsCourseDatafileServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.MhciPrereqsCourseDatafileCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.MhciPrereqsCourseDatafileCountArgs>
  ): Promise<number> {
    return this.prisma.mhciPrereqsCourseDatafile.count(args);
  }

  async mhciPrereqsCourseDatafiles<
    T extends Prisma.MhciPrereqsCourseDatafileFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.MhciPrereqsCourseDatafileFindManyArgs>
  ): Promise<MhciPrereqsCourseDatafile[]> {
    return this.prisma.mhciPrereqsCourseDatafile.findMany(args);
  }
  async mhciPrereqsCourseDatafile<
    T extends Prisma.MhciPrereqsCourseDatafileFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.MhciPrereqsCourseDatafileFindUniqueArgs>
  ): Promise<MhciPrereqsCourseDatafile | null> {
    return this.prisma.mhciPrereqsCourseDatafile.findUnique(args);
  }
  async createMhciPrereqsCourseDatafile<
    T extends Prisma.MhciPrereqsCourseDatafileCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.MhciPrereqsCourseDatafileCreateArgs>
  ): Promise<MhciPrereqsCourseDatafile> {
    return this.prisma.mhciPrereqsCourseDatafile.create<T>(args);
  }
  async updateMhciPrereqsCourseDatafile<
    T extends Prisma.MhciPrereqsCourseDatafileUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.MhciPrereqsCourseDatafileUpdateArgs>
  ): Promise<MhciPrereqsCourseDatafile> {
    return this.prisma.mhciPrereqsCourseDatafile.update<T>(args);
  }
  async deleteMhciPrereqsCourseDatafile<
    T extends Prisma.MhciPrereqsCourseDatafileDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.MhciPrereqsCourseDatafileDeleteArgs>
  ): Promise<MhciPrereqsCourseDatafile> {
    return this.prisma.mhciPrereqsCourseDatafile.delete(args);
  }

  async getMhciPrereqsCourses(
    parentId: number
  ): Promise<MhciPrereqsCourse | null> {
    return this.prisma.mhciPrereqsCourseDatafile
      .findUnique({
        where: { id: parentId },
      })
      .mhciPrereqsCourses();
  }
}
