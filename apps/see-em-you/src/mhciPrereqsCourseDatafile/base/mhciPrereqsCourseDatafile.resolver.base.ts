/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateMhciPrereqsCourseDatafileArgs } from "./CreateMhciPrereqsCourseDatafileArgs";
import { UpdateMhciPrereqsCourseDatafileArgs } from "./UpdateMhciPrereqsCourseDatafileArgs";
import { DeleteMhciPrereqsCourseDatafileArgs } from "./DeleteMhciPrereqsCourseDatafileArgs";
import { MhciPrereqsCourseDatafileCountArgs } from "./MhciPrereqsCourseDatafileCountArgs";
import { MhciPrereqsCourseDatafileFindManyArgs } from "./MhciPrereqsCourseDatafileFindManyArgs";
import { MhciPrereqsCourseDatafileFindUniqueArgs } from "./MhciPrereqsCourseDatafileFindUniqueArgs";
import { MhciPrereqsCourseDatafile } from "./MhciPrereqsCourseDatafile";
import { MhciPrereqsCourse } from "../../mhciPrereqsCourse/base/MhciPrereqsCourse";
import { MhciPrereqsCourseDatafileService } from "../mhciPrereqsCourseDatafile.service";
@graphql.Resolver(() => MhciPrereqsCourseDatafile)
export class MhciPrereqsCourseDatafileResolverBase {
  constructor(protected readonly service: MhciPrereqsCourseDatafileService) {}

  async _mhciPrereqsCourseDatafilesMeta(
    @graphql.Args() args: MhciPrereqsCourseDatafileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MhciPrereqsCourseDatafile])
  async mhciPrereqsCourseDatafiles(
    @graphql.Args() args: MhciPrereqsCourseDatafileFindManyArgs
  ): Promise<MhciPrereqsCourseDatafile[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => MhciPrereqsCourseDatafile, { nullable: true })
  async mhciPrereqsCourseDatafile(
    @graphql.Args() args: MhciPrereqsCourseDatafileFindUniqueArgs
  ): Promise<MhciPrereqsCourseDatafile | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MhciPrereqsCourseDatafile)
  async createMhciPrereqsCourseDatafile(
    @graphql.Args() args: CreateMhciPrereqsCourseDatafileArgs
  ): Promise<MhciPrereqsCourseDatafile> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        mhciPrereqsCourses: {
          connect: args.data.mhciPrereqsCourses,
        },
      },
    });
  }

  @graphql.Mutation(() => MhciPrereqsCourseDatafile)
  async updateMhciPrereqsCourseDatafile(
    @graphql.Args() args: UpdateMhciPrereqsCourseDatafileArgs
  ): Promise<MhciPrereqsCourseDatafile | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          mhciPrereqsCourses: {
            connect: args.data.mhciPrereqsCourses,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MhciPrereqsCourseDatafile)
  async deleteMhciPrereqsCourseDatafile(
    @graphql.Args() args: DeleteMhciPrereqsCourseDatafileArgs
  ): Promise<MhciPrereqsCourseDatafile | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => MhciPrereqsCourse, {
    nullable: true,
    name: "mhciPrereqsCourses",
  })
  async resolveFieldMhciPrereqsCourses(
    @graphql.Parent() parent: MhciPrereqsCourseDatafile
  ): Promise<MhciPrereqsCourse | null> {
    const result = await this.service.getMhciPrereqsCourses(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
