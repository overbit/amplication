/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SlateOrgsAllService } from "../slateOrgsAll.service";
import { SlateOrgsAllCreateInput } from "./SlateOrgsAllCreateInput";
import { SlateOrgsAll } from "./SlateOrgsAll";
import { SlateOrgsAllFindManyArgs } from "./SlateOrgsAllFindManyArgs";
import { SlateOrgsAllWhereUniqueInput } from "./SlateOrgsAllWhereUniqueInput";
import { SlateOrgsAllUpdateInput } from "./SlateOrgsAllUpdateInput";

export class SlateOrgsAllControllerBase {
  constructor(protected readonly service: SlateOrgsAllService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SlateOrgsAll })
  async createSlateOrgsAll(
    @common.Body() data: SlateOrgsAllCreateInput
  ): Promise<SlateOrgsAll> {
    return await this.service.createSlateOrgsAll({
      data: data,
      select: {
        localName: true,
        sharedName: true,
        slateOrgsAllId: true,
        name: true,
        awId: true,
        awName: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SlateOrgsAll] })
  @ApiNestedQuery(SlateOrgsAllFindManyArgs)
  async slateOrgsAlls(@common.Req() request: Request): Promise<SlateOrgsAll[]> {
    const args = plainToClass(SlateOrgsAllFindManyArgs, request.query);
    return this.service.slateOrgsAlls({
      ...args,
      select: {
        localName: true,
        sharedName: true,
        slateOrgsAllId: true,
        name: true,
        awId: true,
        awName: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SlateOrgsAll })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async slateOrgsAll(
    @common.Param() params: SlateOrgsAllWhereUniqueInput
  ): Promise<SlateOrgsAll | null> {
    const result = await this.service.slateOrgsAll({
      where: params,
      select: {
        localName: true,
        sharedName: true,
        slateOrgsAllId: true,
        name: true,
        awId: true,
        awName: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SlateOrgsAll })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSlateOrgsAll(
    @common.Param() params: SlateOrgsAllWhereUniqueInput,
    @common.Body() data: SlateOrgsAllUpdateInput
  ): Promise<SlateOrgsAll | null> {
    try {
      return await this.service.updateSlateOrgsAll({
        where: params,
        data: data,
        select: {
          localName: true,
          sharedName: true,
          slateOrgsAllId: true,
          name: true,
          awId: true,
          awName: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SlateOrgsAll })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSlateOrgsAll(
    @common.Param() params: SlateOrgsAllWhereUniqueInput
  ): Promise<SlateOrgsAll | null> {
    try {
      return await this.service.deleteSlateOrgsAll({
        where: params,
        select: {
          localName: true,
          sharedName: true,
          slateOrgsAllId: true,
          name: true,
          awId: true,
          awName: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
