/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AttendanceStatusService } from "../attendanceStatus.service";
import { AttendanceStatusCreateInput } from "./AttendanceStatusCreateInput";
import { AttendanceStatus } from "./AttendanceStatus";
import { AttendanceStatusFindManyArgs } from "./AttendanceStatusFindManyArgs";
import { AttendanceStatusWhereUniqueInput } from "./AttendanceStatusWhereUniqueInput";
import { AttendanceStatusUpdateInput } from "./AttendanceStatusUpdateInput";

export class AttendanceStatusControllerBase {
  constructor(protected readonly service: AttendanceStatusService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AttendanceStatus })
  async createAttendanceStatus(
    @common.Body() data: AttendanceStatusCreateInput
  ): Promise<AttendanceStatus> {
    return await this.service.createAttendanceStatus({
      data: data,
      select: {
        value: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AttendanceStatus] })
  @ApiNestedQuery(AttendanceStatusFindManyArgs)
  async attendanceStatuses(
    @common.Req() request: Request
  ): Promise<AttendanceStatus[]> {
    const args = plainToClass(AttendanceStatusFindManyArgs, request.query);
    return this.service.attendanceStatuses({
      ...args,
      select: {
        value: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AttendanceStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async attendanceStatus(
    @common.Param() params: AttendanceStatusWhereUniqueInput
  ): Promise<AttendanceStatus | null> {
    const result = await this.service.attendanceStatus({
      where: params,
      select: {
        value: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AttendanceStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAttendanceStatus(
    @common.Param() params: AttendanceStatusWhereUniqueInput,
    @common.Body() data: AttendanceStatusUpdateInput
  ): Promise<AttendanceStatus | null> {
    try {
      return await this.service.updateAttendanceStatus({
        where: params,
        data: data,
        select: {
          value: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AttendanceStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAttendanceStatus(
    @common.Param() params: AttendanceStatusWhereUniqueInput
  ): Promise<AttendanceStatus | null> {
    try {
      return await this.service.deleteAttendanceStatus({
        where: params,
        select: {
          value: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
