/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateCcAuthNotificationArgs } from "./CreateCcAuthNotificationArgs";
import { UpdateCcAuthNotificationArgs } from "./UpdateCcAuthNotificationArgs";
import { DeleteCcAuthNotificationArgs } from "./DeleteCcAuthNotificationArgs";
import { CcAuthNotificationCountArgs } from "./CcAuthNotificationCountArgs";
import { CcAuthNotificationFindManyArgs } from "./CcAuthNotificationFindManyArgs";
import { CcAuthNotificationFindUniqueArgs } from "./CcAuthNotificationFindUniqueArgs";
import { CcAuthNotification } from "./CcAuthNotification";
import { CcAuthNotificationService } from "../ccAuthNotification.service";
@graphql.Resolver(() => CcAuthNotification)
export class CcAuthNotificationResolverBase {
  constructor(protected readonly service: CcAuthNotificationService) {}

  async _ccAuthNotificationsMeta(
    @graphql.Args() args: CcAuthNotificationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CcAuthNotification])
  async ccAuthNotifications(
    @graphql.Args() args: CcAuthNotificationFindManyArgs
  ): Promise<CcAuthNotification[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => CcAuthNotification, { nullable: true })
  async ccAuthNotification(
    @graphql.Args() args: CcAuthNotificationFindUniqueArgs
  ): Promise<CcAuthNotification | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CcAuthNotification)
  async createCcAuthNotification(
    @graphql.Args() args: CreateCcAuthNotificationArgs
  ): Promise<CcAuthNotification> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CcAuthNotification)
  async updateCcAuthNotification(
    @graphql.Args() args: UpdateCcAuthNotificationArgs
  ): Promise<CcAuthNotification | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CcAuthNotification)
  async deleteCcAuthNotification(
    @graphql.Args() args: DeleteCcAuthNotificationArgs
  ): Promise<CcAuthNotification | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
