/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CcAuthNotificationService } from "../ccAuthNotification.service";
import { CcAuthNotificationCreateInput } from "./CcAuthNotificationCreateInput";
import { CcAuthNotification } from "./CcAuthNotification";
import { CcAuthNotificationFindManyArgs } from "./CcAuthNotificationFindManyArgs";
import { CcAuthNotificationWhereUniqueInput } from "./CcAuthNotificationWhereUniqueInput";
import { CcAuthNotificationUpdateInput } from "./CcAuthNotificationUpdateInput";

export class CcAuthNotificationControllerBase {
  constructor(protected readonly service: CcAuthNotificationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CcAuthNotification })
  async createCcAuthNotification(
    @common.Body() data: CcAuthNotificationCreateInput
  ): Promise<CcAuthNotification> {
    return await this.service.createCcAuthNotification({
      data: data,
      select: {
        paymentId: true,
        authNotificationTime: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CcAuthNotification] })
  @ApiNestedQuery(CcAuthNotificationFindManyArgs)
  async ccAuthNotifications(
    @common.Req() request: Request
  ): Promise<CcAuthNotification[]> {
    const args = plainToClass(CcAuthNotificationFindManyArgs, request.query);
    return this.service.ccAuthNotifications({
      ...args,
      select: {
        paymentId: true,
        authNotificationTime: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CcAuthNotification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ccAuthNotification(
    @common.Param() params: CcAuthNotificationWhereUniqueInput
  ): Promise<CcAuthNotification | null> {
    const result = await this.service.ccAuthNotification({
      where: params,
      select: {
        paymentId: true,
        authNotificationTime: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CcAuthNotification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCcAuthNotification(
    @common.Param() params: CcAuthNotificationWhereUniqueInput,
    @common.Body() data: CcAuthNotificationUpdateInput
  ): Promise<CcAuthNotification | null> {
    try {
      return await this.service.updateCcAuthNotification({
        where: params,
        data: data,
        select: {
          paymentId: true,
          authNotificationTime: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CcAuthNotification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCcAuthNotification(
    @common.Param() params: CcAuthNotificationWhereUniqueInput
  ): Promise<CcAuthNotification | null> {
    try {
      return await this.service.deleteCcAuthNotification({
        where: params,
        select: {
          paymentId: true,
          authNotificationTime: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
