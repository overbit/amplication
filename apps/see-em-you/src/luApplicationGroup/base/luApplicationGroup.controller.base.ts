/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LuApplicationGroupService } from "../luApplicationGroup.service";
import { LuApplicationGroupCreateInput } from "./LuApplicationGroupCreateInput";
import { LuApplicationGroup } from "./LuApplicationGroup";
import { LuApplicationGroupFindManyArgs } from "./LuApplicationGroupFindManyArgs";
import { LuApplicationGroupWhereUniqueInput } from "./LuApplicationGroupWhereUniqueInput";
import { LuApplicationGroupUpdateInput } from "./LuApplicationGroupUpdateInput";

export class LuApplicationGroupControllerBase {
  constructor(protected readonly service: LuApplicationGroupService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LuApplicationGroup })
  async createLuApplicationGroup(
    @common.Body() data: LuApplicationGroupCreateInput
  ): Promise<LuApplicationGroup> {
    return await this.service.createLuApplicationGroup({
      data: {
        ...data,

        application: {
          connect: data.application,
        },
      },
      select: {
        groupId: true,
        round: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LuApplicationGroup] })
  @ApiNestedQuery(LuApplicationGroupFindManyArgs)
  async luApplicationGroups(
    @common.Req() request: Request
  ): Promise<LuApplicationGroup[]> {
    const args = plainToClass(LuApplicationGroupFindManyArgs, request.query);
    return this.service.luApplicationGroups({
      ...args,
      select: {
        groupId: true,
        round: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LuApplicationGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async luApplicationGroup(
    @common.Param() params: LuApplicationGroupWhereUniqueInput
  ): Promise<LuApplicationGroup | null> {
    const result = await this.service.luApplicationGroup({
      where: params,
      select: {
        groupId: true,
        round: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LuApplicationGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLuApplicationGroup(
    @common.Param() params: LuApplicationGroupWhereUniqueInput,
    @common.Body() data: LuApplicationGroupUpdateInput
  ): Promise<LuApplicationGroup | null> {
    try {
      return await this.service.updateLuApplicationGroup({
        where: params,
        data: {
          ...data,

          application: {
            connect: data.application,
          },
        },
        select: {
          groupId: true,
          round: true,

          application: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LuApplicationGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLuApplicationGroup(
    @common.Param() params: LuApplicationGroupWhereUniqueInput
  ): Promise<LuApplicationGroup | null> {
    try {
      return await this.service.deleteLuApplicationGroup({
        where: params,
        select: {
          groupId: true,
          round: true,

          application: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
