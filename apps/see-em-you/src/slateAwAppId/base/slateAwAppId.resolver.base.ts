/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateSlateAwAppIdArgs } from "./CreateSlateAwAppIdArgs";
import { UpdateSlateAwAppIdArgs } from "./UpdateSlateAwAppIdArgs";
import { DeleteSlateAwAppIdArgs } from "./DeleteSlateAwAppIdArgs";
import { SlateAwAppIdCountArgs } from "./SlateAwAppIdCountArgs";
import { SlateAwAppIdFindManyArgs } from "./SlateAwAppIdFindManyArgs";
import { SlateAwAppIdFindUniqueArgs } from "./SlateAwAppIdFindUniqueArgs";
import { SlateAwAppId } from "./SlateAwAppId";
import { SlateAwAppIdService } from "../slateAwAppId.service";
@graphql.Resolver(() => SlateAwAppId)
export class SlateAwAppIdResolverBase {
  constructor(protected readonly service: SlateAwAppIdService) {}

  async _slateAwAppIdsMeta(
    @graphql.Args() args: SlateAwAppIdCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SlateAwAppId])
  async slateAwAppIds(
    @graphql.Args() args: SlateAwAppIdFindManyArgs
  ): Promise<SlateAwAppId[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => SlateAwAppId, { nullable: true })
  async slateAwAppId(
    @graphql.Args() args: SlateAwAppIdFindUniqueArgs
  ): Promise<SlateAwAppId | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SlateAwAppId)
  async createSlateAwAppId(
    @graphql.Args() args: CreateSlateAwAppIdArgs
  ): Promise<SlateAwAppId> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SlateAwAppId)
  async updateSlateAwAppId(
    @graphql.Args() args: UpdateSlateAwAppIdArgs
  ): Promise<SlateAwAppId | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SlateAwAppId)
  async deleteSlateAwAppId(
    @graphql.Args() args: DeleteSlateAwAppIdArgs
  ): Promise<SlateAwAppId | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
