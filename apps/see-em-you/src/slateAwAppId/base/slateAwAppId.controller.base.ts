/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SlateAwAppIdService } from "../slateAwAppId.service";
import { SlateAwAppIdCreateInput } from "./SlateAwAppIdCreateInput";
import { SlateAwAppId } from "./SlateAwAppId";
import { SlateAwAppIdFindManyArgs } from "./SlateAwAppIdFindManyArgs";
import { SlateAwAppIdWhereUniqueInput } from "./SlateAwAppIdWhereUniqueInput";
import { SlateAwAppIdUpdateInput } from "./SlateAwAppIdUpdateInput";

export class SlateAwAppIdControllerBase {
  constructor(protected readonly service: SlateAwAppIdService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SlateAwAppId })
  async createSlateAwAppId(
    @common.Body() data: SlateAwAppIdCreateInput
  ): Promise<SlateAwAppId> {
    return await this.service.createSlateAwAppId({
      data: data,
      select: {
        awAppId: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SlateAwAppId] })
  @ApiNestedQuery(SlateAwAppIdFindManyArgs)
  async slateAwAppIds(@common.Req() request: Request): Promise<SlateAwAppId[]> {
    const args = plainToClass(SlateAwAppIdFindManyArgs, request.query);
    return this.service.slateAwAppIds({
      ...args,
      select: {
        awAppId: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SlateAwAppId })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async slateAwAppId(
    @common.Param() params: SlateAwAppIdWhereUniqueInput
  ): Promise<SlateAwAppId | null> {
    const result = await this.service.slateAwAppId({
      where: params,
      select: {
        awAppId: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SlateAwAppId })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSlateAwAppId(
    @common.Param() params: SlateAwAppIdWhereUniqueInput,
    @common.Body() data: SlateAwAppIdUpdateInput
  ): Promise<SlateAwAppId | null> {
    try {
      return await this.service.updateSlateAwAppId({
        where: params,
        data: data,
        select: {
          awAppId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SlateAwAppId })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSlateAwAppId(
    @common.Param() params: SlateAwAppIdWhereUniqueInput
  ): Promise<SlateAwAppId | null> {
    try {
      return await this.service.deleteSlateAwAppId({
        where: params,
        select: {
          awAppId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
