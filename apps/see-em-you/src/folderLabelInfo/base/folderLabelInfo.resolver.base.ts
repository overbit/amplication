/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateFolderLabelInfoArgs } from "./CreateFolderLabelInfoArgs";
import { UpdateFolderLabelInfoArgs } from "./UpdateFolderLabelInfoArgs";
import { DeleteFolderLabelInfoArgs } from "./DeleteFolderLabelInfoArgs";
import { FolderLabelInfoCountArgs } from "./FolderLabelInfoCountArgs";
import { FolderLabelInfoFindManyArgs } from "./FolderLabelInfoFindManyArgs";
import { FolderLabelInfoFindUniqueArgs } from "./FolderLabelInfoFindUniqueArgs";
import { FolderLabelInfo } from "./FolderLabelInfo";
import { FolderLabelInfoService } from "../folderLabelInfo.service";
@graphql.Resolver(() => FolderLabelInfo)
export class FolderLabelInfoResolverBase {
  constructor(protected readonly service: FolderLabelInfoService) {}

  async _folderLabelInfosMeta(
    @graphql.Args() args: FolderLabelInfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FolderLabelInfo])
  async folderLabelInfos(
    @graphql.Args() args: FolderLabelInfoFindManyArgs
  ): Promise<FolderLabelInfo[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => FolderLabelInfo, { nullable: true })
  async folderLabelInfo(
    @graphql.Args() args: FolderLabelInfoFindUniqueArgs
  ): Promise<FolderLabelInfo | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FolderLabelInfo)
  async createFolderLabelInfo(
    @graphql.Args() args: CreateFolderLabelInfoArgs
  ): Promise<FolderLabelInfo> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FolderLabelInfo)
  async updateFolderLabelInfo(
    @graphql.Args() args: UpdateFolderLabelInfoArgs
  ): Promise<FolderLabelInfo | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FolderLabelInfo)
  async deleteFolderLabelInfo(
    @graphql.Args() args: DeleteFolderLabelInfoArgs
  ): Promise<FolderLabelInfo | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
