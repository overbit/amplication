/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FolderLabelInfoService } from "../folderLabelInfo.service";
import { FolderLabelInfoCreateInput } from "./FolderLabelInfoCreateInput";
import { FolderLabelInfo } from "./FolderLabelInfo";
import { FolderLabelInfoFindManyArgs } from "./FolderLabelInfoFindManyArgs";
import { FolderLabelInfoWhereUniqueInput } from "./FolderLabelInfoWhereUniqueInput";
import { FolderLabelInfoUpdateInput } from "./FolderLabelInfoUpdateInput";

export class FolderLabelInfoControllerBase {
  constructor(protected readonly service: FolderLabelInfoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FolderLabelInfo })
  async createFolderLabelInfo(
    @common.Body() data: FolderLabelInfoCreateInput
  ): Promise<FolderLabelInfo> {
    return await this.service.createFolderLabelInfo({
      data: data,
      select: {
        id: true,
        lastLabelColumn: true,
        lastLabelRow: true,
        lastRanTime: true,
        periodId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FolderLabelInfo] })
  @ApiNestedQuery(FolderLabelInfoFindManyArgs)
  async folderLabelInfos(
    @common.Req() request: Request
  ): Promise<FolderLabelInfo[]> {
    const args = plainToClass(FolderLabelInfoFindManyArgs, request.query);
    return this.service.folderLabelInfos({
      ...args,
      select: {
        id: true,
        lastLabelColumn: true,
        lastLabelRow: true,
        lastRanTime: true,
        periodId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FolderLabelInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async folderLabelInfo(
    @common.Param() params: FolderLabelInfoWhereUniqueInput
  ): Promise<FolderLabelInfo | null> {
    const result = await this.service.folderLabelInfo({
      where: params,
      select: {
        id: true,
        lastLabelColumn: true,
        lastLabelRow: true,
        lastRanTime: true,
        periodId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FolderLabelInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFolderLabelInfo(
    @common.Param() params: FolderLabelInfoWhereUniqueInput,
    @common.Body() data: FolderLabelInfoUpdateInput
  ): Promise<FolderLabelInfo | null> {
    try {
      return await this.service.updateFolderLabelInfo({
        where: params,
        data: data,
        select: {
          id: true,
          lastLabelColumn: true,
          lastLabelRow: true,
          lastRanTime: true,
          periodId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FolderLabelInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFolderLabelInfo(
    @common.Param() params: FolderLabelInfoWhereUniqueInput
  ): Promise<FolderLabelInfo | null> {
    try {
      return await this.service.deleteFolderLabelInfo({
        where: params,
        select: {
          id: true,
          lastLabelColumn: true,
          lastLabelRow: true,
          lastRanTime: true,
          periodId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
