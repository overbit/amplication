/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PromotionHistoryService } from "../promotionHistory.service";
import { PromotionHistoryCreateInput } from "./PromotionHistoryCreateInput";
import { PromotionHistory } from "./PromotionHistory";
import { PromotionHistoryFindManyArgs } from "./PromotionHistoryFindManyArgs";
import { PromotionHistoryWhereUniqueInput } from "./PromotionHistoryWhereUniqueInput";
import { PromotionHistoryUpdateInput } from "./PromotionHistoryUpdateInput";

export class PromotionHistoryControllerBase {
  constructor(protected readonly service: PromotionHistoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PromotionHistory })
  async createPromotionHistory(
    @common.Body() data: PromotionHistoryCreateInput
  ): Promise<PromotionHistory> {
    return await this.service.createPromotionHistory({
      data: {
        ...data,

        application: {
          connect: data.application,
        },
      },
      select: {
        programId: true,
        statusTime: true,
        round: true,
        promotion_method: true,
        usersId: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PromotionHistory] })
  @ApiNestedQuery(PromotionHistoryFindManyArgs)
  async promotionHistories(
    @common.Req() request: Request
  ): Promise<PromotionHistory[]> {
    const args = plainToClass(PromotionHistoryFindManyArgs, request.query);
    return this.service.promotionHistories({
      ...args,
      select: {
        programId: true,
        statusTime: true,
        round: true,
        promotion_method: true,
        usersId: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PromotionHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async promotionHistory(
    @common.Param() params: PromotionHistoryWhereUniqueInput
  ): Promise<PromotionHistory | null> {
    const result = await this.service.promotionHistory({
      where: params,
      select: {
        programId: true,
        statusTime: true,
        round: true,
        promotion_method: true,
        usersId: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PromotionHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePromotionHistory(
    @common.Param() params: PromotionHistoryWhereUniqueInput,
    @common.Body() data: PromotionHistoryUpdateInput
  ): Promise<PromotionHistory | null> {
    try {
      return await this.service.updatePromotionHistory({
        where: params,
        data: {
          ...data,

          application: {
            connect: data.application,
          },
        },
        select: {
          programId: true,
          statusTime: true,
          round: true,
          promotion_method: true,
          usersId: true,

          application: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PromotionHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePromotionHistory(
    @common.Param() params: PromotionHistoryWhereUniqueInput
  ): Promise<PromotionHistory | null> {
    try {
      return await this.service.deletePromotionHistory({
        where: params,
        select: {
          programId: true,
          statusTime: true,
          round: true,
          promotion_method: true,
          usersId: true,

          application: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
