/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ParentInfoService } from "../parentInfo.service";
import { ParentInfoCreateInput } from "./ParentInfoCreateInput";
import { ParentInfo } from "./ParentInfo";
import { ParentInfoFindManyArgs } from "./ParentInfoFindManyArgs";
import { ParentInfoWhereUniqueInput } from "./ParentInfoWhereUniqueInput";
import { ParentInfoUpdateInput } from "./ParentInfoUpdateInput";

export class ParentInfoControllerBase {
  constructor(protected readonly service: ParentInfoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ParentInfo })
  async createParentInfo(
    @common.Body() data: ParentInfoCreateInput
  ): Promise<ParentInfo> {
    return await this.service.createParentInfo({
      data: data,
      select: {
        appId: true,
        created: true,
        id: true,
        modified: true,
        p1EdLevel: true,
        p1Profession: true,
        p2EdLevel: true,
        p2Profession: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ParentInfo] })
  @ApiNestedQuery(ParentInfoFindManyArgs)
  async parentInfos(@common.Req() request: Request): Promise<ParentInfo[]> {
    const args = plainToClass(ParentInfoFindManyArgs, request.query);
    return this.service.parentInfos({
      ...args,
      select: {
        appId: true,
        created: true,
        id: true,
        modified: true,
        p1EdLevel: true,
        p1Profession: true,
        p2EdLevel: true,
        p2Profession: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ParentInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async parentInfo(
    @common.Param() params: ParentInfoWhereUniqueInput
  ): Promise<ParentInfo | null> {
    const result = await this.service.parentInfo({
      where: params,
      select: {
        appId: true,
        created: true,
        id: true,
        modified: true,
        p1EdLevel: true,
        p1Profession: true,
        p2EdLevel: true,
        p2Profession: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ParentInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateParentInfo(
    @common.Param() params: ParentInfoWhereUniqueInput,
    @common.Body() data: ParentInfoUpdateInput
  ): Promise<ParentInfo | null> {
    try {
      return await this.service.updateParentInfo({
        where: params,
        data: data,
        select: {
          appId: true,
          created: true,
          id: true,
          modified: true,
          p1EdLevel: true,
          p1Profession: true,
          p2EdLevel: true,
          p2Profession: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ParentInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteParentInfo(
    @common.Param() params: ParentInfoWhereUniqueInput
  ): Promise<ParentInfo | null> {
    try {
      return await this.service.deleteParentInfo({
        where: params,
        select: {
          appId: true,
          created: true,
          id: true,
          modified: true,
          p1EdLevel: true,
          p1Profession: true,
          p2EdLevel: true,
          p2Profession: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
