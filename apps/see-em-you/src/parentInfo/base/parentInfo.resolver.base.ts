/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateParentInfoArgs } from "./CreateParentInfoArgs";
import { UpdateParentInfoArgs } from "./UpdateParentInfoArgs";
import { DeleteParentInfoArgs } from "./DeleteParentInfoArgs";
import { ParentInfoCountArgs } from "./ParentInfoCountArgs";
import { ParentInfoFindManyArgs } from "./ParentInfoFindManyArgs";
import { ParentInfoFindUniqueArgs } from "./ParentInfoFindUniqueArgs";
import { ParentInfo } from "./ParentInfo";
import { ParentInfoService } from "../parentInfo.service";
@graphql.Resolver(() => ParentInfo)
export class ParentInfoResolverBase {
  constructor(protected readonly service: ParentInfoService) {}

  async _parentInfosMeta(
    @graphql.Args() args: ParentInfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ParentInfo])
  async parentInfos(
    @graphql.Args() args: ParentInfoFindManyArgs
  ): Promise<ParentInfo[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ParentInfo, { nullable: true })
  async parentInfo(
    @graphql.Args() args: ParentInfoFindUniqueArgs
  ): Promise<ParentInfo | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ParentInfo)
  async createParentInfo(
    @graphql.Args() args: CreateParentInfoArgs
  ): Promise<ParentInfo> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ParentInfo)
  async updateParentInfo(
    @graphql.Args() args: UpdateParentInfoArgs
  ): Promise<ParentInfo | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ParentInfo)
  async deleteParentInfo(
    @graphql.Args() args: DeleteParentInfoArgs
  ): Promise<ParentInfo | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
