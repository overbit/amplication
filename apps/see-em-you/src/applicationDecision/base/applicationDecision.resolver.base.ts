/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateApplicationDecisionArgs } from "./CreateApplicationDecisionArgs";
import { UpdateApplicationDecisionArgs } from "./UpdateApplicationDecisionArgs";
import { DeleteApplicationDecisionArgs } from "./DeleteApplicationDecisionArgs";
import { ApplicationDecisionCountArgs } from "./ApplicationDecisionCountArgs";
import { ApplicationDecisionFindManyArgs } from "./ApplicationDecisionFindManyArgs";
import { ApplicationDecisionFindUniqueArgs } from "./ApplicationDecisionFindUniqueArgs";
import { ApplicationDecision } from "./ApplicationDecision";
import { ApplicationDecisionService } from "../applicationDecision.service";
@graphql.Resolver(() => ApplicationDecision)
export class ApplicationDecisionResolverBase {
  constructor(protected readonly service: ApplicationDecisionService) {}

  async _applicationDecisionsMeta(
    @graphql.Args() args: ApplicationDecisionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ApplicationDecision])
  async applicationDecisions(
    @graphql.Args() args: ApplicationDecisionFindManyArgs
  ): Promise<ApplicationDecision[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ApplicationDecision, { nullable: true })
  async applicationDecision(
    @graphql.Args() args: ApplicationDecisionFindUniqueArgs
  ): Promise<ApplicationDecision | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ApplicationDecision)
  async createApplicationDecision(
    @graphql.Args() args: CreateApplicationDecisionArgs
  ): Promise<ApplicationDecision> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ApplicationDecision)
  async updateApplicationDecision(
    @graphql.Args() args: UpdateApplicationDecisionArgs
  ): Promise<ApplicationDecision | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ApplicationDecision)
  async deleteApplicationDecision(
    @graphql.Args() args: DeleteApplicationDecisionArgs
  ): Promise<ApplicationDecision | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
