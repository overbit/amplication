/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ApplicationDecision as PrismaApplicationDecision,
} from "@prisma/client";

export class ApplicationDecisionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ApplicationDecisionCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApplicationDecisionCountArgs>
  ): Promise<number> {
    return this.prisma.applicationDecision.count(args);
  }

  async applicationDecisions<T extends Prisma.ApplicationDecisionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApplicationDecisionFindManyArgs>
  ): Promise<PrismaApplicationDecision[]> {
    return this.prisma.applicationDecision.findMany(args);
  }
  async applicationDecision<T extends Prisma.ApplicationDecisionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApplicationDecisionFindUniqueArgs>
  ): Promise<PrismaApplicationDecision | null> {
    return this.prisma.applicationDecision.findUnique(args);
  }
  async createApplicationDecision<
    T extends Prisma.ApplicationDecisionCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ApplicationDecisionCreateArgs>
  ): Promise<PrismaApplicationDecision> {
    return this.prisma.applicationDecision.create<T>(args);
  }
  async updateApplicationDecision<
    T extends Prisma.ApplicationDecisionUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ApplicationDecisionUpdateArgs>
  ): Promise<PrismaApplicationDecision> {
    return this.prisma.applicationDecision.update<T>(args);
  }
  async deleteApplicationDecision<
    T extends Prisma.ApplicationDecisionDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ApplicationDecisionDeleteArgs>
  ): Promise<PrismaApplicationDecision> {
    return this.prisma.applicationDecision.delete(args);
  }
}
