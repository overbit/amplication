/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MitsSlateToeflService } from "../mitsSlateToefl.service";
import { MitsSlateToeflCreateInput } from "./MitsSlateToeflCreateInput";
import { MitsSlateToefl } from "./MitsSlateToefl";
import { MitsSlateToeflFindManyArgs } from "./MitsSlateToeflFindManyArgs";
import { MitsSlateToeflWhereUniqueInput } from "./MitsSlateToeflWhereUniqueInput";
import { MitsSlateToeflUpdateInput } from "./MitsSlateToeflUpdateInput";

export class MitsSlateToeflControllerBase {
  constructor(protected readonly service: MitsSlateToeflService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MitsSlateToefl })
  async createMitsSlateToefl(
    @common.Body() data: MitsSlateToeflCreateInput
  ): Promise<MitsSlateToefl> {
    return await this.service.createMitsSlateToefl({
      data: data,
      select: {
        first: true,
        id: true,
        last: true,
        middle: true,
        prefix: true,
        toeflListening: true,
        toeflReading: true,
        toeflSpeaking: true,
        toeflStructureWrittenExpression: true,
        toeflTotal: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MitsSlateToefl] })
  @ApiNestedQuery(MitsSlateToeflFindManyArgs)
  async mitsSlateToefls(
    @common.Req() request: Request
  ): Promise<MitsSlateToefl[]> {
    const args = plainToClass(MitsSlateToeflFindManyArgs, request.query);
    return this.service.mitsSlateToefls({
      ...args,
      select: {
        first: true,
        id: true,
        last: true,
        middle: true,
        prefix: true,
        toeflListening: true,
        toeflReading: true,
        toeflSpeaking: true,
        toeflStructureWrittenExpression: true,
        toeflTotal: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MitsSlateToefl })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mitsSlateToefl(
    @common.Param() params: MitsSlateToeflWhereUniqueInput
  ): Promise<MitsSlateToefl | null> {
    const result = await this.service.mitsSlateToefl({
      where: params,
      select: {
        first: true,
        id: true,
        last: true,
        middle: true,
        prefix: true,
        toeflListening: true,
        toeflReading: true,
        toeflSpeaking: true,
        toeflStructureWrittenExpression: true,
        toeflTotal: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MitsSlateToefl })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMitsSlateToefl(
    @common.Param() params: MitsSlateToeflWhereUniqueInput,
    @common.Body() data: MitsSlateToeflUpdateInput
  ): Promise<MitsSlateToefl | null> {
    try {
      return await this.service.updateMitsSlateToefl({
        where: params,
        data: data,
        select: {
          first: true,
          id: true,
          last: true,
          middle: true,
          prefix: true,
          toeflListening: true,
          toeflReading: true,
          toeflSpeaking: true,
          toeflStructureWrittenExpression: true,
          toeflTotal: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MitsSlateToefl })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMitsSlateToefl(
    @common.Param() params: MitsSlateToeflWhereUniqueInput
  ): Promise<MitsSlateToefl | null> {
    try {
      return await this.service.deleteMitsSlateToefl({
        where: params,
        select: {
          first: true,
          id: true,
          last: true,
          middle: true,
          prefix: true,
          toeflListening: true,
          toeflReading: true,
          toeflSpeaking: true,
          toeflStructureWrittenExpression: true,
          toeflTotal: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
