/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VoucherApplicationErrorService } from "../voucherApplicationError.service";
import { VoucherApplicationErrorCreateInput } from "./VoucherApplicationErrorCreateInput";
import { VoucherApplicationError } from "./VoucherApplicationError";
import { VoucherApplicationErrorFindManyArgs } from "./VoucherApplicationErrorFindManyArgs";
import { VoucherApplicationErrorWhereUniqueInput } from "./VoucherApplicationErrorWhereUniqueInput";
import { VoucherApplicationErrorUpdateInput } from "./VoucherApplicationErrorUpdateInput";

export class VoucherApplicationErrorControllerBase {
  constructor(protected readonly service: VoucherApplicationErrorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VoucherApplicationError })
  async createVoucherApplicationError(
    @common.Body() data: VoucherApplicationErrorCreateInput
  ): Promise<VoucherApplicationError> {
    return await this.service.createVoucherApplicationError({
      data: data,
      select: {
        appId: true,
        code: true,
        vaId: true,
        errMsg: true,
        allowMultiple: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [VoucherApplicationError] })
  @ApiNestedQuery(VoucherApplicationErrorFindManyArgs)
  async voucherApplicationErrors(
    @common.Req() request: Request
  ): Promise<VoucherApplicationError[]> {
    const args = plainToClass(
      VoucherApplicationErrorFindManyArgs,
      request.query
    );
    return this.service.voucherApplicationErrors({
      ...args,
      select: {
        appId: true,
        code: true,
        vaId: true,
        errMsg: true,
        allowMultiple: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VoucherApplicationError })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async voucherApplicationError(
    @common.Param() params: VoucherApplicationErrorWhereUniqueInput
  ): Promise<VoucherApplicationError | null> {
    const result = await this.service.voucherApplicationError({
      where: params,
      select: {
        appId: true,
        code: true,
        vaId: true,
        errMsg: true,
        allowMultiple: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VoucherApplicationError })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVoucherApplicationError(
    @common.Param() params: VoucherApplicationErrorWhereUniqueInput,
    @common.Body() data: VoucherApplicationErrorUpdateInput
  ): Promise<VoucherApplicationError | null> {
    try {
      return await this.service.updateVoucherApplicationError({
        where: params,
        data: data,
        select: {
          appId: true,
          code: true,
          vaId: true,
          errMsg: true,
          allowMultiple: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VoucherApplicationError })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVoucherApplicationError(
    @common.Param() params: VoucherApplicationErrorWhereUniqueInput
  ): Promise<VoucherApplicationError | null> {
    try {
      return await this.service.deleteVoucherApplicationError({
        where: params,
        select: {
          appId: true,
          code: true,
          vaId: true,
          errMsg: true,
          allowMultiple: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
