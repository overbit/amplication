/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { VoucherApplicationError } from "./VoucherApplicationError";
import { VoucherApplicationErrorCountArgs } from "./VoucherApplicationErrorCountArgs";
import { VoucherApplicationErrorFindManyArgs } from "./VoucherApplicationErrorFindManyArgs";
import { VoucherApplicationErrorFindUniqueArgs } from "./VoucherApplicationErrorFindUniqueArgs";
import { CreateVoucherApplicationErrorArgs } from "./CreateVoucherApplicationErrorArgs";
import { UpdateVoucherApplicationErrorArgs } from "./UpdateVoucherApplicationErrorArgs";
import { DeleteVoucherApplicationErrorArgs } from "./DeleteVoucherApplicationErrorArgs";
import { VoucherApplicationErrorService } from "../voucherApplicationError.service";
@graphql.Resolver(() => VoucherApplicationError)
export class VoucherApplicationErrorResolverBase {
  constructor(protected readonly service: VoucherApplicationErrorService) {}

  async _voucherApplicationErrorsMeta(
    @graphql.Args() args: VoucherApplicationErrorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [VoucherApplicationError])
  async voucherApplicationErrors(
    @graphql.Args() args: VoucherApplicationErrorFindManyArgs
  ): Promise<VoucherApplicationError[]> {
    return this.service.voucherApplicationErrors(args);
  }

  @graphql.Query(() => VoucherApplicationError, { nullable: true })
  async voucherApplicationError(
    @graphql.Args() args: VoucherApplicationErrorFindUniqueArgs
  ): Promise<VoucherApplicationError | null> {
    const result = await this.service.voucherApplicationError(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => VoucherApplicationError)
  async createVoucherApplicationError(
    @graphql.Args() args: CreateVoucherApplicationErrorArgs
  ): Promise<VoucherApplicationError> {
    return await this.service.createVoucherApplicationError({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => VoucherApplicationError)
  async updateVoucherApplicationError(
    @graphql.Args() args: UpdateVoucherApplicationErrorArgs
  ): Promise<VoucherApplicationError | null> {
    try {
      return await this.service.updateVoucherApplicationError({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VoucherApplicationError)
  async deleteVoucherApplicationError(
    @graphql.Args() args: DeleteVoucherApplicationErrorArgs
  ): Promise<VoucherApplicationError | null> {
    try {
      return await this.service.deleteVoucherApplicationError(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
