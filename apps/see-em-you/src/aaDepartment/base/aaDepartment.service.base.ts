/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AaDepartment as PrismaAaDepartment,
  Period as PrismaPeriod,
  Department as PrismaDepartment,
} from "@prisma/client";

export class AaDepartmentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.AaDepartmentCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.AaDepartmentCountArgs>
  ): Promise<number> {
    return this.prisma.aaDepartment.count(args);
  }

  async aaDepartments<T extends Prisma.AaDepartmentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AaDepartmentFindManyArgs>
  ): Promise<PrismaAaDepartment[]> {
    return this.prisma.aaDepartment.findMany(args);
  }
  async aaDepartment<T extends Prisma.AaDepartmentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AaDepartmentFindUniqueArgs>
  ): Promise<PrismaAaDepartment | null> {
    return this.prisma.aaDepartment.findUnique(args);
  }
  async createAaDepartment<T extends Prisma.AaDepartmentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AaDepartmentCreateArgs>
  ): Promise<PrismaAaDepartment> {
    return this.prisma.aaDepartment.create<T>(args);
  }
  async updateAaDepartment<T extends Prisma.AaDepartmentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AaDepartmentUpdateArgs>
  ): Promise<PrismaAaDepartment> {
    return this.prisma.aaDepartment.update<T>(args);
  }
  async deleteAaDepartment<T extends Prisma.AaDepartmentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AaDepartmentDeleteArgs>
  ): Promise<PrismaAaDepartment> {
    return this.prisma.aaDepartment.delete(args);
  }

  async getPeriod(parentId: number): Promise<PrismaPeriod | null> {
    return this.prisma.aaDepartment
      .findUnique({
        where: { id: parentId },
      })
      .period();
  }

  async getDepartment(parentId: number): Promise<PrismaDepartment | null> {
    return this.prisma.aaDepartment
      .findUnique({
        where: { id: parentId },
      })
      .department();
  }
}
