/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AaDepartment } from "./AaDepartment";
import { AaDepartmentCountArgs } from "./AaDepartmentCountArgs";
import { AaDepartmentFindManyArgs } from "./AaDepartmentFindManyArgs";
import { AaDepartmentFindUniqueArgs } from "./AaDepartmentFindUniqueArgs";
import { CreateAaDepartmentArgs } from "./CreateAaDepartmentArgs";
import { UpdateAaDepartmentArgs } from "./UpdateAaDepartmentArgs";
import { DeleteAaDepartmentArgs } from "./DeleteAaDepartmentArgs";
import { Department } from "../../department/base/Department";
import { Period } from "../../period/base/Period";
import { AaDepartmentService } from "../aaDepartment.service";
@graphql.Resolver(() => AaDepartment)
export class AaDepartmentResolverBase {
  constructor(protected readonly service: AaDepartmentService) {}

  async _aaDepartmentsMeta(
    @graphql.Args() args: AaDepartmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AaDepartment])
  async aaDepartments(
    @graphql.Args() args: AaDepartmentFindManyArgs
  ): Promise<AaDepartment[]> {
    return this.service.aaDepartments(args);
  }

  @graphql.Query(() => AaDepartment, { nullable: true })
  async aaDepartment(
    @graphql.Args() args: AaDepartmentFindUniqueArgs
  ): Promise<AaDepartment | null> {
    const result = await this.service.aaDepartment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AaDepartment)
  async createAaDepartment(
    @graphql.Args() args: CreateAaDepartmentArgs
  ): Promise<AaDepartment> {
    return await this.service.createAaDepartment({
      ...args,
      data: {
        ...args.data,

        department: {
          connect: args.data.department,
        },

        period: args.data.period
          ? {
              connect: args.data.period,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => AaDepartment)
  async updateAaDepartment(
    @graphql.Args() args: UpdateAaDepartmentArgs
  ): Promise<AaDepartment | null> {
    try {
      return await this.service.updateAaDepartment({
        ...args,
        data: {
          ...args.data,

          department: {
            connect: args.data.department,
          },

          period: args.data.period
            ? {
                connect: args.data.period,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AaDepartment)
  async deleteAaDepartment(
    @graphql.Args() args: DeleteAaDepartmentArgs
  ): Promise<AaDepartment | null> {
    try {
      return await this.service.deleteAaDepartment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Department, {
    nullable: true,
    name: "department",
  })
  async getDepartment(
    @graphql.Parent() parent: AaDepartment
  ): Promise<Department | null> {
    const result = await this.service.getDepartment(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Period, {
    nullable: true,
    name: "period",
  })
  async getPeriod(
    @graphql.Parent() parent: AaDepartment
  ): Promise<Period | null> {
    const result = await this.service.getPeriod(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
