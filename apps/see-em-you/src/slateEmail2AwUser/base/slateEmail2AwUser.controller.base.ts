/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SlateEmail2AwUserService } from "../slateEmail2AwUser.service";
import { SlateEmail2AwUserCreateInput } from "./SlateEmail2AwUserCreateInput";
import { SlateEmail2AwUser } from "./SlateEmail2AwUser";
import { SlateEmail2AwUserFindManyArgs } from "./SlateEmail2AwUserFindManyArgs";
import { SlateEmail2AwUserWhereUniqueInput } from "./SlateEmail2AwUserWhereUniqueInput";
import { SlateEmail2AwUserUpdateInput } from "./SlateEmail2AwUserUpdateInput";

export class SlateEmail2AwUserControllerBase {
  constructor(protected readonly service: SlateEmail2AwUserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SlateEmail2AwUser })
  async createSlateEmail2AwUser(
    @common.Body() data: SlateEmail2AwUserCreateInput
  ): Promise<SlateEmail2AwUser> {
    return await this.service.createSlateEmail2AwUser({
      data: data,
      select: {
        slateEmail: true,
        awLuuUserId: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SlateEmail2AwUser] })
  @ApiNestedQuery(SlateEmail2AwUserFindManyArgs)
  async slateEmail2AwUsers(
    @common.Req() request: Request
  ): Promise<SlateEmail2AwUser[]> {
    const args = plainToClass(SlateEmail2AwUserFindManyArgs, request.query);
    return this.service.slateEmail2AwUsers({
      ...args,
      select: {
        slateEmail: true,
        awLuuUserId: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SlateEmail2AwUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async slateEmail2AwUser(
    @common.Param() params: SlateEmail2AwUserWhereUniqueInput
  ): Promise<SlateEmail2AwUser | null> {
    const result = await this.service.slateEmail2AwUser({
      where: params,
      select: {
        slateEmail: true,
        awLuuUserId: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SlateEmail2AwUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSlateEmail2AwUser(
    @common.Param() params: SlateEmail2AwUserWhereUniqueInput,
    @common.Body() data: SlateEmail2AwUserUpdateInput
  ): Promise<SlateEmail2AwUser | null> {
    try {
      return await this.service.updateSlateEmail2AwUser({
        where: params,
        data: data,
        select: {
          slateEmail: true,
          awLuuUserId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SlateEmail2AwUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSlateEmail2AwUser(
    @common.Param() params: SlateEmail2AwUserWhereUniqueInput
  ): Promise<SlateEmail2AwUser | null> {
    try {
      return await this.service.deleteSlateEmail2AwUser({
        where: params,
        select: {
          slateEmail: true,
          awLuuUserId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
