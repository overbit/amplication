/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateSlateEmail2AwUserArgs } from "./CreateSlateEmail2AwUserArgs";
import { UpdateSlateEmail2AwUserArgs } from "./UpdateSlateEmail2AwUserArgs";
import { DeleteSlateEmail2AwUserArgs } from "./DeleteSlateEmail2AwUserArgs";
import { SlateEmail2AwUserCountArgs } from "./SlateEmail2AwUserCountArgs";
import { SlateEmail2AwUserFindManyArgs } from "./SlateEmail2AwUserFindManyArgs";
import { SlateEmail2AwUserFindUniqueArgs } from "./SlateEmail2AwUserFindUniqueArgs";
import { SlateEmail2AwUser } from "./SlateEmail2AwUser";
import { SlateEmail2AwUserService } from "../slateEmail2AwUser.service";
@graphql.Resolver(() => SlateEmail2AwUser)
export class SlateEmail2AwUserResolverBase {
  constructor(protected readonly service: SlateEmail2AwUserService) {}

  async _slateEmail2AwUsersMeta(
    @graphql.Args() args: SlateEmail2AwUserCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SlateEmail2AwUser])
  async slateEmail2AwUsers(
    @graphql.Args() args: SlateEmail2AwUserFindManyArgs
  ): Promise<SlateEmail2AwUser[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => SlateEmail2AwUser, { nullable: true })
  async slateEmail2AwUser(
    @graphql.Args() args: SlateEmail2AwUserFindUniqueArgs
  ): Promise<SlateEmail2AwUser | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SlateEmail2AwUser)
  async createSlateEmail2AwUser(
    @graphql.Args() args: CreateSlateEmail2AwUserArgs
  ): Promise<SlateEmail2AwUser> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SlateEmail2AwUser)
  async updateSlateEmail2AwUser(
    @graphql.Args() args: UpdateSlateEmail2AwUserArgs
  ): Promise<SlateEmail2AwUser | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SlateEmail2AwUser)
  async deleteSlateEmail2AwUser(
    @graphql.Args() args: DeleteSlateEmail2AwUserArgs
  ): Promise<SlateEmail2AwUser | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
