/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReviewIniAlternativeProgramService } from "../reviewIniAlternativeProgram.service";
import { ReviewIniAlternativeProgramCreateInput } from "./ReviewIniAlternativeProgramCreateInput";
import { ReviewIniAlternativeProgram } from "./ReviewIniAlternativeProgram";
import { ReviewIniAlternativeProgramFindManyArgs } from "./ReviewIniAlternativeProgramFindManyArgs";
import { ReviewIniAlternativeProgramWhereUniqueInput } from "./ReviewIniAlternativeProgramWhereUniqueInput";
import { ReviewIniAlternativeProgramUpdateInput } from "./ReviewIniAlternativeProgramUpdateInput";

export class ReviewIniAlternativeProgramControllerBase {
  constructor(protected readonly service: ReviewIniAlternativeProgramService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ReviewIniAlternativeProgram })
  async createReviewIniAlternativeProgram(
    @common.Body() data: ReviewIniAlternativeProgramCreateInput
  ): Promise<ReviewIniAlternativeProgram> {
    return await this.service.createReviewIniAlternativeProgram({
      data: data,
      select: {
        id: true,
        value: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ReviewIniAlternativeProgram] })
  @ApiNestedQuery(ReviewIniAlternativeProgramFindManyArgs)
  async reviewIniAlternativePrograms(
    @common.Req() request: Request
  ): Promise<ReviewIniAlternativeProgram[]> {
    const args = plainToClass(
      ReviewIniAlternativeProgramFindManyArgs,
      request.query
    );
    return this.service.reviewIniAlternativePrograms({
      ...args,
      select: {
        id: true,
        value: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ReviewIniAlternativeProgram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async reviewIniAlternativeProgram(
    @common.Param() params: ReviewIniAlternativeProgramWhereUniqueInput
  ): Promise<ReviewIniAlternativeProgram | null> {
    const result = await this.service.reviewIniAlternativeProgram({
      where: params,
      select: {
        id: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ReviewIniAlternativeProgram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReviewIniAlternativeProgram(
    @common.Param() params: ReviewIniAlternativeProgramWhereUniqueInput,
    @common.Body() data: ReviewIniAlternativeProgramUpdateInput
  ): Promise<ReviewIniAlternativeProgram | null> {
    try {
      return await this.service.updateReviewIniAlternativeProgram({
        where: params,
        data: data,
        select: {
          id: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ReviewIniAlternativeProgram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReviewIniAlternativeProgram(
    @common.Param() params: ReviewIniAlternativeProgramWhereUniqueInput
  ): Promise<ReviewIniAlternativeProgram | null> {
    try {
      return await this.service.deleteReviewIniAlternativeProgram({
        where: params,
        select: {
          id: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
