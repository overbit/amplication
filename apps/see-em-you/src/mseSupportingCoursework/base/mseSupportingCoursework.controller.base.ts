/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MseSupportingCourseworkService } from "../mseSupportingCoursework.service";
import { MseSupportingCourseworkCreateInput } from "./MseSupportingCourseworkCreateInput";
import { MseSupportingCoursework } from "./MseSupportingCoursework";
import { MseSupportingCourseworkFindManyArgs } from "./MseSupportingCourseworkFindManyArgs";
import { MseSupportingCourseworkWhereUniqueInput } from "./MseSupportingCourseworkWhereUniqueInput";
import { MseSupportingCourseworkUpdateInput } from "./MseSupportingCourseworkUpdateInput";

export class MseSupportingCourseworkControllerBase {
  constructor(protected readonly service: MseSupportingCourseworkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MseSupportingCoursework })
  async createMseSupportingCoursework(
    @common.Body() data: MseSupportingCourseworkCreateInput
  ): Promise<MseSupportingCoursework> {
    return await this.service.createMseSupportingCoursework({
      data: data,
      select: {
        algCourseGrade: true,
        algCourseName: true,
        algCourseNum: true,
        appId: true,
        dmCourseGrade: true,
        dmCourseName: true,
        dmCourseNum: true,
        dsCourseGrade: true,
        dsCourseName: true,
        dsCourseNum: true,
        id: true,
        prog1CourseGrade: true,
        prog1CourseName: true,
        prog1CourseNum: true,
        prog2CourseGrade: true,
        prog2CourseName: true,
        prog2CourseNum: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MseSupportingCoursework] })
  @ApiNestedQuery(MseSupportingCourseworkFindManyArgs)
  async mseSupportingCourseworks(
    @common.Req() request: Request
  ): Promise<MseSupportingCoursework[]> {
    const args = plainToClass(
      MseSupportingCourseworkFindManyArgs,
      request.query
    );
    return this.service.mseSupportingCourseworks({
      ...args,
      select: {
        algCourseGrade: true,
        algCourseName: true,
        algCourseNum: true,
        appId: true,
        dmCourseGrade: true,
        dmCourseName: true,
        dmCourseNum: true,
        dsCourseGrade: true,
        dsCourseName: true,
        dsCourseNum: true,
        id: true,
        prog1CourseGrade: true,
        prog1CourseName: true,
        prog1CourseNum: true,
        prog2CourseGrade: true,
        prog2CourseName: true,
        prog2CourseNum: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MseSupportingCoursework })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mseSupportingCoursework(
    @common.Param() params: MseSupportingCourseworkWhereUniqueInput
  ): Promise<MseSupportingCoursework | null> {
    const result = await this.service.mseSupportingCoursework({
      where: params,
      select: {
        algCourseGrade: true,
        algCourseName: true,
        algCourseNum: true,
        appId: true,
        dmCourseGrade: true,
        dmCourseName: true,
        dmCourseNum: true,
        dsCourseGrade: true,
        dsCourseName: true,
        dsCourseNum: true,
        id: true,
        prog1CourseGrade: true,
        prog1CourseName: true,
        prog1CourseNum: true,
        prog2CourseGrade: true,
        prog2CourseName: true,
        prog2CourseNum: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MseSupportingCoursework })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMseSupportingCoursework(
    @common.Param() params: MseSupportingCourseworkWhereUniqueInput,
    @common.Body() data: MseSupportingCourseworkUpdateInput
  ): Promise<MseSupportingCoursework | null> {
    try {
      return await this.service.updateMseSupportingCoursework({
        where: params,
        data: data,
        select: {
          algCourseGrade: true,
          algCourseName: true,
          algCourseNum: true,
          appId: true,
          dmCourseGrade: true,
          dmCourseName: true,
          dmCourseNum: true,
          dsCourseGrade: true,
          dsCourseName: true,
          dsCourseNum: true,
          id: true,
          prog1CourseGrade: true,
          prog1CourseName: true,
          prog1CourseNum: true,
          prog2CourseGrade: true,
          prog2CourseName: true,
          prog2CourseNum: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MseSupportingCoursework })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMseSupportingCoursework(
    @common.Param() params: MseSupportingCourseworkWhereUniqueInput
  ): Promise<MseSupportingCoursework | null> {
    try {
      return await this.service.deleteMseSupportingCoursework({
        where: params,
        select: {
          algCourseGrade: true,
          algCourseName: true,
          algCourseNum: true,
          appId: true,
          dmCourseGrade: true,
          dmCourseName: true,
          dmCourseNum: true,
          dsCourseGrade: true,
          dsCourseName: true,
          dsCourseNum: true,
          id: true,
          prog1CourseGrade: true,
          prog1CourseName: true,
          prog1CourseNum: true,
          prog2CourseGrade: true,
          prog2CourseName: true,
          prog2CourseNum: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
