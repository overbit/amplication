/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MseSupportingCourseworkService } from "../mseSupportingCoursework.service";
import { MseSupportingCourseworkCreateInput } from "./MseSupportingCourseworkCreateInput";
import { MseSupportingCourseworkWhereInput } from "./MseSupportingCourseworkWhereInput";
import { MseSupportingCourseworkWhereUniqueInput } from "./MseSupportingCourseworkWhereUniqueInput";
import { MseSupportingCourseworkFindManyArgs } from "./MseSupportingCourseworkFindManyArgs";
import { MseSupportingCourseworkUpdateInput } from "./MseSupportingCourseworkUpdateInput";
import { MseSupportingCoursework } from "./MseSupportingCoursework";

export class MseSupportingCourseworkControllerBase {
  constructor(protected readonly service: MseSupportingCourseworkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MseSupportingCoursework })
  async create(
    @common.Body() data: MseSupportingCourseworkCreateInput
  ): Promise<MseSupportingCoursework> {
    return await this.service.create({
      data: data,
      select: {
        algCourseGrade: true,
        algCourseName: true,
        algCourseNum: true,
        appId: true,
        dmCourseGrade: true,
        dmCourseName: true,
        dmCourseNum: true,
        dsCourseGrade: true,
        dsCourseName: true,
        dsCourseNum: true,
        id: true,
        prog1CourseGrade: true,
        prog1CourseName: true,
        prog1CourseNum: true,
        prog2CourseGrade: true,
        prog2CourseName: true,
        prog2CourseNum: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MseSupportingCoursework] })
  @ApiNestedQuery(MseSupportingCourseworkFindManyArgs)
  async findMany(
    @common.Req() request: Request
  ): Promise<MseSupportingCoursework[]> {
    const args = plainToClass(
      MseSupportingCourseworkFindManyArgs,
      request.query
    );
    return this.service.findMany({
      ...args,
      select: {
        algCourseGrade: true,
        algCourseName: true,
        algCourseNum: true,
        appId: true,
        dmCourseGrade: true,
        dmCourseName: true,
        dmCourseNum: true,
        dsCourseGrade: true,
        dsCourseName: true,
        dsCourseNum: true,
        id: true,
        prog1CourseGrade: true,
        prog1CourseName: true,
        prog1CourseNum: true,
        prog2CourseGrade: true,
        prog2CourseName: true,
        prog2CourseNum: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MseSupportingCoursework })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: MseSupportingCourseworkWhereUniqueInput
  ): Promise<MseSupportingCoursework | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        algCourseGrade: true,
        algCourseName: true,
        algCourseNum: true,
        appId: true,
        dmCourseGrade: true,
        dmCourseName: true,
        dmCourseNum: true,
        dsCourseGrade: true,
        dsCourseName: true,
        dsCourseNum: true,
        id: true,
        prog1CourseGrade: true,
        prog1CourseName: true,
        prog1CourseNum: true,
        prog2CourseGrade: true,
        prog2CourseName: true,
        prog2CourseNum: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MseSupportingCoursework })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: MseSupportingCourseworkWhereUniqueInput,
    @common.Body() data: MseSupportingCourseworkUpdateInput
  ): Promise<MseSupportingCoursework | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          algCourseGrade: true,
          algCourseName: true,
          algCourseNum: true,
          appId: true,
          dmCourseGrade: true,
          dmCourseName: true,
          dmCourseNum: true,
          dsCourseGrade: true,
          dsCourseName: true,
          dsCourseNum: true,
          id: true,
          prog1CourseGrade: true,
          prog1CourseName: true,
          prog1CourseNum: true,
          prog2CourseGrade: true,
          prog2CourseName: true,
          prog2CourseNum: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MseSupportingCoursework })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: MseSupportingCourseworkWhereUniqueInput
  ): Promise<MseSupportingCoursework | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          algCourseGrade: true,
          algCourseName: true,
          algCourseNum: true,
          appId: true,
          dmCourseGrade: true,
          dmCourseName: true,
          dmCourseNum: true,
          dsCourseGrade: true,
          dsCourseName: true,
          dsCourseNum: true,
          id: true,
          prog1CourseGrade: true,
          prog1CourseName: true,
          prog1CourseNum: true,
          prog2CourseGrade: true,
          prog2CourseName: true,
          prog2CourseNum: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
