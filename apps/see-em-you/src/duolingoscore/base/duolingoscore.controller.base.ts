/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DuolingoscoreService } from "../duolingoscore.service";
import { DuolingoscoreCreateInput } from "./DuolingoscoreCreateInput";
import { Duolingoscore } from "./Duolingoscore";
import { DuolingoscoreFindManyArgs } from "./DuolingoscoreFindManyArgs";
import { DuolingoscoreWhereUniqueInput } from "./DuolingoscoreWhereUniqueInput";
import { DuolingoscoreUpdateInput } from "./DuolingoscoreUpdateInput";

export class DuolingoscoreControllerBase {
  constructor(protected readonly service: DuolingoscoreService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Duolingoscore })
  async createDuolingoscore(
    @common.Body() data: DuolingoscoreCreateInput
  ): Promise<Duolingoscore> {
    return await this.service.createDuolingoscore({
      data: data,
      select: {
        applicationId: true,
        duolingodataId: true,
        id: true,
        matchDate: true,
        testdate: true,
        testemail: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Duolingoscore] })
  @ApiNestedQuery(DuolingoscoreFindManyArgs)
  async duolingoscores(
    @common.Req() request: Request
  ): Promise<Duolingoscore[]> {
    const args = plainToClass(DuolingoscoreFindManyArgs, request.query);
    return this.service.duolingoscores({
      ...args,
      select: {
        applicationId: true,
        duolingodataId: true,
        id: true,
        matchDate: true,
        testdate: true,
        testemail: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Duolingoscore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async duolingoscore(
    @common.Param() params: DuolingoscoreWhereUniqueInput
  ): Promise<Duolingoscore | null> {
    const result = await this.service.duolingoscore({
      where: params,
      select: {
        applicationId: true,
        duolingodataId: true,
        id: true,
        matchDate: true,
        testdate: true,
        testemail: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Duolingoscore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDuolingoscore(
    @common.Param() params: DuolingoscoreWhereUniqueInput,
    @common.Body() data: DuolingoscoreUpdateInput
  ): Promise<Duolingoscore | null> {
    try {
      return await this.service.updateDuolingoscore({
        where: params,
        data: data,
        select: {
          applicationId: true,
          duolingodataId: true,
          id: true,
          matchDate: true,
          testdate: true,
          testemail: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Duolingoscore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDuolingoscore(
    @common.Param() params: DuolingoscoreWhereUniqueInput
  ): Promise<Duolingoscore | null> {
    try {
      return await this.service.deleteDuolingoscore({
        where: params,
        select: {
          applicationId: true,
          duolingodataId: true,
          id: true,
          matchDate: true,
          testdate: true,
          testemail: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
