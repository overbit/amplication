/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MitsSlateReview } from "./MitsSlateReview";
import { MitsSlateReviewCountArgs } from "./MitsSlateReviewCountArgs";
import { MitsSlateReviewFindManyArgs } from "./MitsSlateReviewFindManyArgs";
import { MitsSlateReviewFindUniqueArgs } from "./MitsSlateReviewFindUniqueArgs";
import { CreateMitsSlateReviewArgs } from "./CreateMitsSlateReviewArgs";
import { UpdateMitsSlateReviewArgs } from "./UpdateMitsSlateReviewArgs";
import { DeleteMitsSlateReviewArgs } from "./DeleteMitsSlateReviewArgs";
import { MitsSlateReviewService } from "../mitsSlateReview.service";
@graphql.Resolver(() => MitsSlateReview)
export class MitsSlateReviewResolverBase {
  constructor(protected readonly service: MitsSlateReviewService) {}

  async _mitsSlateReviewsMeta(
    @graphql.Args() args: MitsSlateReviewCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MitsSlateReview])
  async mitsSlateReviews(
    @graphql.Args() args: MitsSlateReviewFindManyArgs
  ): Promise<MitsSlateReview[]> {
    return this.service.mitsSlateReviews(args);
  }

  @graphql.Query(() => MitsSlateReview, { nullable: true })
  async mitsSlateReview(
    @graphql.Args() args: MitsSlateReviewFindUniqueArgs
  ): Promise<MitsSlateReview | null> {
    const result = await this.service.mitsSlateReview(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MitsSlateReview)
  async createMitsSlateReview(
    @graphql.Args() args: CreateMitsSlateReviewArgs
  ): Promise<MitsSlateReview> {
    return await this.service.createMitsSlateReview({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MitsSlateReview)
  async updateMitsSlateReview(
    @graphql.Args() args: UpdateMitsSlateReviewArgs
  ): Promise<MitsSlateReview | null> {
    try {
      return await this.service.updateMitsSlateReview({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MitsSlateReview)
  async deleteMitsSlateReview(
    @graphql.Args() args: DeleteMitsSlateReviewArgs
  ): Promise<MitsSlateReview | null> {
    try {
      return await this.service.deleteMitsSlateReview(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
