/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TagMemberService } from "../tagMember.service";
import { TagMemberCreateInput } from "./TagMemberCreateInput";
import { TagMember } from "./TagMember";
import { TagMemberFindManyArgs } from "./TagMemberFindManyArgs";
import { TagMemberWhereUniqueInput } from "./TagMemberWhereUniqueInput";
import { TagMemberUpdateInput } from "./TagMemberUpdateInput";

export class TagMemberControllerBase {
  constructor(protected readonly service: TagMemberService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TagMember })
  async createTagMember(
    @common.Body() data: TagMemberCreateInput
  ): Promise<TagMember> {
    return await this.service.createTagMember({
      data: {
        ...data,

        application: data.application
          ? {
              connect: data.application,
            }
          : undefined,
      },
      select: {
        tagInstanceId: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TagMember] })
  @ApiNestedQuery(TagMemberFindManyArgs)
  async tagMembers(@common.Req() request: Request): Promise<TagMember[]> {
    const args = plainToClass(TagMemberFindManyArgs, request.query);
    return this.service.tagMembers({
      ...args,
      select: {
        tagInstanceId: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TagMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tagMember(
    @common.Param() params: TagMemberWhereUniqueInput
  ): Promise<TagMember | null> {
    const result = await this.service.tagMember({
      where: params,
      select: {
        tagInstanceId: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TagMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTagMember(
    @common.Param() params: TagMemberWhereUniqueInput,
    @common.Body() data: TagMemberUpdateInput
  ): Promise<TagMember | null> {
    try {
      return await this.service.updateTagMember({
        where: params,
        data: {
          ...data,

          application: data.application
            ? {
                connect: data.application,
              }
            : undefined,
        },
        select: {
          tagInstanceId: true,

          application: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TagMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTagMember(
    @common.Param() params: TagMemberWhereUniqueInput
  ): Promise<TagMember | null> {
    try {
      return await this.service.deleteTagMember({
        where: params,
        select: {
          tagInstanceId: true,

          application: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
