/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ApplicationAdminNote as PrismaApplicationAdminNote,
  Application as PrismaApplication,
  User as PrismaUser,
} from "@prisma/client";

export class ApplicationAdminNoteServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ApplicationAdminNoteCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApplicationAdminNoteCountArgs>
  ): Promise<number> {
    return this.prisma.applicationAdminNote.count(args);
  }

  async applicationAdminNotes<
    T extends Prisma.ApplicationAdminNoteFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ApplicationAdminNoteFindManyArgs>
  ): Promise<PrismaApplicationAdminNote[]> {
    return this.prisma.applicationAdminNote.findMany(args);
  }
  async applicationAdminNote<
    T extends Prisma.ApplicationAdminNoteFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ApplicationAdminNoteFindUniqueArgs>
  ): Promise<PrismaApplicationAdminNote | null> {
    return this.prisma.applicationAdminNote.findUnique(args);
  }
  async createApplicationAdminNote<
    T extends Prisma.ApplicationAdminNoteCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ApplicationAdminNoteCreateArgs>
  ): Promise<PrismaApplicationAdminNote> {
    return this.prisma.applicationAdminNote.create<T>(args);
  }
  async updateApplicationAdminNote<
    T extends Prisma.ApplicationAdminNoteUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ApplicationAdminNoteUpdateArgs>
  ): Promise<PrismaApplicationAdminNote> {
    return this.prisma.applicationAdminNote.update<T>(args);
  }
  async deleteApplicationAdminNote<
    T extends Prisma.ApplicationAdminNoteDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ApplicationAdminNoteDeleteArgs>
  ): Promise<PrismaApplicationAdminNote> {
    return this.prisma.applicationAdminNote.delete(args);
  }

  async getApplication(parentId: number): Promise<PrismaApplication | null> {
    return this.prisma.applicationAdminNote
      .findUnique({
        where: { id: parentId },
      })
      .application();
  }

  async getUsers(parentId: number): Promise<PrismaUser | null> {
    return this.prisma.applicationAdminNote
      .findUnique({
        where: { id: parentId },
      })
      .users();
  }
}
