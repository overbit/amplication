/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ApplicationAdminNote } from "./ApplicationAdminNote";
import { ApplicationAdminNoteCountArgs } from "./ApplicationAdminNoteCountArgs";
import { ApplicationAdminNoteFindManyArgs } from "./ApplicationAdminNoteFindManyArgs";
import { ApplicationAdminNoteFindUniqueArgs } from "./ApplicationAdminNoteFindUniqueArgs";
import { CreateApplicationAdminNoteArgs } from "./CreateApplicationAdminNoteArgs";
import { UpdateApplicationAdminNoteArgs } from "./UpdateApplicationAdminNoteArgs";
import { DeleteApplicationAdminNoteArgs } from "./DeleteApplicationAdminNoteArgs";
import { Application } from "../../application/base/Application";
import { User } from "../../user/base/User";
import { ApplicationAdminNoteService } from "../applicationAdminNote.service";
@graphql.Resolver(() => ApplicationAdminNote)
export class ApplicationAdminNoteResolverBase {
  constructor(protected readonly service: ApplicationAdminNoteService) {}

  async _applicationAdminNotesMeta(
    @graphql.Args() args: ApplicationAdminNoteCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ApplicationAdminNote])
  async applicationAdminNotes(
    @graphql.Args() args: ApplicationAdminNoteFindManyArgs
  ): Promise<ApplicationAdminNote[]> {
    return this.service.applicationAdminNotes(args);
  }

  @graphql.Query(() => ApplicationAdminNote, { nullable: true })
  async applicationAdminNote(
    @graphql.Args() args: ApplicationAdminNoteFindUniqueArgs
  ): Promise<ApplicationAdminNote | null> {
    const result = await this.service.applicationAdminNote(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ApplicationAdminNote)
  async createApplicationAdminNote(
    @graphql.Args() args: CreateApplicationAdminNoteArgs
  ): Promise<ApplicationAdminNote> {
    return await this.service.createApplicationAdminNote({
      ...args,
      data: {
        ...args.data,

        application: {
          connect: args.data.application,
        },

        users: {
          connect: args.data.users,
        },
      },
    });
  }

  @graphql.Mutation(() => ApplicationAdminNote)
  async updateApplicationAdminNote(
    @graphql.Args() args: UpdateApplicationAdminNoteArgs
  ): Promise<ApplicationAdminNote | null> {
    try {
      return await this.service.updateApplicationAdminNote({
        ...args,
        data: {
          ...args.data,

          application: {
            connect: args.data.application,
          },

          users: {
            connect: args.data.users,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ApplicationAdminNote)
  async deleteApplicationAdminNote(
    @graphql.Args() args: DeleteApplicationAdminNoteArgs
  ): Promise<ApplicationAdminNote | null> {
    try {
      return await this.service.deleteApplicationAdminNote(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Application, {
    nullable: true,
    name: "application",
  })
  async getApplication(
    @graphql.Parent() parent: ApplicationAdminNote
  ): Promise<Application | null> {
    const result = await this.service.getApplication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "users",
  })
  async getUsers(
    @graphql.Parent() parent: ApplicationAdminNote
  ): Promise<User | null> {
    const result = await this.service.getUsers(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
