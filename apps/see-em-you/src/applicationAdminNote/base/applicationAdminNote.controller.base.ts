/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ApplicationAdminNoteService } from "../applicationAdminNote.service";
import { ApplicationAdminNoteCreateInput } from "./ApplicationAdminNoteCreateInput";
import { ApplicationAdminNote } from "./ApplicationAdminNote";
import { ApplicationAdminNoteFindManyArgs } from "./ApplicationAdminNoteFindManyArgs";
import { ApplicationAdminNoteWhereUniqueInput } from "./ApplicationAdminNoteWhereUniqueInput";
import { ApplicationAdminNoteUpdateInput } from "./ApplicationAdminNoteUpdateInput";

export class ApplicationAdminNoteControllerBase {
  constructor(protected readonly service: ApplicationAdminNoteService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ApplicationAdminNote })
  async createApplicationAdminNote(
    @common.Body() data: ApplicationAdminNoteCreateInput
  ): Promise<ApplicationAdminNote> {
    return await this.service.createApplicationAdminNote({
      data: {
        ...data,

        application: {
          connect: data.application,
        },

        users: {
          connect: data.users,
        },
      },
      select: {
        insertTime: true,
        note: true,

        application: {
          select: {
            id: true,
          },
        },

        users: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ApplicationAdminNote] })
  @ApiNestedQuery(ApplicationAdminNoteFindManyArgs)
  async applicationAdminNotes(
    @common.Req() request: Request
  ): Promise<ApplicationAdminNote[]> {
    const args = plainToClass(ApplicationAdminNoteFindManyArgs, request.query);
    return this.service.applicationAdminNotes({
      ...args,
      select: {
        insertTime: true,
        note: true,

        application: {
          select: {
            id: true,
          },
        },

        users: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ApplicationAdminNote })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async applicationAdminNote(
    @common.Param() params: ApplicationAdminNoteWhereUniqueInput
  ): Promise<ApplicationAdminNote | null> {
    const result = await this.service.applicationAdminNote({
      where: params,
      select: {
        insertTime: true,
        note: true,

        application: {
          select: {
            id: true,
          },
        },

        users: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ApplicationAdminNote })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateApplicationAdminNote(
    @common.Param() params: ApplicationAdminNoteWhereUniqueInput,
    @common.Body() data: ApplicationAdminNoteUpdateInput
  ): Promise<ApplicationAdminNote | null> {
    try {
      return await this.service.updateApplicationAdminNote({
        where: params,
        data: {
          ...data,

          application: {
            connect: data.application,
          },

          users: {
            connect: data.users,
          },
        },
        select: {
          insertTime: true,
          note: true,

          application: {
            select: {
              id: true,
            },
          },

          users: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ApplicationAdminNote })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteApplicationAdminNote(
    @common.Param() params: ApplicationAdminNoteWhereUniqueInput
  ): Promise<ApplicationAdminNote | null> {
    try {
      return await this.service.deleteApplicationAdminNote({
        where: params,
        select: {
          insertTime: true,
          note: true,

          application: {
            select: {
              id: true,
            },
          },

          users: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
