/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SlateApp } from "./SlateApp";
import { SlateAppCountArgs } from "./SlateAppCountArgs";
import { SlateAppFindManyArgs } from "./SlateAppFindManyArgs";
import { SlateAppFindUniqueArgs } from "./SlateAppFindUniqueArgs";
import { CreateSlateAppArgs } from "./CreateSlateAppArgs";
import { UpdateSlateAppArgs } from "./UpdateSlateAppArgs";
import { DeleteSlateAppArgs } from "./DeleteSlateAppArgs";
import { SlateAppService } from "../slateApp.service";
@graphql.Resolver(() => SlateApp)
export class SlateAppResolverBase {
  constructor(protected readonly service: SlateAppService) {}

  async _slateAppsMeta(
    @graphql.Args() args: SlateAppCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SlateApp])
  async slateApps(
    @graphql.Args() args: SlateAppFindManyArgs
  ): Promise<SlateApp[]> {
    return this.service.slateApps(args);
  }

  @graphql.Query(() => SlateApp, { nullable: true })
  async slateApp(
    @graphql.Args() args: SlateAppFindUniqueArgs
  ): Promise<SlateApp | null> {
    const result = await this.service.slateApp(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SlateApp)
  async createSlateApp(
    @graphql.Args() args: CreateSlateAppArgs
  ): Promise<SlateApp> {
    return await this.service.createSlateApp({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SlateApp)
  async updateSlateApp(
    @graphql.Args() args: UpdateSlateAppArgs
  ): Promise<SlateApp | null> {
    try {
      return await this.service.updateSlateApp({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SlateApp)
  async deleteSlateApp(
    @graphql.Args() args: DeleteSlateAppArgs
  ): Promise<SlateApp | null> {
    try {
      return await this.service.deleteSlateApp(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
