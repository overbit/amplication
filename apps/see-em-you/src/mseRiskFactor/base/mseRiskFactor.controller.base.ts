/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MseRiskFactorService } from "../mseRiskFactor.service";
import { MseRiskFactorCreateInput } from "./MseRiskFactorCreateInput";
import { MseRiskFactor } from "./MseRiskFactor";
import { MseRiskFactorFindManyArgs } from "./MseRiskFactorFindManyArgs";
import { MseRiskFactorWhereUniqueInput } from "./MseRiskFactorWhereUniqueInput";
import { MseRiskFactorUpdateInput } from "./MseRiskFactorUpdateInput";

export class MseRiskFactorControllerBase {
  constructor(protected readonly service: MseRiskFactorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MseRiskFactor })
  async createMseRiskFactor(
    @common.Body() data: MseRiskFactorCreateInput
  ): Promise<MseRiskFactor> {
    return await this.service.createMseRiskFactor({
      data: data,
      select: {
        applicationId: true,
        reviewerId: true,
        language: true,
        experience: true,
        academic: true,
        other: true,
        otherText: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MseRiskFactor] })
  @ApiNestedQuery(MseRiskFactorFindManyArgs)
  async mseRiskFactors(
    @common.Req() request: Request
  ): Promise<MseRiskFactor[]> {
    const args = plainToClass(MseRiskFactorFindManyArgs, request.query);
    return this.service.mseRiskFactors({
      ...args,
      select: {
        applicationId: true,
        reviewerId: true,
        language: true,
        experience: true,
        academic: true,
        other: true,
        otherText: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MseRiskFactor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mseRiskFactor(
    @common.Param() params: MseRiskFactorWhereUniqueInput
  ): Promise<MseRiskFactor | null> {
    const result = await this.service.mseRiskFactor({
      where: params,
      select: {
        applicationId: true,
        reviewerId: true,
        language: true,
        experience: true,
        academic: true,
        other: true,
        otherText: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MseRiskFactor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMseRiskFactor(
    @common.Param() params: MseRiskFactorWhereUniqueInput,
    @common.Body() data: MseRiskFactorUpdateInput
  ): Promise<MseRiskFactor | null> {
    try {
      return await this.service.updateMseRiskFactor({
        where: params,
        data: data,
        select: {
          applicationId: true,
          reviewerId: true,
          language: true,
          experience: true,
          academic: true,
          other: true,
          otherText: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MseRiskFactor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMseRiskFactor(
    @common.Param() params: MseRiskFactorWhereUniqueInput
  ): Promise<MseRiskFactor | null> {
    try {
      return await this.service.deleteMseRiskFactor({
        where: params,
        select: {
          applicationId: true,
          reviewerId: true,
          language: true,
          experience: true,
          academic: true,
          other: true,
          otherText: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
