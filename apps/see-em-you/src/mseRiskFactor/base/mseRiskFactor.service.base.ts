/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, MseRiskFactor as PrismaMseRiskFactor } from "@prisma/client";

export class MseRiskFactorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.MseRiskFactorCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.MseRiskFactorCountArgs>
  ): Promise<number> {
    return this.prisma.mseRiskFactor.count(args);
  }

  async mseRiskFactors<T extends Prisma.MseRiskFactorFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MseRiskFactorFindManyArgs>
  ): Promise<PrismaMseRiskFactor[]> {
    return this.prisma.mseRiskFactor.findMany(args);
  }
  async mseRiskFactor<T extends Prisma.MseRiskFactorFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MseRiskFactorFindUniqueArgs>
  ): Promise<PrismaMseRiskFactor | null> {
    return this.prisma.mseRiskFactor.findUnique(args);
  }
  async createMseRiskFactor<T extends Prisma.MseRiskFactorCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MseRiskFactorCreateArgs>
  ): Promise<PrismaMseRiskFactor> {
    return this.prisma.mseRiskFactor.create<T>(args);
  }
  async updateMseRiskFactor<T extends Prisma.MseRiskFactorUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MseRiskFactorUpdateArgs>
  ): Promise<PrismaMseRiskFactor> {
    return this.prisma.mseRiskFactor.update<T>(args);
  }
  async deleteMseRiskFactor<T extends Prisma.MseRiskFactorDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MseRiskFactorDeleteArgs>
  ): Promise<PrismaMseRiskFactor> {
    return this.prisma.mseRiskFactor.delete(args);
  }
}
