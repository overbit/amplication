/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SlateReview } from "./SlateReview";
import { SlateReviewCountArgs } from "./SlateReviewCountArgs";
import { SlateReviewFindManyArgs } from "./SlateReviewFindManyArgs";
import { SlateReviewFindUniqueArgs } from "./SlateReviewFindUniqueArgs";
import { CreateSlateReviewArgs } from "./CreateSlateReviewArgs";
import { UpdateSlateReviewArgs } from "./UpdateSlateReviewArgs";
import { DeleteSlateReviewArgs } from "./DeleteSlateReviewArgs";
import { SlateReviewService } from "../slateReview.service";
@graphql.Resolver(() => SlateReview)
export class SlateReviewResolverBase {
  constructor(protected readonly service: SlateReviewService) {}

  async _slateReviewsMeta(
    @graphql.Args() args: SlateReviewCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SlateReview])
  async slateReviews(
    @graphql.Args() args: SlateReviewFindManyArgs
  ): Promise<SlateReview[]> {
    return this.service.slateReviews(args);
  }

  @graphql.Query(() => SlateReview, { nullable: true })
  async slateReview(
    @graphql.Args() args: SlateReviewFindUniqueArgs
  ): Promise<SlateReview | null> {
    const result = await this.service.slateReview(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SlateReview)
  async createSlateReview(
    @graphql.Args() args: CreateSlateReviewArgs
  ): Promise<SlateReview> {
    return await this.service.createSlateReview({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SlateReview)
  async updateSlateReview(
    @graphql.Args() args: UpdateSlateReviewArgs
  ): Promise<SlateReview | null> {
    try {
      return await this.service.updateSlateReview({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SlateReview)
  async deleteSlateReview(
    @graphql.Args() args: DeleteSlateReviewArgs
  ): Promise<SlateReview | null> {
    try {
      return await this.service.deleteSlateReview(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
