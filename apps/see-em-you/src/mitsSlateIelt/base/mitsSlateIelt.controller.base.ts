/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MitsSlateIeltService } from "../mitsSlateIelt.service";
import { MitsSlateIeltCreateInput } from "./MitsSlateIeltCreateInput";
import { MitsSlateIelt } from "./MitsSlateIelt";
import { MitsSlateIeltFindManyArgs } from "./MitsSlateIeltFindManyArgs";
import { MitsSlateIeltWhereUniqueInput } from "./MitsSlateIeltWhereUniqueInput";
import { MitsSlateIeltUpdateInput } from "./MitsSlateIeltUpdateInput";

export class MitsSlateIeltControllerBase {
  constructor(protected readonly service: MitsSlateIeltService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MitsSlateIelt })
  async createMitsSlateIelt(
    @common.Body() data: MitsSlateIeltCreateInput
  ): Promise<MitsSlateIelt> {
    return await this.service.createMitsSlateIelt({
      data: data,
      select: {
        first: true,
        id: true,
        ieltsListening: true,
        ieltsOverallBandScore: true,
        ieltsReading: true,
        ieltsSpeaking: true,
        ieltsWriting: true,
        last: true,
        middle: true,
        prefix: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MitsSlateIelt] })
  @ApiNestedQuery(MitsSlateIeltFindManyArgs)
  async mitsSlateIelts(
    @common.Req() request: Request
  ): Promise<MitsSlateIelt[]> {
    const args = plainToClass(MitsSlateIeltFindManyArgs, request.query);
    return this.service.mitsSlateIelts({
      ...args,
      select: {
        first: true,
        id: true,
        ieltsListening: true,
        ieltsOverallBandScore: true,
        ieltsReading: true,
        ieltsSpeaking: true,
        ieltsWriting: true,
        last: true,
        middle: true,
        prefix: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MitsSlateIelt })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mitsSlateIelt(
    @common.Param() params: MitsSlateIeltWhereUniqueInput
  ): Promise<MitsSlateIelt | null> {
    const result = await this.service.mitsSlateIelt({
      where: params,
      select: {
        first: true,
        id: true,
        ieltsListening: true,
        ieltsOverallBandScore: true,
        ieltsReading: true,
        ieltsSpeaking: true,
        ieltsWriting: true,
        last: true,
        middle: true,
        prefix: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MitsSlateIelt })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMitsSlateIelt(
    @common.Param() params: MitsSlateIeltWhereUniqueInput,
    @common.Body() data: MitsSlateIeltUpdateInput
  ): Promise<MitsSlateIelt | null> {
    try {
      return await this.service.updateMitsSlateIelt({
        where: params,
        data: data,
        select: {
          first: true,
          id: true,
          ieltsListening: true,
          ieltsOverallBandScore: true,
          ieltsReading: true,
          ieltsSpeaking: true,
          ieltsWriting: true,
          last: true,
          middle: true,
          prefix: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MitsSlateIelt })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMitsSlateIelt(
    @common.Param() params: MitsSlateIeltWhereUniqueInput
  ): Promise<MitsSlateIelt | null> {
    try {
      return await this.service.deleteMitsSlateIelt({
        where: params,
        select: {
          first: true,
          id: true,
          ieltsListening: true,
          ieltsOverallBandScore: true,
          ieltsReading: true,
          ieltsSpeaking: true,
          ieltsWriting: true,
          last: true,
          middle: true,
          prefix: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
