/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ApplicantIpedsRace } from "./ApplicantIpedsRace";
import { ApplicantIpedsRaceCountArgs } from "./ApplicantIpedsRaceCountArgs";
import { ApplicantIpedsRaceFindManyArgs } from "./ApplicantIpedsRaceFindManyArgs";
import { ApplicantIpedsRaceFindUniqueArgs } from "./ApplicantIpedsRaceFindUniqueArgs";
import { CreateApplicantIpedsRaceArgs } from "./CreateApplicantIpedsRaceArgs";
import { UpdateApplicantIpedsRaceArgs } from "./UpdateApplicantIpedsRaceArgs";
import { DeleteApplicantIpedsRaceArgs } from "./DeleteApplicantIpedsRaceArgs";
import { ApplicantIpedsRaceService } from "../applicantIpedsRace.service";
@graphql.Resolver(() => ApplicantIpedsRace)
export class ApplicantIpedsRaceResolverBase {
  constructor(protected readonly service: ApplicantIpedsRaceService) {}

  async _applicantIpedsRacesMeta(
    @graphql.Args() args: ApplicantIpedsRaceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ApplicantIpedsRace])
  async applicantIpedsRaces(
    @graphql.Args() args: ApplicantIpedsRaceFindManyArgs
  ): Promise<ApplicantIpedsRace[]> {
    return this.service.applicantIpedsRaces(args);
  }

  @graphql.Query(() => ApplicantIpedsRace, { nullable: true })
  async applicantIpedsRace(
    @graphql.Args() args: ApplicantIpedsRaceFindUniqueArgs
  ): Promise<ApplicantIpedsRace | null> {
    const result = await this.service.applicantIpedsRace(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ApplicantIpedsRace)
  async createApplicantIpedsRace(
    @graphql.Args() args: CreateApplicantIpedsRaceArgs
  ): Promise<ApplicantIpedsRace> {
    return await this.service.createApplicantIpedsRace({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ApplicantIpedsRace)
  async updateApplicantIpedsRace(
    @graphql.Args() args: UpdateApplicantIpedsRaceArgs
  ): Promise<ApplicantIpedsRace | null> {
    try {
      return await this.service.updateApplicantIpedsRace({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ApplicantIpedsRace)
  async deleteApplicantIpedsRace(
    @graphql.Args() args: DeleteApplicantIpedsRaceArgs
  ): Promise<ApplicantIpedsRace | null> {
    try {
      return await this.service.deleteApplicantIpedsRace(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
