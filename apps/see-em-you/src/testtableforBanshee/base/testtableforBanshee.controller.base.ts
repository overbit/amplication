/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TesttableforBansheeService } from "../testtableforBanshee.service";
import { TesttableforBansheeCreateInput } from "./TesttableforBansheeCreateInput";
import { TesttableforBanshee } from "./TesttableforBanshee";
import { TesttableforBansheeFindManyArgs } from "./TesttableforBansheeFindManyArgs";
import { TesttableforBansheeWhereUniqueInput } from "./TesttableforBansheeWhereUniqueInput";
import { TesttableforBansheeUpdateInput } from "./TesttableforBansheeUpdateInput";

export class TesttableforBansheeControllerBase {
  constructor(protected readonly service: TesttableforBansheeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TesttableforBanshee })
  async createTesttableforBanshee(
    @common.Body() data: TesttableforBansheeCreateInput
  ): Promise<TesttableforBanshee> {
    return await this.service.createTesttableforBanshee({
      data: data,
      select: {
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TesttableforBanshee] })
  @ApiNestedQuery(TesttableforBansheeFindManyArgs)
  async testtableforBanshees(
    @common.Req() request: Request
  ): Promise<TesttableforBanshee[]> {
    const args = plainToClass(TesttableforBansheeFindManyArgs, request.query);
    return this.service.testtableforBanshees({
      ...args,
      select: {
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TesttableforBanshee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async testtableforBanshee(
    @common.Param() params: TesttableforBansheeWhereUniqueInput
  ): Promise<TesttableforBanshee | null> {
    const result = await this.service.testtableforBanshee({
      where: params,
      select: {
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TesttableforBanshee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTesttableforBanshee(
    @common.Param() params: TesttableforBansheeWhereUniqueInput,
    @common.Body() data: TesttableforBansheeUpdateInput
  ): Promise<TesttableforBanshee | null> {
    try {
      return await this.service.updateTesttableforBanshee({
        where: params,
        data: data,
        select: {
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TesttableforBanshee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTesttableforBanshee(
    @common.Param() params: TesttableforBansheeWhereUniqueInput
  ): Promise<TesttableforBanshee | null> {
    try {
      return await this.service.deleteTesttableforBanshee({
        where: params,
        select: {
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
