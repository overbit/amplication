/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TagInstanceService } from "../tagInstance.service";
import { TagInstanceCreateInput } from "./TagInstanceCreateInput";
import { TagInstance } from "./TagInstance";
import { TagInstanceFindManyArgs } from "./TagInstanceFindManyArgs";
import { TagInstanceWhereUniqueInput } from "./TagInstanceWhereUniqueInput";
import { TagInstanceUpdateInput } from "./TagInstanceUpdateInput";

export class TagInstanceControllerBase {
  constructor(protected readonly service: TagInstanceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TagInstance })
  async createTagInstance(
    @common.Body() data: TagInstanceCreateInput
  ): Promise<TagInstance> {
    return await this.service.createTagInstance({
      data: data,
      select: {
        department: true,
        id: true,
        owner: true,
        period: true,
        status: true,
        tagId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TagInstance] })
  @ApiNestedQuery(TagInstanceFindManyArgs)
  async tagInstances(@common.Req() request: Request): Promise<TagInstance[]> {
    const args = plainToClass(TagInstanceFindManyArgs, request.query);
    return this.service.tagInstances({
      ...args,
      select: {
        department: true,
        id: true,
        owner: true,
        period: true,
        status: true,
        tagId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TagInstance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tagInstance(
    @common.Param() params: TagInstanceWhereUniqueInput
  ): Promise<TagInstance | null> {
    const result = await this.service.tagInstance({
      where: params,
      select: {
        department: true,
        id: true,
        owner: true,
        period: true,
        status: true,
        tagId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TagInstance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTagInstance(
    @common.Param() params: TagInstanceWhereUniqueInput,
    @common.Body() data: TagInstanceUpdateInput
  ): Promise<TagInstance | null> {
    try {
      return await this.service.updateTagInstance({
        where: params,
        data: data,
        select: {
          department: true,
          id: true,
          owner: true,
          period: true,
          status: true,
          tagId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TagInstance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTagInstance(
    @common.Param() params: TagInstanceWhereUniqueInput
  ): Promise<TagInstance | null> {
    try {
      return await this.service.deleteTagInstance({
        where: params,
        select: {
          department: true,
          id: true,
          owner: true,
          period: true,
          status: true,
          tagId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
