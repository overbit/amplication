/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTagInstanceArgs } from "./CreateTagInstanceArgs";
import { UpdateTagInstanceArgs } from "./UpdateTagInstanceArgs";
import { DeleteTagInstanceArgs } from "./DeleteTagInstanceArgs";
import { TagInstanceCountArgs } from "./TagInstanceCountArgs";
import { TagInstanceFindManyArgs } from "./TagInstanceFindManyArgs";
import { TagInstanceFindUniqueArgs } from "./TagInstanceFindUniqueArgs";
import { TagInstance } from "./TagInstance";
import { TagInstanceService } from "../tagInstance.service";
@graphql.Resolver(() => TagInstance)
export class TagInstanceResolverBase {
  constructor(protected readonly service: TagInstanceService) {}

  async _tagInstancesMeta(
    @graphql.Args() args: TagInstanceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TagInstance])
  async tagInstances(
    @graphql.Args() args: TagInstanceFindManyArgs
  ): Promise<TagInstance[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TagInstance, { nullable: true })
  async tagInstance(
    @graphql.Args() args: TagInstanceFindUniqueArgs
  ): Promise<TagInstance | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TagInstance)
  async createTagInstance(
    @graphql.Args() args: CreateTagInstanceArgs
  ): Promise<TagInstance> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TagInstance)
  async updateTagInstance(
    @graphql.Args() args: UpdateTagInstanceArgs
  ): Promise<TagInstance | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TagInstance)
  async deleteTagInstance(
    @graphql.Args() args: DeleteTagInstanceArgs
  ): Promise<TagInstance | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
