/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, TagInstance } from "@prisma/client";

export class TagInstanceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.TagInstanceCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.TagInstanceCountArgs>
  ): Promise<number> {
    return this.prisma.tagInstance.count(args);
  }

  async tagInstances<T extends Prisma.TagInstanceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TagInstanceFindManyArgs>
  ): Promise<TagInstance[]> {
    return this.prisma.tagInstance.findMany(args);
  }
  async tagInstance<T extends Prisma.TagInstanceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TagInstanceFindUniqueArgs>
  ): Promise<TagInstance | null> {
    return this.prisma.tagInstance.findUnique(args);
  }
  async createTagInstance<T extends Prisma.TagInstanceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TagInstanceCreateArgs>
  ): Promise<TagInstance> {
    return this.prisma.tagInstance.create<T>(args);
  }
  async updateTagInstance<T extends Prisma.TagInstanceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TagInstanceUpdateArgs>
  ): Promise<TagInstance> {
    return this.prisma.tagInstance.update<T>(args);
  }
  async deleteTagInstance<T extends Prisma.TagInstanceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TagInstanceDeleteArgs>
  ): Promise<TagInstance> {
    return this.prisma.tagInstance.delete(args);
  }
}
