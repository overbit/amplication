/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  StudentDecisionUniversity as PrismaStudentDecisionUniversity,
} from "@prisma/client";

export class StudentDecisionUniversityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.StudentDecisionUniversityCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDecisionUniversityCountArgs>
  ): Promise<number> {
    return this.prisma.studentDecisionUniversity.count(args);
  }

  async studentDecisionUniversities<
    T extends Prisma.StudentDecisionUniversityFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.StudentDecisionUniversityFindManyArgs>
  ): Promise<PrismaStudentDecisionUniversity[]> {
    return this.prisma.studentDecisionUniversity.findMany(args);
  }
  async studentDecisionUniversity<
    T extends Prisma.StudentDecisionUniversityFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.StudentDecisionUniversityFindUniqueArgs>
  ): Promise<PrismaStudentDecisionUniversity | null> {
    return this.prisma.studentDecisionUniversity.findUnique(args);
  }
  async createStudentDecisionUniversity<
    T extends Prisma.StudentDecisionUniversityCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.StudentDecisionUniversityCreateArgs>
  ): Promise<PrismaStudentDecisionUniversity> {
    return this.prisma.studentDecisionUniversity.create<T>(args);
  }
  async updateStudentDecisionUniversity<
    T extends Prisma.StudentDecisionUniversityUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.StudentDecisionUniversityUpdateArgs>
  ): Promise<PrismaStudentDecisionUniversity> {
    return this.prisma.studentDecisionUniversity.update<T>(args);
  }
  async deleteStudentDecisionUniversity<
    T extends Prisma.StudentDecisionUniversityDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.StudentDecisionUniversityDeleteArgs>
  ): Promise<PrismaStudentDecisionUniversity> {
    return this.prisma.studentDecisionUniversity.delete(args);
  }
}
