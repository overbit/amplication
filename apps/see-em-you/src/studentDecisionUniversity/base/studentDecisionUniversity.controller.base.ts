/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StudentDecisionUniversityService } from "../studentDecisionUniversity.service";
import { StudentDecisionUniversityCreateInput } from "./StudentDecisionUniversityCreateInput";
import { StudentDecisionUniversity } from "./StudentDecisionUniversity";
import { StudentDecisionUniversityFindManyArgs } from "./StudentDecisionUniversityFindManyArgs";
import { StudentDecisionUniversityWhereUniqueInput } from "./StudentDecisionUniversityWhereUniqueInput";
import { StudentDecisionUniversityUpdateInput } from "./StudentDecisionUniversityUpdateInput";

export class StudentDecisionUniversityControllerBase {
  constructor(protected readonly service: StudentDecisionUniversityService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StudentDecisionUniversity })
  async createStudentDecisionUniversity(
    @common.Body() data: StudentDecisionUniversityCreateInput
  ): Promise<StudentDecisionUniversity> {
    return await this.service.createStudentDecisionUniversity({
      data: data,
      select: {
        accepted: true,
        applicationId: true,
        id: true,
        name: true,
        programId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StudentDecisionUniversity] })
  @ApiNestedQuery(StudentDecisionUniversityFindManyArgs)
  async studentDecisionUniversities(
    @common.Req() request: Request
  ): Promise<StudentDecisionUniversity[]> {
    const args = plainToClass(
      StudentDecisionUniversityFindManyArgs,
      request.query
    );
    return this.service.studentDecisionUniversities({
      ...args,
      select: {
        accepted: true,
        applicationId: true,
        id: true,
        name: true,
        programId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StudentDecisionUniversity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async studentDecisionUniversity(
    @common.Param() params: StudentDecisionUniversityWhereUniqueInput
  ): Promise<StudentDecisionUniversity | null> {
    const result = await this.service.studentDecisionUniversity({
      where: params,
      select: {
        accepted: true,
        applicationId: true,
        id: true,
        name: true,
        programId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StudentDecisionUniversity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStudentDecisionUniversity(
    @common.Param() params: StudentDecisionUniversityWhereUniqueInput,
    @common.Body() data: StudentDecisionUniversityUpdateInput
  ): Promise<StudentDecisionUniversity | null> {
    try {
      return await this.service.updateStudentDecisionUniversity({
        where: params,
        data: data,
        select: {
          accepted: true,
          applicationId: true,
          id: true,
          name: true,
          programId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StudentDecisionUniversity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStudentDecisionUniversity(
    @common.Param() params: StudentDecisionUniversityWhereUniqueInput
  ): Promise<StudentDecisionUniversity | null> {
    try {
      return await this.service.deleteStudentDecisionUniversity({
        where: params,
        select: {
          accepted: true,
          applicationId: true,
          id: true,
          name: true,
          programId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
