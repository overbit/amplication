/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MhciPrereqsConversationCommentService } from "../mhciPrereqsConversationComment.service";
import { MhciPrereqsConversationCommentCreateInput } from "./MhciPrereqsConversationCommentCreateInput";
import { MhciPrereqsConversationCommentWhereInput } from "./MhciPrereqsConversationCommentWhereInput";
import { MhciPrereqsConversationCommentWhereUniqueInput } from "./MhciPrereqsConversationCommentWhereUniqueInput";
import { MhciPrereqsConversationCommentFindManyArgs } from "./MhciPrereqsConversationCommentFindManyArgs";
import { MhciPrereqsConversationCommentUpdateInput } from "./MhciPrereqsConversationCommentUpdateInput";
import { MhciPrereqsConversationComment } from "./MhciPrereqsConversationComment";

export class MhciPrereqsConversationCommentControllerBase {
  constructor(
    protected readonly service: MhciPrereqsConversationCommentService
  ) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MhciPrereqsConversationComment })
  async create(
    @common.Body() data: MhciPrereqsConversationCommentCreateInput
  ): Promise<MhciPrereqsConversationComment> {
    return await this.service.create({
      data: {
        ...data,

        luUsersUsertypes: {
          connect: data.luUsersUsertypes,
        },

        mhciPrereqs: {
          connect: data.mhciPrereqs,
        },
      },
      select: {
        applicationId: true,
        comment: true,
        id: true,

        luUsersUsertypes: {
          select: {
            id: true,
          },
        },

        mhciPrereqs: {
          select: {
            id: true,
          },
        },

        periodId: true,
        programId: true,
        timestamp: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MhciPrereqsConversationComment] })
  @ApiNestedQuery(MhciPrereqsConversationCommentFindManyArgs)
  async findMany(
    @common.Req() request: Request
  ): Promise<MhciPrereqsConversationComment[]> {
    const args = plainToClass(
      MhciPrereqsConversationCommentFindManyArgs,
      request.query
    );
    return this.service.findMany({
      ...args,
      select: {
        applicationId: true,
        comment: true,
        id: true,

        luUsersUsertypes: {
          select: {
            id: true,
          },
        },

        mhciPrereqs: {
          select: {
            id: true,
          },
        },

        periodId: true,
        programId: true,
        timestamp: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MhciPrereqsConversationComment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: MhciPrereqsConversationCommentWhereUniqueInput
  ): Promise<MhciPrereqsConversationComment | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        applicationId: true,
        comment: true,
        id: true,

        luUsersUsertypes: {
          select: {
            id: true,
          },
        },

        mhciPrereqs: {
          select: {
            id: true,
          },
        },

        periodId: true,
        programId: true,
        timestamp: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MhciPrereqsConversationComment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: MhciPrereqsConversationCommentWhereUniqueInput,
    @common.Body() data: MhciPrereqsConversationCommentUpdateInput
  ): Promise<MhciPrereqsConversationComment | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          luUsersUsertypes: {
            connect: data.luUsersUsertypes,
          },

          mhciPrereqs: {
            connect: data.mhciPrereqs,
          },
        },
        select: {
          applicationId: true,
          comment: true,
          id: true,

          luUsersUsertypes: {
            select: {
              id: true,
            },
          },

          mhciPrereqs: {
            select: {
              id: true,
            },
          },

          periodId: true,
          programId: true,
          timestamp: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MhciPrereqsConversationComment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: MhciPrereqsConversationCommentWhereUniqueInput
  ): Promise<MhciPrereqsConversationComment | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          applicationId: true,
          comment: true,
          id: true,

          luUsersUsertypes: {
            select: {
              id: true,
            },
          },

          mhciPrereqs: {
            select: {
              id: true,
            },
          },

          periodId: true,
          programId: true,
          timestamp: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
