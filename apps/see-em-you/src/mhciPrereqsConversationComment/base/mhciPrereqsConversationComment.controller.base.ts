/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MhciPrereqsConversationCommentService } from "../mhciPrereqsConversationComment.service";
import { MhciPrereqsConversationCommentCreateInput } from "./MhciPrereqsConversationCommentCreateInput";
import { MhciPrereqsConversationComment } from "./MhciPrereqsConversationComment";
import { MhciPrereqsConversationCommentFindManyArgs } from "./MhciPrereqsConversationCommentFindManyArgs";
import { MhciPrereqsConversationCommentWhereUniqueInput } from "./MhciPrereqsConversationCommentWhereUniqueInput";
import { MhciPrereqsConversationCommentUpdateInput } from "./MhciPrereqsConversationCommentUpdateInput";

export class MhciPrereqsConversationCommentControllerBase {
  constructor(
    protected readonly service: MhciPrereqsConversationCommentService
  ) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MhciPrereqsConversationComment })
  async createMhciPrereqsConversationComment(
    @common.Body() data: MhciPrereqsConversationCommentCreateInput
  ): Promise<MhciPrereqsConversationComment> {
    return await this.service.createMhciPrereqsConversationComment({
      data: {
        ...data,

        luUsersUsertypes: {
          connect: data.luUsersUsertypes,
        },

        mhciPrereqs: {
          connect: data.mhciPrereqs,
        },
      },
      select: {
        applicationId: true,
        comment: true,
        id: true,

        luUsersUsertypes: {
          select: {
            id: true,
          },
        },

        mhciPrereqs: {
          select: {
            id: true,
          },
        },

        periodId: true,
        programId: true,
        timestamp: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MhciPrereqsConversationComment] })
  @ApiNestedQuery(MhciPrereqsConversationCommentFindManyArgs)
  async mhciPrereqsConversationComments(
    @common.Req() request: Request
  ): Promise<MhciPrereqsConversationComment[]> {
    const args = plainToClass(
      MhciPrereqsConversationCommentFindManyArgs,
      request.query
    );
    return this.service.mhciPrereqsConversationComments({
      ...args,
      select: {
        applicationId: true,
        comment: true,
        id: true,

        luUsersUsertypes: {
          select: {
            id: true,
          },
        },

        mhciPrereqs: {
          select: {
            id: true,
          },
        },

        periodId: true,
        programId: true,
        timestamp: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MhciPrereqsConversationComment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mhciPrereqsConversationComment(
    @common.Param() params: MhciPrereqsConversationCommentWhereUniqueInput
  ): Promise<MhciPrereqsConversationComment | null> {
    const result = await this.service.mhciPrereqsConversationComment({
      where: params,
      select: {
        applicationId: true,
        comment: true,
        id: true,

        luUsersUsertypes: {
          select: {
            id: true,
          },
        },

        mhciPrereqs: {
          select: {
            id: true,
          },
        },

        periodId: true,
        programId: true,
        timestamp: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MhciPrereqsConversationComment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMhciPrereqsConversationComment(
    @common.Param() params: MhciPrereqsConversationCommentWhereUniqueInput,
    @common.Body() data: MhciPrereqsConversationCommentUpdateInput
  ): Promise<MhciPrereqsConversationComment | null> {
    try {
      return await this.service.updateMhciPrereqsConversationComment({
        where: params,
        data: {
          ...data,

          luUsersUsertypes: {
            connect: data.luUsersUsertypes,
          },

          mhciPrereqs: {
            connect: data.mhciPrereqs,
          },
        },
        select: {
          applicationId: true,
          comment: true,
          id: true,

          luUsersUsertypes: {
            select: {
              id: true,
            },
          },

          mhciPrereqs: {
            select: {
              id: true,
            },
          },

          periodId: true,
          programId: true,
          timestamp: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MhciPrereqsConversationComment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMhciPrereqsConversationComment(
    @common.Param() params: MhciPrereqsConversationCommentWhereUniqueInput
  ): Promise<MhciPrereqsConversationComment | null> {
    try {
      return await this.service.deleteMhciPrereqsConversationComment({
        where: params,
        select: {
          applicationId: true,
          comment: true,
          id: true,

          luUsersUsertypes: {
            select: {
              id: true,
            },
          },

          mhciPrereqs: {
            select: {
              id: true,
            },
          },

          periodId: true,
          programId: true,
          timestamp: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
