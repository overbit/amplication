/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MhciPrereqsConversationComment as PrismaMhciPrereqsConversationComment,
  MhciPrereq as PrismaMhciPrereq,
  LuUsersUsertype as PrismaLuUsersUsertype,
} from "@prisma/client";

export class MhciPrereqsConversationCommentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.MhciPrereqsConversationCommentCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.MhciPrereqsConversationCommentCountArgs>
  ): Promise<number> {
    return this.prisma.mhciPrereqsConversationComment.count(args);
  }

  async mhciPrereqsConversationComments<
    T extends Prisma.MhciPrereqsConversationCommentFindManyArgs
  >(
    args: Prisma.SelectSubset<
      T,
      Prisma.MhciPrereqsConversationCommentFindManyArgs
    >
  ): Promise<PrismaMhciPrereqsConversationComment[]> {
    return this.prisma.mhciPrereqsConversationComment.findMany(args);
  }
  async mhciPrereqsConversationComment<
    T extends Prisma.MhciPrereqsConversationCommentFindUniqueArgs
  >(
    args: Prisma.SelectSubset<
      T,
      Prisma.MhciPrereqsConversationCommentFindUniqueArgs
    >
  ): Promise<PrismaMhciPrereqsConversationComment | null> {
    return this.prisma.mhciPrereqsConversationComment.findUnique(args);
  }
  async createMhciPrereqsConversationComment<
    T extends Prisma.MhciPrereqsConversationCommentCreateArgs
  >(
    args: Prisma.SelectSubset<
      T,
      Prisma.MhciPrereqsConversationCommentCreateArgs
    >
  ): Promise<PrismaMhciPrereqsConversationComment> {
    return this.prisma.mhciPrereqsConversationComment.create<T>(args);
  }
  async updateMhciPrereqsConversationComment<
    T extends Prisma.MhciPrereqsConversationCommentUpdateArgs
  >(
    args: Prisma.SelectSubset<
      T,
      Prisma.MhciPrereqsConversationCommentUpdateArgs
    >
  ): Promise<PrismaMhciPrereqsConversationComment> {
    return this.prisma.mhciPrereqsConversationComment.update<T>(args);
  }
  async deleteMhciPrereqsConversationComment<
    T extends Prisma.MhciPrereqsConversationCommentDeleteArgs
  >(
    args: Prisma.SelectSubset<
      T,
      Prisma.MhciPrereqsConversationCommentDeleteArgs
    >
  ): Promise<PrismaMhciPrereqsConversationComment> {
    return this.prisma.mhciPrereqsConversationComment.delete(args);
  }

  async getMhciPrereqs(parentId: number): Promise<PrismaMhciPrereq | null> {
    return this.prisma.mhciPrereqsConversationComment
      .findUnique({
        where: { id: parentId },
      })
      .mhciPrereqs();
  }

  async getLuUsersUsertypes(
    parentId: number
  ): Promise<PrismaLuUsersUsertype | null> {
    return this.prisma.mhciPrereqsConversationComment
      .findUnique({
        where: { id: parentId },
      })
      .luUsersUsertypes();
  }
}
