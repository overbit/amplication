/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProgramTypeService } from "../programType.service";
import { ProgramTypeCreateInput } from "./ProgramTypeCreateInput";
import { ProgramType } from "./ProgramType";
import { ProgramTypeFindManyArgs } from "./ProgramTypeFindManyArgs";
import { ProgramTypeWhereUniqueInput } from "./ProgramTypeWhereUniqueInput";
import { ProgramTypeUpdateInput } from "./ProgramTypeUpdateInput";

export class ProgramTypeControllerBase {
  constructor(protected readonly service: ProgramTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProgramType })
  async createProgramType(
    @common.Body() data: ProgramTypeCreateInput
  ): Promise<ProgramType> {
    return await this.service.createProgramType({
      data: data,
      select: {
        id: true,
        programType: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProgramType] })
  @ApiNestedQuery(ProgramTypeFindManyArgs)
  async programTypes(@common.Req() request: Request): Promise<ProgramType[]> {
    const args = plainToClass(ProgramTypeFindManyArgs, request.query);
    return this.service.programTypes({
      ...args,
      select: {
        id: true,
        programType: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProgramType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async programType(
    @common.Param() params: ProgramTypeWhereUniqueInput
  ): Promise<ProgramType | null> {
    const result = await this.service.programType({
      where: params,
      select: {
        id: true,
        programType: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProgramType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProgramType(
    @common.Param() params: ProgramTypeWhereUniqueInput,
    @common.Body() data: ProgramTypeUpdateInput
  ): Promise<ProgramType | null> {
    try {
      return await this.service.updateProgramType({
        where: params,
        data: data,
        select: {
          id: true,
          programType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProgramType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProgramType(
    @common.Param() params: ProgramTypeWhereUniqueInput
  ): Promise<ProgramType | null> {
    try {
      return await this.service.deleteProgramType({
        where: params,
        select: {
          id: true,
          programType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
