/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateLanguageAssessmentRatingArgs } from "./CreateLanguageAssessmentRatingArgs";
import { UpdateLanguageAssessmentRatingArgs } from "./UpdateLanguageAssessmentRatingArgs";
import { DeleteLanguageAssessmentRatingArgs } from "./DeleteLanguageAssessmentRatingArgs";
import { LanguageAssessmentRatingCountArgs } from "./LanguageAssessmentRatingCountArgs";
import { LanguageAssessmentRatingFindManyArgs } from "./LanguageAssessmentRatingFindManyArgs";
import { LanguageAssessmentRatingFindUniqueArgs } from "./LanguageAssessmentRatingFindUniqueArgs";
import { LanguageAssessmentRating } from "./LanguageAssessmentRating";
import { LanguageAssessmentRatingService } from "../languageAssessmentRating.service";
@graphql.Resolver(() => LanguageAssessmentRating)
export class LanguageAssessmentRatingResolverBase {
  constructor(protected readonly service: LanguageAssessmentRatingService) {}

  async _languageAssessmentRatingsMeta(
    @graphql.Args() args: LanguageAssessmentRatingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LanguageAssessmentRating])
  async languageAssessmentRatings(
    @graphql.Args() args: LanguageAssessmentRatingFindManyArgs
  ): Promise<LanguageAssessmentRating[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => LanguageAssessmentRating, { nullable: true })
  async languageAssessmentRating(
    @graphql.Args() args: LanguageAssessmentRatingFindUniqueArgs
  ): Promise<LanguageAssessmentRating | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LanguageAssessmentRating)
  async createLanguageAssessmentRating(
    @graphql.Args() args: CreateLanguageAssessmentRatingArgs
  ): Promise<LanguageAssessmentRating> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LanguageAssessmentRating)
  async updateLanguageAssessmentRating(
    @graphql.Args() args: UpdateLanguageAssessmentRatingArgs
  ): Promise<LanguageAssessmentRating | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LanguageAssessmentRating)
  async deleteLanguageAssessmentRating(
    @graphql.Args() args: DeleteLanguageAssessmentRatingArgs
  ): Promise<LanguageAssessmentRating | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
