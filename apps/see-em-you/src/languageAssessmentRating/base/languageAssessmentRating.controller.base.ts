/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LanguageAssessmentRatingService } from "../languageAssessmentRating.service";
import { LanguageAssessmentRatingCreateInput } from "./LanguageAssessmentRatingCreateInput";
import { LanguageAssessmentRating } from "./LanguageAssessmentRating";
import { LanguageAssessmentRatingFindManyArgs } from "./LanguageAssessmentRatingFindManyArgs";
import { LanguageAssessmentRatingWhereUniqueInput } from "./LanguageAssessmentRatingWhereUniqueInput";
import { LanguageAssessmentRatingUpdateInput } from "./LanguageAssessmentRatingUpdateInput";

export class LanguageAssessmentRatingControllerBase {
  constructor(protected readonly service: LanguageAssessmentRatingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LanguageAssessmentRating })
  async createLanguageAssessmentRating(
    @common.Body() data: LanguageAssessmentRatingCreateInput
  ): Promise<LanguageAssessmentRating> {
    return await this.service.createLanguageAssessmentRating({
      data: data,
      select: {
        value: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LanguageAssessmentRating] })
  @ApiNestedQuery(LanguageAssessmentRatingFindManyArgs)
  async languageAssessmentRatings(
    @common.Req() request: Request
  ): Promise<LanguageAssessmentRating[]> {
    const args = plainToClass(
      LanguageAssessmentRatingFindManyArgs,
      request.query
    );
    return this.service.languageAssessmentRatings({
      ...args,
      select: {
        value: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LanguageAssessmentRating })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async languageAssessmentRating(
    @common.Param() params: LanguageAssessmentRatingWhereUniqueInput
  ): Promise<LanguageAssessmentRating | null> {
    const result = await this.service.languageAssessmentRating({
      where: params,
      select: {
        value: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LanguageAssessmentRating })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLanguageAssessmentRating(
    @common.Param() params: LanguageAssessmentRatingWhereUniqueInput,
    @common.Body() data: LanguageAssessmentRatingUpdateInput
  ): Promise<LanguageAssessmentRating | null> {
    try {
      return await this.service.updateLanguageAssessmentRating({
        where: params,
        data: data,
        select: {
          value: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LanguageAssessmentRating })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLanguageAssessmentRating(
    @common.Param() params: LanguageAssessmentRatingWhereUniqueInput
  ): Promise<LanguageAssessmentRating | null> {
    try {
      return await this.service.deleteLanguageAssessmentRating({
        where: params,
        select: {
          value: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
