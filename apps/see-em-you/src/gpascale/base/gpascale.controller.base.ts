/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GpascaleService } from "../gpascale.service";
import { GpascaleCreateInput } from "./GpascaleCreateInput";
import { Gpascale } from "./Gpascale";
import { GpascaleFindManyArgs } from "./GpascaleFindManyArgs";
import { GpascaleWhereUniqueInput } from "./GpascaleWhereUniqueInput";
import { GpascaleUpdateInput } from "./GpascaleUpdateInput";

export class GpascaleControllerBase {
  constructor(protected readonly service: GpascaleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Gpascale })
  async createGpascale(
    @common.Body() data: GpascaleCreateInput
  ): Promise<Gpascale> {
    return await this.service.createGpascale({
      data: data,
      select: {
        formula: true,
        id: true,
        name: true,
        sortorder: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Gpascale] })
  @ApiNestedQuery(GpascaleFindManyArgs)
  async gpascales(@common.Req() request: Request): Promise<Gpascale[]> {
    const args = plainToClass(GpascaleFindManyArgs, request.query);
    return this.service.gpascales({
      ...args,
      select: {
        formula: true,
        id: true,
        name: true,
        sortorder: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Gpascale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async gpascale(
    @common.Param() params: GpascaleWhereUniqueInput
  ): Promise<Gpascale | null> {
    const result = await this.service.gpascale({
      where: params,
      select: {
        formula: true,
        id: true,
        name: true,
        sortorder: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Gpascale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGpascale(
    @common.Param() params: GpascaleWhereUniqueInput,
    @common.Body() data: GpascaleUpdateInput
  ): Promise<Gpascale | null> {
    try {
      return await this.service.updateGpascale({
        where: params,
        data: data,
        select: {
          formula: true,
          id: true,
          name: true,
          sortorder: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Gpascale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGpascale(
    @common.Param() params: GpascaleWhereUniqueInput
  ): Promise<Gpascale | null> {
    try {
      return await this.service.deleteGpascale({
        where: params,
        select: {
          formula: true,
          id: true,
          name: true,
          sortorder: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
