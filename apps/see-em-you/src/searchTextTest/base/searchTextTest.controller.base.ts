/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SearchTextTestService } from "../searchTextTest.service";
import { SearchTextTestCreateInput } from "./SearchTextTestCreateInput";
import { SearchTextTest } from "./SearchTextTest";
import { SearchTextTestFindManyArgs } from "./SearchTextTestFindManyArgs";
import { SearchTextTestWhereUniqueInput } from "./SearchTextTestWhereUniqueInput";
import { SearchTextTestUpdateInput } from "./SearchTextTestUpdateInput";

export class SearchTextTestControllerBase {
  constructor(protected readonly service: SearchTextTestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SearchTextTest })
  async createSearchTextTest(
    @common.Body() data: SearchTextTestCreateInput
  ): Promise<SearchTextTest> {
    return await this.service.createSearchTextTest({
      data: data,
      select: {
        applicationId: true,
        guid: true,
        applicationText: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SearchTextTest] })
  @ApiNestedQuery(SearchTextTestFindManyArgs)
  async searchTextTests(
    @common.Req() request: Request
  ): Promise<SearchTextTest[]> {
    const args = plainToClass(SearchTextTestFindManyArgs, request.query);
    return this.service.searchTextTests({
      ...args,
      select: {
        applicationId: true,
        guid: true,
        applicationText: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SearchTextTest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async searchTextTest(
    @common.Param() params: SearchTextTestWhereUniqueInput
  ): Promise<SearchTextTest | null> {
    const result = await this.service.searchTextTest({
      where: params,
      select: {
        applicationId: true,
        guid: true,
        applicationText: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SearchTextTest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSearchTextTest(
    @common.Param() params: SearchTextTestWhereUniqueInput,
    @common.Body() data: SearchTextTestUpdateInput
  ): Promise<SearchTextTest | null> {
    try {
      return await this.service.updateSearchTextTest({
        where: params,
        data: data,
        select: {
          applicationId: true,
          guid: true,
          applicationText: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SearchTextTest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSearchTextTest(
    @common.Param() params: SearchTextTestWhereUniqueInput
  ): Promise<SearchTextTest | null> {
    try {
      return await this.service.deleteSearchTextTest({
        where: params,
        select: {
          applicationId: true,
          guid: true,
          applicationText: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
