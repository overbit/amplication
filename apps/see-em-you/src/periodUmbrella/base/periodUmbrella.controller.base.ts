/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PeriodUmbrellaService } from "../periodUmbrella.service";
import { PeriodUmbrellaCreateInput } from "./PeriodUmbrellaCreateInput";
import { PeriodUmbrella } from "./PeriodUmbrella";
import { PeriodUmbrellaFindManyArgs } from "./PeriodUmbrellaFindManyArgs";
import { PeriodUmbrellaWhereUniqueInput } from "./PeriodUmbrellaWhereUniqueInput";
import { PeriodUmbrellaUpdateInput } from "./PeriodUmbrellaUpdateInput";

export class PeriodUmbrellaControllerBase {
  constructor(protected readonly service: PeriodUmbrellaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PeriodUmbrella })
  async createPeriodUmbrella(
    @common.Body() data: PeriodUmbrellaCreateInput
  ): Promise<PeriodUmbrella> {
    return await this.service.createPeriodUmbrella({
      data: data,
      select: {
        admissionTerm: true,
        admissionYear: true,
        higherFeeDate: true,
        umbrellaName: true,
        lastPaymentDate: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PeriodUmbrella] })
  @ApiNestedQuery(PeriodUmbrellaFindManyArgs)
  async periodUmbrellas(
    @common.Req() request: Request
  ): Promise<PeriodUmbrella[]> {
    const args = plainToClass(PeriodUmbrellaFindManyArgs, request.query);
    return this.service.periodUmbrellas({
      ...args,
      select: {
        admissionTerm: true,
        admissionYear: true,
        higherFeeDate: true,
        umbrellaName: true,
        lastPaymentDate: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PeriodUmbrella })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async periodUmbrella(
    @common.Param() params: PeriodUmbrellaWhereUniqueInput
  ): Promise<PeriodUmbrella | null> {
    const result = await this.service.periodUmbrella({
      where: params,
      select: {
        admissionTerm: true,
        admissionYear: true,
        higherFeeDate: true,
        umbrellaName: true,
        lastPaymentDate: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PeriodUmbrella })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePeriodUmbrella(
    @common.Param() params: PeriodUmbrellaWhereUniqueInput,
    @common.Body() data: PeriodUmbrellaUpdateInput
  ): Promise<PeriodUmbrella | null> {
    try {
      return await this.service.updatePeriodUmbrella({
        where: params,
        data: data,
        select: {
          admissionTerm: true,
          admissionYear: true,
          higherFeeDate: true,
          umbrellaName: true,
          lastPaymentDate: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PeriodUmbrella })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePeriodUmbrella(
    @common.Param() params: PeriodUmbrellaWhereUniqueInput
  ): Promise<PeriodUmbrella | null> {
    try {
      return await this.service.deletePeriodUmbrella({
        where: params,
        select: {
          admissionTerm: true,
          admissionYear: true,
          higherFeeDate: true,
          umbrellaName: true,
          lastPaymentDate: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
