/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PeriodUmbrella as PrismaPeriodUmbrella } from "@prisma/client";

export class PeriodUmbrellaServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.PeriodUmbrellaCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.PeriodUmbrellaCountArgs>
  ): Promise<number> {
    return this.prisma.periodUmbrella.count(args);
  }

  async periodUmbrellas<T extends Prisma.PeriodUmbrellaFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PeriodUmbrellaFindManyArgs>
  ): Promise<PrismaPeriodUmbrella[]> {
    return this.prisma.periodUmbrella.findMany(args);
  }
  async periodUmbrella<T extends Prisma.PeriodUmbrellaFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PeriodUmbrellaFindUniqueArgs>
  ): Promise<PrismaPeriodUmbrella | null> {
    return this.prisma.periodUmbrella.findUnique(args);
  }
  async createPeriodUmbrella<T extends Prisma.PeriodUmbrellaCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PeriodUmbrellaCreateArgs>
  ): Promise<PrismaPeriodUmbrella> {
    return this.prisma.periodUmbrella.create<T>(args);
  }
  async updatePeriodUmbrella<T extends Prisma.PeriodUmbrellaUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PeriodUmbrellaUpdateArgs>
  ): Promise<PrismaPeriodUmbrella> {
    return this.prisma.periodUmbrella.update<T>(args);
  }
  async deletePeriodUmbrella<T extends Prisma.PeriodUmbrellaDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PeriodUmbrellaDeleteArgs>
  ): Promise<PrismaPeriodUmbrella> {
    return this.prisma.periodUmbrella.delete(args);
  }
}
