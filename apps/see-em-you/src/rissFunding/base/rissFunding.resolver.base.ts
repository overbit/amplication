/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RissFunding } from "./RissFunding";
import { RissFundingCountArgs } from "./RissFundingCountArgs";
import { RissFundingFindManyArgs } from "./RissFundingFindManyArgs";
import { RissFundingFindUniqueArgs } from "./RissFundingFindUniqueArgs";
import { CreateRissFundingArgs } from "./CreateRissFundingArgs";
import { UpdateRissFundingArgs } from "./UpdateRissFundingArgs";
import { DeleteRissFundingArgs } from "./DeleteRissFundingArgs";
import { Application } from "../../application/base/Application";
import { RissFundingService } from "../rissFunding.service";
@graphql.Resolver(() => RissFunding)
export class RissFundingResolverBase {
  constructor(protected readonly service: RissFundingService) {}

  async _rissFundingsMeta(
    @graphql.Args() args: RissFundingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RissFunding])
  async rissFundings(
    @graphql.Args() args: RissFundingFindManyArgs
  ): Promise<RissFunding[]> {
    return this.service.rissFundings(args);
  }

  @graphql.Query(() => RissFunding, { nullable: true })
  async rissFunding(
    @graphql.Args() args: RissFundingFindUniqueArgs
  ): Promise<RissFunding | null> {
    const result = await this.service.rissFunding(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RissFunding)
  async createRissFunding(
    @graphql.Args() args: CreateRissFundingArgs
  ): Promise<RissFunding> {
    return await this.service.createRissFunding({
      ...args,
      data: {
        ...args.data,

        application: {
          connect: args.data.application,
        },
      },
    });
  }

  @graphql.Mutation(() => RissFunding)
  async updateRissFunding(
    @graphql.Args() args: UpdateRissFundingArgs
  ): Promise<RissFunding | null> {
    try {
      return await this.service.updateRissFunding({
        ...args,
        data: {
          ...args.data,

          application: {
            connect: args.data.application,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RissFunding)
  async deleteRissFunding(
    @graphql.Args() args: DeleteRissFundingArgs
  ): Promise<RissFunding | null> {
    try {
      return await this.service.deleteRissFunding(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Application, {
    nullable: true,
    name: "application",
  })
  async getApplication(
    @graphql.Parent() parent: RissFunding
  ): Promise<Application | null> {
    const result = await this.service.getApplication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
