/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RissFundingService } from "../rissFunding.service";
import { RissFundingCreateInput } from "./RissFundingCreateInput";
import { RissFunding } from "./RissFunding";
import { RissFundingFindManyArgs } from "./RissFundingFindManyArgs";
import { RissFundingWhereUniqueInput } from "./RissFundingWhereUniqueInput";
import { RissFundingUpdateInput } from "./RissFundingUpdateInput";

export class RissFundingControllerBase {
  constructor(protected readonly service: RissFundingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RissFunding })
  async createRissFunding(
    @common.Body() data: RissFundingCreateInput
  ): Promise<RissFunding> {
    return await this.service.createRissFunding({
      data: {
        ...data,

        application: {
          connect: data.application,
        },
      },
      select: {
        externalFunding: true,
        externalSource: true,
        externalAmount: true,
        reuScholarship: true,
        directFunding: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RissFunding] })
  @ApiNestedQuery(RissFundingFindManyArgs)
  async rissFundings(@common.Req() request: Request): Promise<RissFunding[]> {
    const args = plainToClass(RissFundingFindManyArgs, request.query);
    return this.service.rissFundings({
      ...args,
      select: {
        externalFunding: true,
        externalSource: true,
        externalAmount: true,
        reuScholarship: true,
        directFunding: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RissFunding })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async rissFunding(
    @common.Param() params: RissFundingWhereUniqueInput
  ): Promise<RissFunding | null> {
    const result = await this.service.rissFunding({
      where: params,
      select: {
        externalFunding: true,
        externalSource: true,
        externalAmount: true,
        reuScholarship: true,
        directFunding: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RissFunding })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRissFunding(
    @common.Param() params: RissFundingWhereUniqueInput,
    @common.Body() data: RissFundingUpdateInput
  ): Promise<RissFunding | null> {
    try {
      return await this.service.updateRissFunding({
        where: params,
        data: {
          ...data,

          application: {
            connect: data.application,
          },
        },
        select: {
          externalFunding: true,
          externalSource: true,
          externalAmount: true,
          reuScholarship: true,
          directFunding: true,

          application: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RissFunding })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRissFunding(
    @common.Param() params: RissFundingWhereUniqueInput
  ): Promise<RissFunding | null> {
    try {
      return await this.service.deleteRissFunding({
        where: params,
        select: {
          externalFunding: true,
          externalSource: true,
          externalAmount: true,
          reuScholarship: true,
          directFunding: true,

          application: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
