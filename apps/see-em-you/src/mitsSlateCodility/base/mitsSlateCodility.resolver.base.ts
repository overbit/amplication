/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MitsSlateCodility } from "./MitsSlateCodility";
import { MitsSlateCodilityCountArgs } from "./MitsSlateCodilityCountArgs";
import { MitsSlateCodilityFindManyArgs } from "./MitsSlateCodilityFindManyArgs";
import { MitsSlateCodilityFindUniqueArgs } from "./MitsSlateCodilityFindUniqueArgs";
import { CreateMitsSlateCodilityArgs } from "./CreateMitsSlateCodilityArgs";
import { UpdateMitsSlateCodilityArgs } from "./UpdateMitsSlateCodilityArgs";
import { DeleteMitsSlateCodilityArgs } from "./DeleteMitsSlateCodilityArgs";
import { MitsSlateCodilityService } from "../mitsSlateCodility.service";
@graphql.Resolver(() => MitsSlateCodility)
export class MitsSlateCodilityResolverBase {
  constructor(protected readonly service: MitsSlateCodilityService) {}

  async _mitsSlateCodilitiesMeta(
    @graphql.Args() args: MitsSlateCodilityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MitsSlateCodility])
  async mitsSlateCodilities(
    @graphql.Args() args: MitsSlateCodilityFindManyArgs
  ): Promise<MitsSlateCodility[]> {
    return this.service.mitsSlateCodilities(args);
  }

  @graphql.Query(() => MitsSlateCodility, { nullable: true })
  async mitsSlateCodility(
    @graphql.Args() args: MitsSlateCodilityFindUniqueArgs
  ): Promise<MitsSlateCodility | null> {
    const result = await this.service.mitsSlateCodility(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MitsSlateCodility)
  async createMitsSlateCodility(
    @graphql.Args() args: CreateMitsSlateCodilityArgs
  ): Promise<MitsSlateCodility> {
    return await this.service.createMitsSlateCodility({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MitsSlateCodility)
  async updateMitsSlateCodility(
    @graphql.Args() args: UpdateMitsSlateCodilityArgs
  ): Promise<MitsSlateCodility | null> {
    try {
      return await this.service.updateMitsSlateCodility({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MitsSlateCodility)
  async deleteMitsSlateCodility(
    @graphql.Args() args: DeleteMitsSlateCodilityArgs
  ): Promise<MitsSlateCodility | null> {
    try {
      return await this.service.deleteMitsSlateCodility(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
