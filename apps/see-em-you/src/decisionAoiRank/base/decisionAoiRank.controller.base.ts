/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DecisionAoiRankService } from "../decisionAoiRank.service";
import { DecisionAoiRankCreateInput } from "./DecisionAoiRankCreateInput";
import { DecisionAoiRank } from "./DecisionAoiRank";
import { DecisionAoiRankFindManyArgs } from "./DecisionAoiRankFindManyArgs";
import { DecisionAoiRankWhereUniqueInput } from "./DecisionAoiRankWhereUniqueInput";
import { DecisionAoiRankUpdateInput } from "./DecisionAoiRankUpdateInput";

export class DecisionAoiRankControllerBase {
  constructor(protected readonly service: DecisionAoiRankService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DecisionAoiRank })
  async createDecisionAoiRank(
    @common.Body() data: DecisionAoiRankCreateInput
  ): Promise<DecisionAoiRank> {
    return await this.service.createDecisionAoiRank({
      data: data,
      select: {
        decision: true,
        departmentId: true,
        id: true,
        interestId: true,
        luUsersUsertypesId: true,
        periodId: true,
        ranking: true,
        timestamp: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DecisionAoiRank] })
  @ApiNestedQuery(DecisionAoiRankFindManyArgs)
  async decisionAoiRanks(
    @common.Req() request: Request
  ): Promise<DecisionAoiRank[]> {
    const args = plainToClass(DecisionAoiRankFindManyArgs, request.query);
    return this.service.decisionAoiRanks({
      ...args,
      select: {
        decision: true,
        departmentId: true,
        id: true,
        interestId: true,
        luUsersUsertypesId: true,
        periodId: true,
        ranking: true,
        timestamp: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DecisionAoiRank })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async decisionAoiRank(
    @common.Param() params: DecisionAoiRankWhereUniqueInput
  ): Promise<DecisionAoiRank | null> {
    const result = await this.service.decisionAoiRank({
      where: params,
      select: {
        decision: true,
        departmentId: true,
        id: true,
        interestId: true,
        luUsersUsertypesId: true,
        periodId: true,
        ranking: true,
        timestamp: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DecisionAoiRank })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDecisionAoiRank(
    @common.Param() params: DecisionAoiRankWhereUniqueInput,
    @common.Body() data: DecisionAoiRankUpdateInput
  ): Promise<DecisionAoiRank | null> {
    try {
      return await this.service.updateDecisionAoiRank({
        where: params,
        data: data,
        select: {
          decision: true,
          departmentId: true,
          id: true,
          interestId: true,
          luUsersUsertypesId: true,
          periodId: true,
          ranking: true,
          timestamp: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DecisionAoiRank })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDecisionAoiRank(
    @common.Param() params: DecisionAoiRankWhereUniqueInput
  ): Promise<DecisionAoiRank | null> {
    try {
      return await this.service.deleteDecisionAoiRank({
        where: params,
        select: {
          decision: true,
          departmentId: true,
          id: true,
          interestId: true,
          luUsersUsertypesId: true,
          periodId: true,
          ranking: true,
          timestamp: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
