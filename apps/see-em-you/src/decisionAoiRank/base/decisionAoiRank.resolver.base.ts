/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateDecisionAoiRankArgs } from "./CreateDecisionAoiRankArgs";
import { UpdateDecisionAoiRankArgs } from "./UpdateDecisionAoiRankArgs";
import { DeleteDecisionAoiRankArgs } from "./DeleteDecisionAoiRankArgs";
import { DecisionAoiRankCountArgs } from "./DecisionAoiRankCountArgs";
import { DecisionAoiRankFindManyArgs } from "./DecisionAoiRankFindManyArgs";
import { DecisionAoiRankFindUniqueArgs } from "./DecisionAoiRankFindUniqueArgs";
import { DecisionAoiRank } from "./DecisionAoiRank";
import { DecisionAoiRankService } from "../decisionAoiRank.service";
@graphql.Resolver(() => DecisionAoiRank)
export class DecisionAoiRankResolverBase {
  constructor(protected readonly service: DecisionAoiRankService) {}

  async _decisionAoiRanksMeta(
    @graphql.Args() args: DecisionAoiRankCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DecisionAoiRank])
  async decisionAoiRanks(
    @graphql.Args() args: DecisionAoiRankFindManyArgs
  ): Promise<DecisionAoiRank[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => DecisionAoiRank, { nullable: true })
  async decisionAoiRank(
    @graphql.Args() args: DecisionAoiRankFindUniqueArgs
  ): Promise<DecisionAoiRank | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DecisionAoiRank)
  async createDecisionAoiRank(
    @graphql.Args() args: CreateDecisionAoiRankArgs
  ): Promise<DecisionAoiRank> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DecisionAoiRank)
  async updateDecisionAoiRank(
    @graphql.Args() args: UpdateDecisionAoiRankArgs
  ): Promise<DecisionAoiRank | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DecisionAoiRank)
  async deleteDecisionAoiRank(
    @graphql.Args() args: DeleteDecisionAoiRankArgs
  ): Promise<DecisionAoiRank | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
