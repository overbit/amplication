/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProgramsApplicationreqService } from "../programsApplicationreq.service";
import { ProgramsApplicationreqCreateInput } from "./ProgramsApplicationreqCreateInput";
import { ProgramsApplicationreq } from "./ProgramsApplicationreq";
import { ProgramsApplicationreqFindManyArgs } from "./ProgramsApplicationreqFindManyArgs";
import { ProgramsApplicationreqWhereUniqueInput } from "./ProgramsApplicationreqWhereUniqueInput";
import { ProgramsApplicationreqUpdateInput } from "./ProgramsApplicationreqUpdateInput";

export class ProgramsApplicationreqControllerBase {
  constructor(protected readonly service: ProgramsApplicationreqService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProgramsApplicationreq })
  async createProgramsApplicationreq(
    @common.Body() data: ProgramsApplicationreqCreateInput
  ): Promise<ProgramsApplicationreq> {
    return await this.service.createProgramsApplicationreq({
      data: {
        ...data,

        applicationreqs: {
          connect: data.applicationreqs,
        },

        programs: {
          connect: data.programs,
        },
      },
      select: {
        applicationreqs: {
          select: {
            id: true,
          },
        },

        id: true,

        programs: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProgramsApplicationreq] })
  @ApiNestedQuery(ProgramsApplicationreqFindManyArgs)
  async programsApplicationreqs(
    @common.Req() request: Request
  ): Promise<ProgramsApplicationreq[]> {
    const args = plainToClass(
      ProgramsApplicationreqFindManyArgs,
      request.query
    );
    return this.service.programsApplicationreqs({
      ...args,
      select: {
        applicationreqs: {
          select: {
            id: true,
          },
        },

        id: true,

        programs: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProgramsApplicationreq })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async programsApplicationreq(
    @common.Param() params: ProgramsApplicationreqWhereUniqueInput
  ): Promise<ProgramsApplicationreq | null> {
    const result = await this.service.programsApplicationreq({
      where: params,
      select: {
        applicationreqs: {
          select: {
            id: true,
          },
        },

        id: true,

        programs: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProgramsApplicationreq })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProgramsApplicationreq(
    @common.Param() params: ProgramsApplicationreqWhereUniqueInput,
    @common.Body() data: ProgramsApplicationreqUpdateInput
  ): Promise<ProgramsApplicationreq | null> {
    try {
      return await this.service.updateProgramsApplicationreq({
        where: params,
        data: {
          ...data,

          applicationreqs: {
            connect: data.applicationreqs,
          },

          programs: {
            connect: data.programs,
          },
        },
        select: {
          applicationreqs: {
            select: {
              id: true,
            },
          },

          id: true,

          programs: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProgramsApplicationreq })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProgramsApplicationreq(
    @common.Param() params: ProgramsApplicationreqWhereUniqueInput
  ): Promise<ProgramsApplicationreq | null> {
    try {
      return await this.service.deleteProgramsApplicationreq({
        where: params,
        select: {
          applicationreqs: {
            select: {
              id: true,
            },
          },

          id: true,

          programs: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
