/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ProgramsApplicationreq as PrismaProgramsApplicationreq,
  ProgramModel as PrismaProgramModel,
  Applicationreq as PrismaApplicationreq,
} from "@prisma/client";

export class ProgramsApplicationreqServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ProgramsApplicationreqCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProgramsApplicationreqCountArgs>
  ): Promise<number> {
    return this.prisma.programsApplicationreq.count(args);
  }

  async programsApplicationreqs<
    T extends Prisma.ProgramsApplicationreqFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ProgramsApplicationreqFindManyArgs>
  ): Promise<PrismaProgramsApplicationreq[]> {
    return this.prisma.programsApplicationreq.findMany(args);
  }
  async programsApplicationreq<
    T extends Prisma.ProgramsApplicationreqFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ProgramsApplicationreqFindUniqueArgs>
  ): Promise<PrismaProgramsApplicationreq | null> {
    return this.prisma.programsApplicationreq.findUnique(args);
  }
  async createProgramsApplicationreq<
    T extends Prisma.ProgramsApplicationreqCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ProgramsApplicationreqCreateArgs>
  ): Promise<PrismaProgramsApplicationreq> {
    return this.prisma.programsApplicationreq.create<T>(args);
  }
  async updateProgramsApplicationreq<
    T extends Prisma.ProgramsApplicationreqUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ProgramsApplicationreqUpdateArgs>
  ): Promise<PrismaProgramsApplicationreq> {
    return this.prisma.programsApplicationreq.update<T>(args);
  }
  async deleteProgramsApplicationreq<
    T extends Prisma.ProgramsApplicationreqDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ProgramsApplicationreqDeleteArgs>
  ): Promise<PrismaProgramsApplicationreq> {
    return this.prisma.programsApplicationreq.delete(args);
  }

  async getPrograms(parentId: number): Promise<PrismaProgramModel | null> {
    return this.prisma.programsApplicationreq
      .findUnique({
        where: { id: parentId },
      })
      .programs();
  }

  async getApplicationreqs(
    parentId: number
  ): Promise<PrismaApplicationreq | null> {
    return this.prisma.programsApplicationreq
      .findUnique({
        where: { id: parentId },
      })
      .applicationreqs();
  }
}
