/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UnitPeriod } from "./UnitPeriod";
import { UnitPeriodCountArgs } from "./UnitPeriodCountArgs";
import { UnitPeriodFindManyArgs } from "./UnitPeriodFindManyArgs";
import { UnitPeriodFindUniqueArgs } from "./UnitPeriodFindUniqueArgs";
import { CreateUnitPeriodArgs } from "./CreateUnitPeriodArgs";
import { UpdateUnitPeriodArgs } from "./UpdateUnitPeriodArgs";
import { DeleteUnitPeriodArgs } from "./DeleteUnitPeriodArgs";
import { UnitPeriodService } from "../unitPeriod.service";
@graphql.Resolver(() => UnitPeriod)
export class UnitPeriodResolverBase {
  constructor(protected readonly service: UnitPeriodService) {}

  async _unitPeriodsMeta(
    @graphql.Args() args: UnitPeriodCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UnitPeriod])
  async unitPeriods(
    @graphql.Args() args: UnitPeriodFindManyArgs
  ): Promise<UnitPeriod[]> {
    return this.service.unitPeriods(args);
  }

  @graphql.Query(() => UnitPeriod, { nullable: true })
  async unitPeriod(
    @graphql.Args() args: UnitPeriodFindUniqueArgs
  ): Promise<UnitPeriod | null> {
    const result = await this.service.unitPeriod(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UnitPeriod)
  async createUnitPeriod(
    @graphql.Args() args: CreateUnitPeriodArgs
  ): Promise<UnitPeriod> {
    return await this.service.createUnitPeriod({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UnitPeriod)
  async updateUnitPeriod(
    @graphql.Args() args: UpdateUnitPeriodArgs
  ): Promise<UnitPeriod | null> {
    try {
      return await this.service.updateUnitPeriod({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UnitPeriod)
  async deleteUnitPeriod(
    @graphql.Args() args: DeleteUnitPeriodArgs
  ): Promise<UnitPeriod | null> {
    try {
      return await this.service.deleteUnitPeriod(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
