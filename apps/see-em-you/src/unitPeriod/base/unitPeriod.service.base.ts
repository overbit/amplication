/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, UnitPeriod as PrismaUnitPeriod } from "@prisma/client";

export class UnitPeriodServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.UnitPeriodCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.UnitPeriodCountArgs>
  ): Promise<number> {
    return this.prisma.unitPeriod.count(args);
  }

  async unitPeriods<T extends Prisma.UnitPeriodFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UnitPeriodFindManyArgs>
  ): Promise<PrismaUnitPeriod[]> {
    return this.prisma.unitPeriod.findMany(args);
  }
  async unitPeriod<T extends Prisma.UnitPeriodFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UnitPeriodFindUniqueArgs>
  ): Promise<PrismaUnitPeriod | null> {
    return this.prisma.unitPeriod.findUnique(args);
  }
  async createUnitPeriod<T extends Prisma.UnitPeriodCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UnitPeriodCreateArgs>
  ): Promise<PrismaUnitPeriod> {
    return this.prisma.unitPeriod.create<T>(args);
  }
  async updateUnitPeriod<T extends Prisma.UnitPeriodUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UnitPeriodUpdateArgs>
  ): Promise<PrismaUnitPeriod> {
    return this.prisma.unitPeriod.update<T>(args);
  }
  async deleteUnitPeriod<T extends Prisma.UnitPeriodDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UnitPeriodDeleteArgs>
  ): Promise<PrismaUnitPeriod> {
    return this.prisma.unitPeriod.delete(args);
  }
}
