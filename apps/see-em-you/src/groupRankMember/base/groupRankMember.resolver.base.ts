/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateGroupRankMemberArgs } from "./CreateGroupRankMemberArgs";
import { UpdateGroupRankMemberArgs } from "./UpdateGroupRankMemberArgs";
import { DeleteGroupRankMemberArgs } from "./DeleteGroupRankMemberArgs";
import { GroupRankMemberCountArgs } from "./GroupRankMemberCountArgs";
import { GroupRankMemberFindManyArgs } from "./GroupRankMemberFindManyArgs";
import { GroupRankMemberFindUniqueArgs } from "./GroupRankMemberFindUniqueArgs";
import { GroupRankMember } from "./GroupRankMember";
import { GroupRankMemberService } from "../groupRankMember.service";
@graphql.Resolver(() => GroupRankMember)
export class GroupRankMemberResolverBase {
  constructor(protected readonly service: GroupRankMemberService) {}

  async _groupRankMembersMeta(
    @graphql.Args() args: GroupRankMemberCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GroupRankMember])
  async groupRankMembers(
    @graphql.Args() args: GroupRankMemberFindManyArgs
  ): Promise<GroupRankMember[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => GroupRankMember, { nullable: true })
  async groupRankMember(
    @graphql.Args() args: GroupRankMemberFindUniqueArgs
  ): Promise<GroupRankMember | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GroupRankMember)
  async createGroupRankMember(
    @graphql.Args() args: CreateGroupRankMemberArgs
  ): Promise<GroupRankMember> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => GroupRankMember)
  async updateGroupRankMember(
    @graphql.Args() args: UpdateGroupRankMemberArgs
  ): Promise<GroupRankMember | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GroupRankMember)
  async deleteGroupRankMember(
    @graphql.Args() args: DeleteGroupRankMemberArgs
  ): Promise<GroupRankMember | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
