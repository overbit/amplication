/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GroupRankMemberService } from "../groupRankMember.service";
import { GroupRankMemberCreateInput } from "./GroupRankMemberCreateInput";
import { GroupRankMember } from "./GroupRankMember";
import { GroupRankMemberFindManyArgs } from "./GroupRankMemberFindManyArgs";
import { GroupRankMemberWhereUniqueInput } from "./GroupRankMemberWhereUniqueInput";
import { GroupRankMemberUpdateInput } from "./GroupRankMemberUpdateInput";

export class GroupRankMemberControllerBase {
  constructor(protected readonly service: GroupRankMemberService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GroupRankMember })
  async createGroupRankMember(
    @common.Body() data: GroupRankMemberCreateInput
  ): Promise<GroupRankMember> {
    return await this.service.createGroupRankMember({
      data: data,
      select: {
        groupId: true,
        round: true,
        periodId: true,
        applicationId: true,
        luUsersUsertypesId: true,
        grank: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GroupRankMember] })
  @ApiNestedQuery(GroupRankMemberFindManyArgs)
  async groupRankMembers(
    @common.Req() request: Request
  ): Promise<GroupRankMember[]> {
    const args = plainToClass(GroupRankMemberFindManyArgs, request.query);
    return this.service.groupRankMembers({
      ...args,
      select: {
        groupId: true,
        round: true,
        periodId: true,
        applicationId: true,
        luUsersUsertypesId: true,
        grank: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GroupRankMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async groupRankMember(
    @common.Param() params: GroupRankMemberWhereUniqueInput
  ): Promise<GroupRankMember | null> {
    const result = await this.service.groupRankMember({
      where: params,
      select: {
        groupId: true,
        round: true,
        periodId: true,
        applicationId: true,
        luUsersUsertypesId: true,
        grank: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GroupRankMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGroupRankMember(
    @common.Param() params: GroupRankMemberWhereUniqueInput,
    @common.Body() data: GroupRankMemberUpdateInput
  ): Promise<GroupRankMember | null> {
    try {
      return await this.service.updateGroupRankMember({
        where: params,
        data: data,
        select: {
          groupId: true,
          round: true,
          periodId: true,
          applicationId: true,
          luUsersUsertypesId: true,
          grank: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GroupRankMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGroupRankMember(
    @common.Param() params: GroupRankMemberWhereUniqueInput
  ): Promise<GroupRankMember | null> {
    try {
      return await this.service.deleteGroupRankMember({
        where: params,
        select: {
          groupId: true,
          round: true,
          periodId: true,
          applicationId: true,
          luUsersUsertypesId: true,
          grank: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
