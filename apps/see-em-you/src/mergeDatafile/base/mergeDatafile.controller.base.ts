/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MergeDatafileService } from "../mergeDatafile.service";
import { MergeDatafileCreateInput } from "./MergeDatafileCreateInput";
import { MergeDatafile } from "./MergeDatafile";
import { MergeDatafileFindManyArgs } from "./MergeDatafileFindManyArgs";
import { MergeDatafileWhereUniqueInput } from "./MergeDatafileWhereUniqueInput";
import { MergeDatafileUpdateInput } from "./MergeDatafileUpdateInput";

export class MergeDatafileControllerBase {
  constructor(protected readonly service: MergeDatafileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MergeDatafile })
  async createMergeDatafile(
    @common.Body() data: MergeDatafileCreateInput
  ): Promise<MergeDatafile> {
    return await this.service.createMergeDatafile({
      data: data,
      select: {
        mergeId: true,
        datafileinfoId: true,
        converted: true,
        convertError: true,
        convertMessage: true,
        mergeFilename: true,
        merged: true,
        mergeError: true,
        mergeMessage: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MergeDatafile] })
  @ApiNestedQuery(MergeDatafileFindManyArgs)
  async mergeDatafiles(
    @common.Req() request: Request
  ): Promise<MergeDatafile[]> {
    const args = plainToClass(MergeDatafileFindManyArgs, request.query);
    return this.service.mergeDatafiles({
      ...args,
      select: {
        mergeId: true,
        datafileinfoId: true,
        converted: true,
        convertError: true,
        convertMessage: true,
        mergeFilename: true,
        merged: true,
        mergeError: true,
        mergeMessage: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MergeDatafile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mergeDatafile(
    @common.Param() params: MergeDatafileWhereUniqueInput
  ): Promise<MergeDatafile | null> {
    const result = await this.service.mergeDatafile({
      where: params,
      select: {
        mergeId: true,
        datafileinfoId: true,
        converted: true,
        convertError: true,
        convertMessage: true,
        mergeFilename: true,
        merged: true,
        mergeError: true,
        mergeMessage: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MergeDatafile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMergeDatafile(
    @common.Param() params: MergeDatafileWhereUniqueInput,
    @common.Body() data: MergeDatafileUpdateInput
  ): Promise<MergeDatafile | null> {
    try {
      return await this.service.updateMergeDatafile({
        where: params,
        data: data,
        select: {
          mergeId: true,
          datafileinfoId: true,
          converted: true,
          convertError: true,
          convertMessage: true,
          mergeFilename: true,
          merged: true,
          mergeError: true,
          mergeMessage: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MergeDatafile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMergeDatafile(
    @common.Param() params: MergeDatafileWhereUniqueInput
  ): Promise<MergeDatafile | null> {
    try {
      return await this.service.deleteMergeDatafile({
        where: params,
        select: {
          mergeId: true,
          datafileinfoId: true,
          converted: true,
          convertError: true,
          convertMessage: true,
          mergeFilename: true,
          merged: true,
          mergeError: true,
          mergeMessage: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
