/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, MergeDatafile as PrismaMergeDatafile } from "@prisma/client";

export class MergeDatafileServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.MergeDatafileCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.MergeDatafileCountArgs>
  ): Promise<number> {
    return this.prisma.mergeDatafile.count(args);
  }

  async mergeDatafiles<T extends Prisma.MergeDatafileFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MergeDatafileFindManyArgs>
  ): Promise<PrismaMergeDatafile[]> {
    return this.prisma.mergeDatafile.findMany(args);
  }
  async mergeDatafile<T extends Prisma.MergeDatafileFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MergeDatafileFindUniqueArgs>
  ): Promise<PrismaMergeDatafile | null> {
    return this.prisma.mergeDatafile.findUnique(args);
  }
  async createMergeDatafile<T extends Prisma.MergeDatafileCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MergeDatafileCreateArgs>
  ): Promise<PrismaMergeDatafile> {
    return this.prisma.mergeDatafile.create<T>(args);
  }
  async updateMergeDatafile<T extends Prisma.MergeDatafileUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MergeDatafileUpdateArgs>
  ): Promise<PrismaMergeDatafile> {
    return this.prisma.mergeDatafile.update<T>(args);
  }
  async deleteMergeDatafile<T extends Prisma.MergeDatafileDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MergeDatafileDeleteArgs>
  ): Promise<PrismaMergeDatafile> {
    return this.prisma.mergeDatafile.delete(args);
  }
}
