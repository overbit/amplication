/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WaiverOrgService } from "../waiverOrg.service";
import { WaiverOrgCreateInput } from "./WaiverOrgCreateInput";
import { WaiverOrg } from "./WaiverOrg";
import { WaiverOrgFindManyArgs } from "./WaiverOrgFindManyArgs";
import { WaiverOrgWhereUniqueInput } from "./WaiverOrgWhereUniqueInput";
import { WaiverOrgUpdateInput } from "./WaiverOrgUpdateInput";

export class WaiverOrgControllerBase {
  constructor(protected readonly service: WaiverOrgService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WaiverOrg })
  async createWaiverOrg(
    @common.Body() data: WaiverOrgCreateInput
  ): Promise<WaiverOrg> {
    return await this.service.createWaiverOrg({
      data: data,
      select: {
        name: true,
        active: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WaiverOrg] })
  @ApiNestedQuery(WaiverOrgFindManyArgs)
  async waiverOrgs(@common.Req() request: Request): Promise<WaiverOrg[]> {
    const args = plainToClass(WaiverOrgFindManyArgs, request.query);
    return this.service.waiverOrgs({
      ...args,
      select: {
        name: true,
        active: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WaiverOrg })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async waiverOrg(
    @common.Param() params: WaiverOrgWhereUniqueInput
  ): Promise<WaiverOrg | null> {
    const result = await this.service.waiverOrg({
      where: params,
      select: {
        name: true,
        active: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WaiverOrg })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWaiverOrg(
    @common.Param() params: WaiverOrgWhereUniqueInput,
    @common.Body() data: WaiverOrgUpdateInput
  ): Promise<WaiverOrg | null> {
    try {
      return await this.service.updateWaiverOrg({
        where: params,
        data: data,
        select: {
          name: true,
          active: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WaiverOrg })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWaiverOrg(
    @common.Param() params: WaiverOrgWhereUniqueInput
  ): Promise<WaiverOrg | null> {
    try {
      return await this.service.deleteWaiverOrg({
        where: params,
        select: {
          name: true,
          active: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
