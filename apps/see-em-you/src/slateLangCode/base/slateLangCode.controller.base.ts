/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SlateLangCodeService } from "../slateLangCode.service";
import { SlateLangCodeCreateInput } from "./SlateLangCodeCreateInput";
import { SlateLangCode } from "./SlateLangCode";
import { SlateLangCodeFindManyArgs } from "./SlateLangCodeFindManyArgs";
import { SlateLangCodeWhereUniqueInput } from "./SlateLangCodeWhereUniqueInput";
import { SlateLangCodeUpdateInput } from "./SlateLangCodeUpdateInput";

export class SlateLangCodeControllerBase {
  constructor(protected readonly service: SlateLangCodeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SlateLangCode })
  async createSlateLangCode(
    @common.Body() data: SlateLangCodeCreateInput
  ): Promise<SlateLangCode> {
    return await this.service.createSlateLangCode({
      data: data,
      select: {
        id: true,
        language: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SlateLangCode] })
  @ApiNestedQuery(SlateLangCodeFindManyArgs)
  async slateLangCodes(
    @common.Req() request: Request
  ): Promise<SlateLangCode[]> {
    const args = plainToClass(SlateLangCodeFindManyArgs, request.query);
    return this.service.slateLangCodes({
      ...args,
      select: {
        id: true,
        language: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SlateLangCode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async slateLangCode(
    @common.Param() params: SlateLangCodeWhereUniqueInput
  ): Promise<SlateLangCode | null> {
    const result = await this.service.slateLangCode({
      where: params,
      select: {
        id: true,
        language: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SlateLangCode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSlateLangCode(
    @common.Param() params: SlateLangCodeWhereUniqueInput,
    @common.Body() data: SlateLangCodeUpdateInput
  ): Promise<SlateLangCode | null> {
    try {
      return await this.service.updateSlateLangCode({
        where: params,
        data: data,
        select: {
          id: true,
          language: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SlateLangCode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSlateLangCode(
    @common.Param() params: SlateLangCodeWhereUniqueInput
  ): Promise<SlateLangCode | null> {
    try {
      return await this.service.deleteSlateLangCode({
        where: params,
        select: {
          id: true,
          language: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
