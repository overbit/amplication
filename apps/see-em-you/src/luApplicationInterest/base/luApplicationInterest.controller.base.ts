/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LuApplicationInterestService } from "../luApplicationInterest.service";
import { LuApplicationInterestCreateInput } from "./LuApplicationInterestCreateInput";
import { LuApplicationInterest } from "./LuApplicationInterest";
import { LuApplicationInterestFindManyArgs } from "./LuApplicationInterestFindManyArgs";
import { LuApplicationInterestWhereUniqueInput } from "./LuApplicationInterestWhereUniqueInput";
import { LuApplicationInterestUpdateInput } from "./LuApplicationInterestUpdateInput";

export class LuApplicationInterestControllerBase {
  constructor(protected readonly service: LuApplicationInterestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LuApplicationInterest })
  async createLuApplicationInterest(
    @common.Body() data: LuApplicationInterestCreateInput
  ): Promise<LuApplicationInterest> {
    return await this.service.createLuApplicationInterest({
      data: data,
      select: {
        appProgramId: true,
        interestId: true,
        choice: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LuApplicationInterest] })
  @ApiNestedQuery(LuApplicationInterestFindManyArgs)
  async luApplicationInterests(
    @common.Req() request: Request
  ): Promise<LuApplicationInterest[]> {
    const args = plainToClass(LuApplicationInterestFindManyArgs, request.query);
    return this.service.luApplicationInterests({
      ...args,
      select: {
        appProgramId: true,
        interestId: true,
        choice: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LuApplicationInterest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async luApplicationInterest(
    @common.Param() params: LuApplicationInterestWhereUniqueInput
  ): Promise<LuApplicationInterest | null> {
    const result = await this.service.luApplicationInterest({
      where: params,
      select: {
        appProgramId: true,
        interestId: true,
        choice: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LuApplicationInterest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLuApplicationInterest(
    @common.Param() params: LuApplicationInterestWhereUniqueInput,
    @common.Body() data: LuApplicationInterestUpdateInput
  ): Promise<LuApplicationInterest | null> {
    try {
      return await this.service.updateLuApplicationInterest({
        where: params,
        data: data,
        select: {
          appProgramId: true,
          interestId: true,
          choice: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LuApplicationInterest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLuApplicationInterest(
    @common.Param() params: LuApplicationInterestWhereUniqueInput
  ): Promise<LuApplicationInterest | null> {
    try {
      return await this.service.deleteLuApplicationInterest({
        where: params,
        select: {
          appProgramId: true,
          interestId: true,
          choice: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
