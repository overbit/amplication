/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LuApplicationInterest } from "./LuApplicationInterest";
import { LuApplicationInterestCountArgs } from "./LuApplicationInterestCountArgs";
import { LuApplicationInterestFindManyArgs } from "./LuApplicationInterestFindManyArgs";
import { LuApplicationInterestFindUniqueArgs } from "./LuApplicationInterestFindUniqueArgs";
import { CreateLuApplicationInterestArgs } from "./CreateLuApplicationInterestArgs";
import { UpdateLuApplicationInterestArgs } from "./UpdateLuApplicationInterestArgs";
import { DeleteLuApplicationInterestArgs } from "./DeleteLuApplicationInterestArgs";
import { LuApplicationInterestService } from "../luApplicationInterest.service";
@graphql.Resolver(() => LuApplicationInterest)
export class LuApplicationInterestResolverBase {
  constructor(protected readonly service: LuApplicationInterestService) {}

  async _luApplicationInterestsMeta(
    @graphql.Args() args: LuApplicationInterestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LuApplicationInterest])
  async luApplicationInterests(
    @graphql.Args() args: LuApplicationInterestFindManyArgs
  ): Promise<LuApplicationInterest[]> {
    return this.service.luApplicationInterests(args);
  }

  @graphql.Query(() => LuApplicationInterest, { nullable: true })
  async luApplicationInterest(
    @graphql.Args() args: LuApplicationInterestFindUniqueArgs
  ): Promise<LuApplicationInterest | null> {
    const result = await this.service.luApplicationInterest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LuApplicationInterest)
  async createLuApplicationInterest(
    @graphql.Args() args: CreateLuApplicationInterestArgs
  ): Promise<LuApplicationInterest> {
    return await this.service.createLuApplicationInterest({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LuApplicationInterest)
  async updateLuApplicationInterest(
    @graphql.Args() args: UpdateLuApplicationInterestArgs
  ): Promise<LuApplicationInterest | null> {
    try {
      return await this.service.updateLuApplicationInterest({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LuApplicationInterest)
  async deleteLuApplicationInterest(
    @graphql.Args() args: DeleteLuApplicationInterestArgs
  ): Promise<LuApplicationInterest | null> {
    try {
      return await this.service.deleteLuApplicationInterest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
