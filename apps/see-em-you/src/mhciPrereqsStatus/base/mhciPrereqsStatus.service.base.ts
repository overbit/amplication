/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MhciPrereqsStatus, // @ts-ignore
  MhciPrereq,
} from "@prisma/client";

export class MhciPrereqsStatusServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.MhciPrereqsStatusCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.MhciPrereqsStatusCountArgs>
  ): Promise<number> {
    return this.prisma.mhciPrereqsStatus.count(args);
  }

  async mhciPrereqsStatuses<T extends Prisma.MhciPrereqsStatusFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MhciPrereqsStatusFindManyArgs>
  ): Promise<MhciPrereqsStatus[]> {
    return this.prisma.mhciPrereqsStatus.findMany(args);
  }
  async mhciPrereqsStatus<T extends Prisma.MhciPrereqsStatusFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MhciPrereqsStatusFindUniqueArgs>
  ): Promise<MhciPrereqsStatus | null> {
    return this.prisma.mhciPrereqsStatus.findUnique(args);
  }
  async createMhciPrereqsStatus<T extends Prisma.MhciPrereqsStatusCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MhciPrereqsStatusCreateArgs>
  ): Promise<MhciPrereqsStatus> {
    return this.prisma.mhciPrereqsStatus.create<T>(args);
  }
  async updateMhciPrereqsStatus<T extends Prisma.MhciPrereqsStatusUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MhciPrereqsStatusUpdateArgs>
  ): Promise<MhciPrereqsStatus> {
    return this.prisma.mhciPrereqsStatus.update<T>(args);
  }
  async deleteMhciPrereqsStatus<T extends Prisma.MhciPrereqsStatusDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MhciPrereqsStatusDeleteArgs>
  ): Promise<MhciPrereqsStatus> {
    return this.prisma.mhciPrereqsStatus.delete(args);
  }

  async getMhciPrereqs(parentId: number): Promise<MhciPrereq | null> {
    return this.prisma.mhciPrereqsStatus
      .findUnique({
        where: { id: parentId },
      })
      .mhciPrereqs();
  }
}
