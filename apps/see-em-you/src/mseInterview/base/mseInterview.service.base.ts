/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, MseInterview as PrismaMseInterview } from "@prisma/client";

export class MseInterviewServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.MseInterviewCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.MseInterviewCountArgs>
  ): Promise<number> {
    return this.prisma.mseInterview.count(args);
  }

  async mseInterviews<T extends Prisma.MseInterviewFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MseInterviewFindManyArgs>
  ): Promise<PrismaMseInterview[]> {
    return this.prisma.mseInterview.findMany(args);
  }
  async mseInterview<T extends Prisma.MseInterviewFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MseInterviewFindUniqueArgs>
  ): Promise<PrismaMseInterview | null> {
    return this.prisma.mseInterview.findUnique(args);
  }
  async createMseInterview<T extends Prisma.MseInterviewCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MseInterviewCreateArgs>
  ): Promise<PrismaMseInterview> {
    return this.prisma.mseInterview.create<T>(args);
  }
  async updateMseInterview<T extends Prisma.MseInterviewUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MseInterviewUpdateArgs>
  ): Promise<PrismaMseInterview> {
    return this.prisma.mseInterview.update<T>(args);
  }
  async deleteMseInterview<T extends Prisma.MseInterviewDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MseInterviewDeleteArgs>
  ): Promise<PrismaMseInterview> {
    return this.prisma.mseInterview.delete(args);
  }
}
