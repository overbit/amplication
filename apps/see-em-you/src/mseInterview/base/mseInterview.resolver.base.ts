/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateMseInterviewArgs } from "./CreateMseInterviewArgs";
import { UpdateMseInterviewArgs } from "./UpdateMseInterviewArgs";
import { DeleteMseInterviewArgs } from "./DeleteMseInterviewArgs";
import { MseInterviewCountArgs } from "./MseInterviewCountArgs";
import { MseInterviewFindManyArgs } from "./MseInterviewFindManyArgs";
import { MseInterviewFindUniqueArgs } from "./MseInterviewFindUniqueArgs";
import { MseInterview } from "./MseInterview";
import { MseInterviewService } from "../mseInterview.service";
@graphql.Resolver(() => MseInterview)
export class MseInterviewResolverBase {
  constructor(protected readonly service: MseInterviewService) {}

  async _mseInterviewsMeta(
    @graphql.Args() args: MseInterviewCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MseInterview])
  async mseInterviews(
    @graphql.Args() args: MseInterviewFindManyArgs
  ): Promise<MseInterview[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => MseInterview, { nullable: true })
  async mseInterview(
    @graphql.Args() args: MseInterviewFindUniqueArgs
  ): Promise<MseInterview | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MseInterview)
  async createMseInterview(
    @graphql.Args() args: CreateMseInterviewArgs
  ): Promise<MseInterview> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MseInterview)
  async updateMseInterview(
    @graphql.Args() args: UpdateMseInterviewArgs
  ): Promise<MseInterview | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MseInterview)
  async deleteMseInterview(
    @graphql.Args() args: DeleteMseInterviewArgs
  ): Promise<MseInterview | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
