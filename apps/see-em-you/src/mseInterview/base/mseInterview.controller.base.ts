/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MseInterviewService } from "../mseInterview.service";
import { MseInterviewCreateInput } from "./MseInterviewCreateInput";
import { MseInterview } from "./MseInterview";
import { MseInterviewFindManyArgs } from "./MseInterviewFindManyArgs";
import { MseInterviewWhereUniqueInput } from "./MseInterviewWhereUniqueInput";
import { MseInterviewUpdateInput } from "./MseInterviewUpdateInput";

export class MseInterviewControllerBase {
  constructor(protected readonly service: MseInterviewService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MseInterview })
  async createMseInterview(
    @common.Body() data: MseInterviewCreateInput
  ): Promise<MseInterview> {
    return await this.service.createMseInterview({
      data: data,
      select: {
        applicationId: true,
        id: true,
        interviewComments: true,
        interviewDate: true,
        interviewType: true,
        interviewTypeOther: true,
        reviewerId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MseInterview] })
  @ApiNestedQuery(MseInterviewFindManyArgs)
  async mseInterviews(@common.Req() request: Request): Promise<MseInterview[]> {
    const args = plainToClass(MseInterviewFindManyArgs, request.query);
    return this.service.mseInterviews({
      ...args,
      select: {
        applicationId: true,
        id: true,
        interviewComments: true,
        interviewDate: true,
        interviewType: true,
        interviewTypeOther: true,
        reviewerId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MseInterview })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mseInterview(
    @common.Param() params: MseInterviewWhereUniqueInput
  ): Promise<MseInterview | null> {
    const result = await this.service.mseInterview({
      where: params,
      select: {
        applicationId: true,
        id: true,
        interviewComments: true,
        interviewDate: true,
        interviewType: true,
        interviewTypeOther: true,
        reviewerId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MseInterview })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMseInterview(
    @common.Param() params: MseInterviewWhereUniqueInput,
    @common.Body() data: MseInterviewUpdateInput
  ): Promise<MseInterview | null> {
    try {
      return await this.service.updateMseInterview({
        where: params,
        data: data,
        select: {
          applicationId: true,
          id: true,
          interviewComments: true,
          interviewDate: true,
          interviewType: true,
          interviewTypeOther: true,
          reviewerId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MseInterview })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMseInterview(
    @common.Param() params: MseInterviewWhereUniqueInput
  ): Promise<MseInterview | null> {
    try {
      return await this.service.deleteMseInterview({
        where: params,
        select: {
          applicationId: true,
          id: true,
          interviewComments: true,
          interviewDate: true,
          interviewType: true,
          interviewTypeOther: true,
          reviewerId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
