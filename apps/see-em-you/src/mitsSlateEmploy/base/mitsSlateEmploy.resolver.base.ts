/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MitsSlateEmploy } from "./MitsSlateEmploy";
import { MitsSlateEmployCountArgs } from "./MitsSlateEmployCountArgs";
import { MitsSlateEmployFindManyArgs } from "./MitsSlateEmployFindManyArgs";
import { MitsSlateEmployFindUniqueArgs } from "./MitsSlateEmployFindUniqueArgs";
import { CreateMitsSlateEmployArgs } from "./CreateMitsSlateEmployArgs";
import { UpdateMitsSlateEmployArgs } from "./UpdateMitsSlateEmployArgs";
import { DeleteMitsSlateEmployArgs } from "./DeleteMitsSlateEmployArgs";
import { MitsSlateEmployService } from "../mitsSlateEmploy.service";
@graphql.Resolver(() => MitsSlateEmploy)
export class MitsSlateEmployResolverBase {
  constructor(protected readonly service: MitsSlateEmployService) {}

  async _mitsSlateEmploysMeta(
    @graphql.Args() args: MitsSlateEmployCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MitsSlateEmploy])
  async mitsSlateEmploys(
    @graphql.Args() args: MitsSlateEmployFindManyArgs
  ): Promise<MitsSlateEmploy[]> {
    return this.service.mitsSlateEmploys(args);
  }

  @graphql.Query(() => MitsSlateEmploy, { nullable: true })
  async mitsSlateEmploy(
    @graphql.Args() args: MitsSlateEmployFindUniqueArgs
  ): Promise<MitsSlateEmploy | null> {
    const result = await this.service.mitsSlateEmploy(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MitsSlateEmploy)
  async createMitsSlateEmploy(
    @graphql.Args() args: CreateMitsSlateEmployArgs
  ): Promise<MitsSlateEmploy> {
    return await this.service.createMitsSlateEmploy({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MitsSlateEmploy)
  async updateMitsSlateEmploy(
    @graphql.Args() args: UpdateMitsSlateEmployArgs
  ): Promise<MitsSlateEmploy | null> {
    try {
      return await this.service.updateMitsSlateEmploy({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MitsSlateEmploy)
  async deleteMitsSlateEmploy(
    @graphql.Args() args: DeleteMitsSlateEmployArgs
  ): Promise<MitsSlateEmploy | null> {
    try {
      return await this.service.deleteMitsSlateEmploy(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
