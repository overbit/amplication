/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  LuApplicationAppreq as PrismaLuApplicationAppreq,
  Application as PrismaApplication,
} from "@prisma/client";

export class LuApplicationAppreqServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.LuApplicationAppreqCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.LuApplicationAppreqCountArgs>
  ): Promise<number> {
    return this.prisma.luApplicationAppreq.count(args);
  }

  async luApplicationAppreqs<T extends Prisma.LuApplicationAppreqFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LuApplicationAppreqFindManyArgs>
  ): Promise<PrismaLuApplicationAppreq[]> {
    return this.prisma.luApplicationAppreq.findMany(args);
  }
  async luApplicationAppreq<T extends Prisma.LuApplicationAppreqFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LuApplicationAppreqFindUniqueArgs>
  ): Promise<PrismaLuApplicationAppreq | null> {
    return this.prisma.luApplicationAppreq.findUnique(args);
  }
  async createLuApplicationAppreq<
    T extends Prisma.LuApplicationAppreqCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.LuApplicationAppreqCreateArgs>
  ): Promise<PrismaLuApplicationAppreq> {
    return this.prisma.luApplicationAppreq.create<T>(args);
  }
  async updateLuApplicationAppreq<
    T extends Prisma.LuApplicationAppreqUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.LuApplicationAppreqUpdateArgs>
  ): Promise<PrismaLuApplicationAppreq> {
    return this.prisma.luApplicationAppreq.update<T>(args);
  }
  async deleteLuApplicationAppreq<
    T extends Prisma.LuApplicationAppreqDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.LuApplicationAppreqDeleteArgs>
  ): Promise<PrismaLuApplicationAppreq> {
    return this.prisma.luApplicationAppreq.delete(args);
  }

  async getApplication(parentId: number): Promise<PrismaApplication | null> {
    return this.prisma.luApplicationAppreq
      .findUnique({
        where: { id: parentId },
      })
      .application();
  }
}
