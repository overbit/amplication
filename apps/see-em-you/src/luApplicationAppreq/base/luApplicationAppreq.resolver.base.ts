/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LuApplicationAppreq } from "./LuApplicationAppreq";
import { LuApplicationAppreqCountArgs } from "./LuApplicationAppreqCountArgs";
import { LuApplicationAppreqFindManyArgs } from "./LuApplicationAppreqFindManyArgs";
import { LuApplicationAppreqFindUniqueArgs } from "./LuApplicationAppreqFindUniqueArgs";
import { CreateLuApplicationAppreqArgs } from "./CreateLuApplicationAppreqArgs";
import { UpdateLuApplicationAppreqArgs } from "./UpdateLuApplicationAppreqArgs";
import { DeleteLuApplicationAppreqArgs } from "./DeleteLuApplicationAppreqArgs";
import { Application } from "../../application/base/Application";
import { LuApplicationAppreqService } from "../luApplicationAppreq.service";
@graphql.Resolver(() => LuApplicationAppreq)
export class LuApplicationAppreqResolverBase {
  constructor(protected readonly service: LuApplicationAppreqService) {}

  async _luApplicationAppreqsMeta(
    @graphql.Args() args: LuApplicationAppreqCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LuApplicationAppreq])
  async luApplicationAppreqs(
    @graphql.Args() args: LuApplicationAppreqFindManyArgs
  ): Promise<LuApplicationAppreq[]> {
    return this.service.luApplicationAppreqs(args);
  }

  @graphql.Query(() => LuApplicationAppreq, { nullable: true })
  async luApplicationAppreq(
    @graphql.Args() args: LuApplicationAppreqFindUniqueArgs
  ): Promise<LuApplicationAppreq | null> {
    const result = await this.service.luApplicationAppreq(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LuApplicationAppreq)
  async createLuApplicationAppreq(
    @graphql.Args() args: CreateLuApplicationAppreqArgs
  ): Promise<LuApplicationAppreq> {
    return await this.service.createLuApplicationAppreq({
      ...args,
      data: {
        ...args.data,

        application: {
          connect: args.data.application,
        },
      },
    });
  }

  @graphql.Mutation(() => LuApplicationAppreq)
  async updateLuApplicationAppreq(
    @graphql.Args() args: UpdateLuApplicationAppreqArgs
  ): Promise<LuApplicationAppreq | null> {
    try {
      return await this.service.updateLuApplicationAppreq({
        ...args,
        data: {
          ...args.data,

          application: {
            connect: args.data.application,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LuApplicationAppreq)
  async deleteLuApplicationAppreq(
    @graphql.Args() args: DeleteLuApplicationAppreqArgs
  ): Promise<LuApplicationAppreq | null> {
    try {
      return await this.service.deleteLuApplicationAppreq(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Application, {
    nullable: true,
    name: "application",
  })
  async getApplication(
    @graphql.Parent() parent: LuApplicationAppreq
  ): Promise<Application | null> {
    const result = await this.service.getApplication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
