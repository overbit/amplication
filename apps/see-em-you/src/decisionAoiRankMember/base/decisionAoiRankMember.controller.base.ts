/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DecisionAoiRankMemberService } from "../decisionAoiRankMember.service";
import { DecisionAoiRankMemberCreateInput } from "./DecisionAoiRankMemberCreateInput";
import { DecisionAoiRankMember } from "./DecisionAoiRankMember";
import { DecisionAoiRankMemberFindManyArgs } from "./DecisionAoiRankMemberFindManyArgs";
import { DecisionAoiRankMemberWhereUniqueInput } from "./DecisionAoiRankMemberWhereUniqueInput";
import { DecisionAoiRankMemberUpdateInput } from "./DecisionAoiRankMemberUpdateInput";

export class DecisionAoiRankMemberControllerBase {
  constructor(protected readonly service: DecisionAoiRankMemberService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DecisionAoiRankMember })
  async createDecisionAoiRankMember(
    @common.Body() data: DecisionAoiRankMemberCreateInput
  ): Promise<DecisionAoiRankMember> {
    return await this.service.createDecisionAoiRankMember({
      data: data,
      select: {
        departmentId: true,
        periodId: true,
        interestId: true,
        decision: true,
        applicationId: true,
        arank: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DecisionAoiRankMember] })
  @ApiNestedQuery(DecisionAoiRankMemberFindManyArgs)
  async decisionAoiRankMembers(
    @common.Req() request: Request
  ): Promise<DecisionAoiRankMember[]> {
    const args = plainToClass(DecisionAoiRankMemberFindManyArgs, request.query);
    return this.service.decisionAoiRankMembers({
      ...args,
      select: {
        departmentId: true,
        periodId: true,
        interestId: true,
        decision: true,
        applicationId: true,
        arank: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DecisionAoiRankMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async decisionAoiRankMember(
    @common.Param() params: DecisionAoiRankMemberWhereUniqueInput
  ): Promise<DecisionAoiRankMember | null> {
    const result = await this.service.decisionAoiRankMember({
      where: params,
      select: {
        departmentId: true,
        periodId: true,
        interestId: true,
        decision: true,
        applicationId: true,
        arank: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DecisionAoiRankMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDecisionAoiRankMember(
    @common.Param() params: DecisionAoiRankMemberWhereUniqueInput,
    @common.Body() data: DecisionAoiRankMemberUpdateInput
  ): Promise<DecisionAoiRankMember | null> {
    try {
      return await this.service.updateDecisionAoiRankMember({
        where: params,
        data: data,
        select: {
          departmentId: true,
          periodId: true,
          interestId: true,
          decision: true,
          applicationId: true,
          arank: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DecisionAoiRankMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDecisionAoiRankMember(
    @common.Param() params: DecisionAoiRankMemberWhereUniqueInput
  ): Promise<DecisionAoiRankMember | null> {
    try {
      return await this.service.deleteDecisionAoiRankMember({
        where: params,
        select: {
          departmentId: true,
          periodId: true,
          interestId: true,
          decision: true,
          applicationId: true,
          arank: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
