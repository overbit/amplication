/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProgramModelService } from "../programModel.service";
import { ProgramModelCreateInput } from "./ProgramModelCreateInput";
import { ProgramModel } from "./ProgramModel";
import { ProgramModelFindManyArgs } from "./ProgramModelFindManyArgs";
import { ProgramModelWhereUniqueInput } from "./ProgramModelWhereUniqueInput";
import { ProgramModelUpdateInput } from "./ProgramModelUpdateInput";
import { LuApplicationProgramFindManyArgs } from "../../luApplicationProgram/base/LuApplicationProgramFindManyArgs";
import { LuApplicationProgram } from "../../luApplicationProgram/base/LuApplicationProgram";
import { LuApplicationProgramWhereUniqueInput } from "../../luApplicationProgram/base/LuApplicationProgramWhereUniqueInput";
import { MlAreaFindManyArgs } from "../../mlArea/base/MlAreaFindManyArgs";
import { MlArea } from "../../mlArea/base/MlArea";
import { MlAreaWhereUniqueInput } from "../../mlArea/base/MlAreaWhereUniqueInput";
import { PaymentItemFindManyArgs } from "../../paymentItem/base/PaymentItemFindManyArgs";
import { PaymentItem } from "../../paymentItem/base/PaymentItem";
import { PaymentItemWhereUniqueInput } from "../../paymentItem/base/PaymentItemWhereUniqueInput";
import { ProgramsApplicationreqFindManyArgs } from "../../programsApplicationreq/base/ProgramsApplicationreqFindManyArgs";
import { ProgramsApplicationreq } from "../../programsApplicationreq/base/ProgramsApplicationreq";
import { ProgramsApplicationreqWhereUniqueInput } from "../../programsApplicationreq/base/ProgramsApplicationreqWhereUniqueInput";

export class ProgramModelControllerBase {
  constructor(protected readonly service: ProgramModelService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProgramModel })
  async createProgramModel(
    @common.Body() data: ProgramModelCreateInput
  ): Promise<ProgramModel> {
    return await this.service.createProgramModel({
      data: {
        ...data,

        degree: {
          connect: data.degree,
        },

        fieldsofstudy: {
          connect: data.fieldsofstudy,
        },
      },
      select: {
        baseprice: true,
        basepriceLate: true,

        degree: {
          select: {
            id: true,
          },
        },

        description: true,
        enabled: true,

        fieldsofstudy: {
          select: {
            id: true,
          },
        },

        id: true,
        linkword: true,
        oraclestring: true,
        prank: true,
        programprice: true,
        programpriceLate: true,
        registrationoraclestring: true,
        url: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProgramModel] })
  @ApiNestedQuery(ProgramModelFindManyArgs)
  async programModels(@common.Req() request: Request): Promise<ProgramModel[]> {
    const args = plainToClass(ProgramModelFindManyArgs, request.query);
    return this.service.programModels({
      ...args,
      select: {
        baseprice: true,
        basepriceLate: true,

        degree: {
          select: {
            id: true,
          },
        },

        description: true,
        enabled: true,

        fieldsofstudy: {
          select: {
            id: true,
          },
        },

        id: true,
        linkword: true,
        oraclestring: true,
        prank: true,
        programprice: true,
        programpriceLate: true,
        registrationoraclestring: true,
        url: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProgramModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async programModel(
    @common.Param() params: ProgramModelWhereUniqueInput
  ): Promise<ProgramModel | null> {
    const result = await this.service.programModel({
      where: params,
      select: {
        baseprice: true,
        basepriceLate: true,

        degree: {
          select: {
            id: true,
          },
        },

        description: true,
        enabled: true,

        fieldsofstudy: {
          select: {
            id: true,
          },
        },

        id: true,
        linkword: true,
        oraclestring: true,
        prank: true,
        programprice: true,
        programpriceLate: true,
        registrationoraclestring: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProgramModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProgramModel(
    @common.Param() params: ProgramModelWhereUniqueInput,
    @common.Body() data: ProgramModelUpdateInput
  ): Promise<ProgramModel | null> {
    try {
      return await this.service.updateProgramModel({
        where: params,
        data: {
          ...data,

          degree: {
            connect: data.degree,
          },

          fieldsofstudy: {
            connect: data.fieldsofstudy,
          },
        },
        select: {
          baseprice: true,
          basepriceLate: true,

          degree: {
            select: {
              id: true,
            },
          },

          description: true,
          enabled: true,

          fieldsofstudy: {
            select: {
              id: true,
            },
          },

          id: true,
          linkword: true,
          oraclestring: true,
          prank: true,
          programprice: true,
          programpriceLate: true,
          registrationoraclestring: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProgramModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProgramModel(
    @common.Param() params: ProgramModelWhereUniqueInput
  ): Promise<ProgramModel | null> {
    try {
      return await this.service.deleteProgramModel({
        where: params,
        select: {
          baseprice: true,
          basepriceLate: true,

          degree: {
            select: {
              id: true,
            },
          },

          description: true,
          enabled: true,

          fieldsofstudy: {
            select: {
              id: true,
            },
          },

          id: true,
          linkword: true,
          oraclestring: true,
          prank: true,
          programprice: true,
          programpriceLate: true,
          registrationoraclestring: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/luApplicationPrograms")
  @ApiNestedQuery(LuApplicationProgramFindManyArgs)
  async findLuApplicationPrograms(
    @common.Req() request: Request,
    @common.Param() params: ProgramModelWhereUniqueInput
  ): Promise<LuApplicationProgram[]> {
    const query = plainToClass(LuApplicationProgramFindManyArgs, request.query);
    const results = await this.service.findLuApplicationPrograms(params.id, {
      ...query,
      select: {
        admissionStatus: true,
        admit: true,
        admitComments: true,

        application: {
          select: {
            id: true,
          },
        },

        choice: true,
        decision: true,
        faccontact: true,
        id: true,
        ltichoice: true,
        msecertchoice: true,

        programs: {
          select: {
            id: true,
          },
        },

        round2: true,
        scholarshipAmt: true,
        scholarshipComments: true,
        stucontact: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/luApplicationPrograms")
  async connectLuApplicationPrograms(
    @common.Param() params: ProgramModelWhereUniqueInput,
    @common.Body() body: LuApplicationProgramWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      luApplicationPrograms: {
        connect: body,
      },
    };
    await this.service.updateProgramModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/luApplicationPrograms")
  async updateLuApplicationPrograms(
    @common.Param() params: ProgramModelWhereUniqueInput,
    @common.Body() body: LuApplicationProgramWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      luApplicationPrograms: {
        set: body,
      },
    };
    await this.service.updateProgramModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/luApplicationPrograms")
  async disconnectLuApplicationPrograms(
    @common.Param() params: ProgramModelWhereUniqueInput,
    @common.Body() body: LuApplicationProgramWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      luApplicationPrograms: {
        disconnect: body,
      },
    };
    await this.service.updateProgramModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/mlArea")
  @ApiNestedQuery(MlAreaFindManyArgs)
  async findMlArea(
    @common.Req() request: Request,
    @common.Param() params: ProgramModelWhereUniqueInput
  ): Promise<MlArea[]> {
    const query = plainToClass(MlAreaFindManyArgs, request.query);
    const results = await this.service.findMlArea(params.id, {
      ...query,
      select: {
        application: {
          select: {
            id: true,
          },
        },

        area: true,
        id: true,

        programs: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/mlArea")
  async connectMlArea(
    @common.Param() params: ProgramModelWhereUniqueInput,
    @common.Body() body: MlAreaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mlArea: {
        connect: body,
      },
    };
    await this.service.updateProgramModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/mlArea")
  async updateMlArea(
    @common.Param() params: ProgramModelWhereUniqueInput,
    @common.Body() body: MlAreaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mlArea: {
        set: body,
      },
    };
    await this.service.updateProgramModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/mlArea")
  async disconnectMlArea(
    @common.Param() params: ProgramModelWhereUniqueInput,
    @common.Body() body: MlAreaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mlArea: {
        disconnect: body,
      },
    };
    await this.service.updateProgramModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/paymentItem")
  @ApiNestedQuery(PaymentItemFindManyArgs)
  async findPaymentItem(
    @common.Req() request: Request,
    @common.Param() params: ProgramModelWhereUniqueInput
  ): Promise<PaymentItem[]> {
    const query = plainToClass(PaymentItemFindManyArgs, request.query);
    const results = await this.service.findPaymentItem(params.id, {
      ...query,
      select: {
        id: true,
        paymentId: true,
        paymentItemAmount: true,
        paymentItemId: true,

        programs: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/paymentItem")
  async connectPaymentItem(
    @common.Param() params: ProgramModelWhereUniqueInput,
    @common.Body() body: PaymentItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentItem: {
        connect: body,
      },
    };
    await this.service.updateProgramModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/paymentItem")
  async updatePaymentItem(
    @common.Param() params: ProgramModelWhereUniqueInput,
    @common.Body() body: PaymentItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentItem: {
        set: body,
      },
    };
    await this.service.updateProgramModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/paymentItem")
  async disconnectPaymentItem(
    @common.Param() params: ProgramModelWhereUniqueInput,
    @common.Body() body: PaymentItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentItem: {
        disconnect: body,
      },
    };
    await this.service.updateProgramModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/programsApplicationreqs")
  @ApiNestedQuery(ProgramsApplicationreqFindManyArgs)
  async findProgramsApplicationreqs(
    @common.Req() request: Request,
    @common.Param() params: ProgramModelWhereUniqueInput
  ): Promise<ProgramsApplicationreq[]> {
    const query = plainToClass(
      ProgramsApplicationreqFindManyArgs,
      request.query
    );
    const results = await this.service.findProgramsApplicationreqs(params.id, {
      ...query,
      select: {
        applicationreqs: {
          select: {
            id: true,
          },
        },

        id: true,

        programs: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/programsApplicationreqs")
  async connectProgramsApplicationreqs(
    @common.Param() params: ProgramModelWhereUniqueInput,
    @common.Body() body: ProgramsApplicationreqWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      programsApplicationreqs: {
        connect: body,
      },
    };
    await this.service.updateProgramModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/programsApplicationreqs")
  async updateProgramsApplicationreqs(
    @common.Param() params: ProgramModelWhereUniqueInput,
    @common.Body() body: ProgramsApplicationreqWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      programsApplicationreqs: {
        set: body,
      },
    };
    await this.service.updateProgramModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/programsApplicationreqs")
  async disconnectProgramsApplicationreqs(
    @common.Param() params: ProgramModelWhereUniqueInput,
    @common.Body() body: ProgramsApplicationreqWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      programsApplicationreqs: {
        disconnect: body,
      },
    };
    await this.service.updateProgramModel({
      where: params,
      data,
      select: { id: true },
    });
  }
}
