/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProgramModel } from "./ProgramModel";
import { ProgramModelCountArgs } from "./ProgramModelCountArgs";
import { ProgramModelFindManyArgs } from "./ProgramModelFindManyArgs";
import { ProgramModelFindUniqueArgs } from "./ProgramModelFindUniqueArgs";
import { CreateProgramModelArgs } from "./CreateProgramModelArgs";
import { UpdateProgramModelArgs } from "./UpdateProgramModelArgs";
import { DeleteProgramModelArgs } from "./DeleteProgramModelArgs";
import { LuApplicationProgramFindManyArgs } from "../../luApplicationProgram/base/LuApplicationProgramFindManyArgs";
import { LuApplicationProgram } from "../../luApplicationProgram/base/LuApplicationProgram";
import { MlAreaFindManyArgs } from "../../mlArea/base/MlAreaFindManyArgs";
import { MlArea } from "../../mlArea/base/MlArea";
import { PaymentItemFindManyArgs } from "../../paymentItem/base/PaymentItemFindManyArgs";
import { PaymentItem } from "../../paymentItem/base/PaymentItem";
import { ProgramsApplicationreqFindManyArgs } from "../../programsApplicationreq/base/ProgramsApplicationreqFindManyArgs";
import { ProgramsApplicationreq } from "../../programsApplicationreq/base/ProgramsApplicationreq";
import { Degree } from "../../degree/base/Degree";
import { Fieldsofstudy } from "../../fieldsofstudy/base/Fieldsofstudy";
import { ProgramModelService } from "../programModel.service";
@graphql.Resolver(() => ProgramModel)
export class ProgramModelResolverBase {
  constructor(protected readonly service: ProgramModelService) {}

  async _programModelsMeta(
    @graphql.Args() args: ProgramModelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProgramModel])
  async programModels(
    @graphql.Args() args: ProgramModelFindManyArgs
  ): Promise<ProgramModel[]> {
    return this.service.programModels(args);
  }

  @graphql.Query(() => ProgramModel, { nullable: true })
  async programModel(
    @graphql.Args() args: ProgramModelFindUniqueArgs
  ): Promise<ProgramModel | null> {
    const result = await this.service.programModel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProgramModel)
  async createProgramModel(
    @graphql.Args() args: CreateProgramModelArgs
  ): Promise<ProgramModel> {
    return await this.service.createProgramModel({
      ...args,
      data: {
        ...args.data,

        degree: {
          connect: args.data.degree,
        },

        fieldsofstudy: {
          connect: args.data.fieldsofstudy,
        },
      },
    });
  }

  @graphql.Mutation(() => ProgramModel)
  async updateProgramModel(
    @graphql.Args() args: UpdateProgramModelArgs
  ): Promise<ProgramModel | null> {
    try {
      return await this.service.updateProgramModel({
        ...args,
        data: {
          ...args.data,

          degree: {
            connect: args.data.degree,
          },

          fieldsofstudy: {
            connect: args.data.fieldsofstudy,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProgramModel)
  async deleteProgramModel(
    @graphql.Args() args: DeleteProgramModelArgs
  ): Promise<ProgramModel | null> {
    try {
      return await this.service.deleteProgramModel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [LuApplicationProgram], {
    name: "luApplicationPrograms",
  })
  async findLuApplicationPrograms(
    @graphql.Parent() parent: ProgramModel,
    @graphql.Args() args: LuApplicationProgramFindManyArgs
  ): Promise<LuApplicationProgram[]> {
    const results = await this.service.findLuApplicationPrograms(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [MlArea], { name: "mlArea" })
  async findMlArea(
    @graphql.Parent() parent: ProgramModel,
    @graphql.Args() args: MlAreaFindManyArgs
  ): Promise<MlArea[]> {
    const results = await this.service.findMlArea(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [PaymentItem], { name: "paymentItem" })
  async findPaymentItem(
    @graphql.Parent() parent: ProgramModel,
    @graphql.Args() args: PaymentItemFindManyArgs
  ): Promise<PaymentItem[]> {
    const results = await this.service.findPaymentItem(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ProgramsApplicationreq], {
    name: "programsApplicationreqs",
  })
  async findProgramsApplicationreqs(
    @graphql.Parent() parent: ProgramModel,
    @graphql.Args() args: ProgramsApplicationreqFindManyArgs
  ): Promise<ProgramsApplicationreq[]> {
    const results = await this.service.findProgramsApplicationreqs(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Degree, {
    nullable: true,
    name: "degree",
  })
  async getDegree(
    @graphql.Parent() parent: ProgramModel
  ): Promise<Degree | null> {
    const result = await this.service.getDegree(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Fieldsofstudy, {
    nullable: true,
    name: "fieldsofstudy",
  })
  async getFieldsofstudy(
    @graphql.Parent() parent: ProgramModel
  ): Promise<Fieldsofstudy | null> {
    const result = await this.service.getFieldsofstudy(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
