/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateExperienceArgs } from "./CreateExperienceArgs";
import { UpdateExperienceArgs } from "./UpdateExperienceArgs";
import { DeleteExperienceArgs } from "./DeleteExperienceArgs";
import { ExperienceCountArgs } from "./ExperienceCountArgs";
import { ExperienceFindManyArgs } from "./ExperienceFindManyArgs";
import { ExperienceFindUniqueArgs } from "./ExperienceFindUniqueArgs";
import { Experience } from "./Experience";
import { Application } from "../../application/base/Application";
import { ExperienceService } from "../experience.service";
@graphql.Resolver(() => Experience)
export class ExperienceResolverBase {
  constructor(protected readonly service: ExperienceService) {}

  async _experiencesMeta(
    @graphql.Args() args: ExperienceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Experience])
  async experiences(
    @graphql.Args() args: ExperienceFindManyArgs
  ): Promise<Experience[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Experience, { nullable: true })
  async experience(
    @graphql.Args() args: ExperienceFindUniqueArgs
  ): Promise<Experience | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Experience)
  async createExperience(
    @graphql.Args() args: CreateExperienceArgs
  ): Promise<Experience> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        application: {
          connect: args.data.application,
        },
      },
    });
  }

  @graphql.Mutation(() => Experience)
  async updateExperience(
    @graphql.Args() args: UpdateExperienceArgs
  ): Promise<Experience | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          application: {
            connect: args.data.application,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Experience)
  async deleteExperience(
    @graphql.Args() args: DeleteExperienceArgs
  ): Promise<Experience | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Application, {
    nullable: true,
    name: "application",
  })
  async resolveFieldApplication(
    @graphql.Parent() parent: Experience
  ): Promise<Application | null> {
    const result = await this.service.getApplication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
