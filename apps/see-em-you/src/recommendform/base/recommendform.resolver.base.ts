/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Recommendform } from "./Recommendform";
import { RecommendformCountArgs } from "./RecommendformCountArgs";
import { RecommendformFindManyArgs } from "./RecommendformFindManyArgs";
import { RecommendformFindUniqueArgs } from "./RecommendformFindUniqueArgs";
import { CreateRecommendformArgs } from "./CreateRecommendformArgs";
import { UpdateRecommendformArgs } from "./UpdateRecommendformArgs";
import { DeleteRecommendformArgs } from "./DeleteRecommendformArgs";
import { RecommendformService } from "../recommendform.service";
@graphql.Resolver(() => Recommendform)
export class RecommendformResolverBase {
  constructor(protected readonly service: RecommendformService) {}

  async _recommendformsMeta(
    @graphql.Args() args: RecommendformCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Recommendform])
  async recommendforms(
    @graphql.Args() args: RecommendformFindManyArgs
  ): Promise<Recommendform[]> {
    return this.service.recommendforms(args);
  }

  @graphql.Query(() => Recommendform, { nullable: true })
  async recommendform(
    @graphql.Args() args: RecommendformFindUniqueArgs
  ): Promise<Recommendform | null> {
    const result = await this.service.recommendform(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Recommendform)
  async createRecommendform(
    @graphql.Args() args: CreateRecommendformArgs
  ): Promise<Recommendform> {
    return await this.service.createRecommendform({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Recommendform)
  async updateRecommendform(
    @graphql.Args() args: UpdateRecommendformArgs
  ): Promise<Recommendform | null> {
    try {
      return await this.service.updateRecommendform({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Recommendform)
  async deleteRecommendform(
    @graphql.Args() args: DeleteRecommendformArgs
  ): Promise<Recommendform | null> {
    try {
      return await this.service.deleteRecommendform(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
