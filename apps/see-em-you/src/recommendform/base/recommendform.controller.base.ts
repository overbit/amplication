/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RecommendformService } from "../recommendform.service";
import { RecommendformCreateInput } from "./RecommendformCreateInput";
import { Recommendform } from "./Recommendform";
import { RecommendformFindManyArgs } from "./RecommendformFindManyArgs";
import { RecommendformWhereUniqueInput } from "./RecommendformWhereUniqueInput";
import { RecommendformUpdateInput } from "./RecommendformUpdateInput";

export class RecommendformControllerBase {
  constructor(protected readonly service: RecommendformService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Recommendform })
  async createRecommendform(
    @common.Body() data: RecommendformCreateInput
  ): Promise<Recommendform> {
    return await this.service.createRecommendform({
      data: data,
      select: {
        formId: true,
        id: true,
        questionId: true,
        questionKey: true,
        recommendId: true,
        response: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Recommendform] })
  @ApiNestedQuery(RecommendformFindManyArgs)
  async recommendforms(
    @common.Req() request: Request
  ): Promise<Recommendform[]> {
    const args = plainToClass(RecommendformFindManyArgs, request.query);
    return this.service.recommendforms({
      ...args,
      select: {
        formId: true,
        id: true,
        questionId: true,
        questionKey: true,
        recommendId: true,
        response: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Recommendform })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async recommendform(
    @common.Param() params: RecommendformWhereUniqueInput
  ): Promise<Recommendform | null> {
    const result = await this.service.recommendform({
      where: params,
      select: {
        formId: true,
        id: true,
        questionId: true,
        questionKey: true,
        recommendId: true,
        response: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Recommendform })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRecommendform(
    @common.Param() params: RecommendformWhereUniqueInput,
    @common.Body() data: RecommendformUpdateInput
  ): Promise<Recommendform | null> {
    try {
      return await this.service.updateRecommendform({
        where: params,
        data: data,
        select: {
          formId: true,
          id: true,
          questionId: true,
          questionKey: true,
          recommendId: true,
          response: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Recommendform })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRecommendform(
    @common.Param() params: RecommendformWhereUniqueInput
  ): Promise<Recommendform | null> {
    try {
      return await this.service.deleteRecommendform({
        where: params,
        select: {
          formId: true,
          id: true,
          questionId: true,
          questionKey: true,
          recommendId: true,
          response: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
