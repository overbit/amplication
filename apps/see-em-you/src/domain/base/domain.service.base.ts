/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Domain, // @ts-ignore
  DomainUnit,
} from "@prisma/client";

export class DomainServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.DomainCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.DomainCountArgs>
  ): Promise<number> {
    return this.prisma.domain.count(args);
  }

  async domains<T extends Prisma.DomainFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DomainFindManyArgs>
  ): Promise<Domain[]> {
    return this.prisma.domain.findMany(args);
  }
  async domain<T extends Prisma.DomainFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DomainFindUniqueArgs>
  ): Promise<Domain | null> {
    return this.prisma.domain.findUnique(args);
  }
  async createDomain<T extends Prisma.DomainCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DomainCreateArgs>
  ): Promise<Domain> {
    return this.prisma.domain.create<T>(args);
  }
  async updateDomain<T extends Prisma.DomainUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DomainUpdateArgs>
  ): Promise<Domain> {
    return this.prisma.domain.update<T>(args);
  }
  async deleteDomain<T extends Prisma.DomainDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DomainDeleteArgs>
  ): Promise<Domain> {
    return this.prisma.domain.delete(args);
  }

  async findDomainUnit(
    parentId: number,
    args: Prisma.DomainUnitFindManyArgs
  ): Promise<DomainUnit[]> {
    return this.prisma.domain
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .domainUnit(args);
  }
}
