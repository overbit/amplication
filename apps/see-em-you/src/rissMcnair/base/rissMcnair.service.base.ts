/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  RissMcnair as PrismaRissMcnair,
  Application as PrismaApplication,
} from "@prisma/client";

export class RissMcnairServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.RissMcnairCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.RissMcnairCountArgs>
  ): Promise<number> {
    return this.prisma.rissMcnair.count(args);
  }

  async rissMcnairs<T extends Prisma.RissMcnairFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RissMcnairFindManyArgs>
  ): Promise<PrismaRissMcnair[]> {
    return this.prisma.rissMcnair.findMany(args);
  }
  async rissMcnair<T extends Prisma.RissMcnairFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RissMcnairFindUniqueArgs>
  ): Promise<PrismaRissMcnair | null> {
    return this.prisma.rissMcnair.findUnique(args);
  }
  async createRissMcnair<T extends Prisma.RissMcnairCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RissMcnairCreateArgs>
  ): Promise<PrismaRissMcnair> {
    return this.prisma.rissMcnair.create<T>(args);
  }
  async updateRissMcnair<T extends Prisma.RissMcnairUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RissMcnairUpdateArgs>
  ): Promise<PrismaRissMcnair> {
    return this.prisma.rissMcnair.update<T>(args);
  }
  async deleteRissMcnair<T extends Prisma.RissMcnairDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RissMcnairDeleteArgs>
  ): Promise<PrismaRissMcnair> {
    return this.prisma.rissMcnair.delete(args);
  }

  async getApplication(parentId: number): Promise<PrismaApplication | null> {
    return this.prisma.rissMcnair
      .findUnique({
        where: { id: parentId },
      })
      .application();
  }
}
