/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RissMcnair } from "./RissMcnair";
import { RissMcnairCountArgs } from "./RissMcnairCountArgs";
import { RissMcnairFindManyArgs } from "./RissMcnairFindManyArgs";
import { RissMcnairFindUniqueArgs } from "./RissMcnairFindUniqueArgs";
import { CreateRissMcnairArgs } from "./CreateRissMcnairArgs";
import { UpdateRissMcnairArgs } from "./UpdateRissMcnairArgs";
import { DeleteRissMcnairArgs } from "./DeleteRissMcnairArgs";
import { Application } from "../../application/base/Application";
import { RissMcnairService } from "../rissMcnair.service";
@graphql.Resolver(() => RissMcnair)
export class RissMcnairResolverBase {
  constructor(protected readonly service: RissMcnairService) {}

  async _rissMcnairsMeta(
    @graphql.Args() args: RissMcnairCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RissMcnair])
  async rissMcnairs(
    @graphql.Args() args: RissMcnairFindManyArgs
  ): Promise<RissMcnair[]> {
    return this.service.rissMcnairs(args);
  }

  @graphql.Query(() => RissMcnair, { nullable: true })
  async rissMcnair(
    @graphql.Args() args: RissMcnairFindUniqueArgs
  ): Promise<RissMcnair | null> {
    const result = await this.service.rissMcnair(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RissMcnair)
  async createRissMcnair(
    @graphql.Args() args: CreateRissMcnairArgs
  ): Promise<RissMcnair> {
    return await this.service.createRissMcnair({
      ...args,
      data: {
        ...args.data,

        application: args.data.application
          ? {
              connect: args.data.application,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => RissMcnair)
  async updateRissMcnair(
    @graphql.Args() args: UpdateRissMcnairArgs
  ): Promise<RissMcnair | null> {
    try {
      return await this.service.updateRissMcnair({
        ...args,
        data: {
          ...args.data,

          application: args.data.application
            ? {
                connect: args.data.application,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RissMcnair)
  async deleteRissMcnair(
    @graphql.Args() args: DeleteRissMcnairArgs
  ): Promise<RissMcnair | null> {
    try {
      return await this.service.deleteRissMcnair(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Application, {
    nullable: true,
    name: "application",
  })
  async getApplication(
    @graphql.Parent() parent: RissMcnair
  ): Promise<Application | null> {
    const result = await this.service.getApplication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
