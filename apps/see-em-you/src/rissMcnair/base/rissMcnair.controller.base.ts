/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RissMcnairService } from "../rissMcnair.service";
import { RissMcnairCreateInput } from "./RissMcnairCreateInput";
import { RissMcnair } from "./RissMcnair";
import { RissMcnairFindManyArgs } from "./RissMcnairFindManyArgs";
import { RissMcnairWhereUniqueInput } from "./RissMcnairWhereUniqueInput";
import { RissMcnairUpdateInput } from "./RissMcnairUpdateInput";

export class RissMcnairControllerBase {
  constructor(protected readonly service: RissMcnairService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RissMcnair })
  async createRissMcnair(
    @common.Body() data: RissMcnairCreateInput
  ): Promise<RissMcnair> {
    return await this.service.createRissMcnair({
      data: {
        ...data,

        application: data.application
          ? {
              connect: data.application,
            }
          : undefined,
      },
      select: {
        site: true,
        contact: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RissMcnair] })
  @ApiNestedQuery(RissMcnairFindManyArgs)
  async rissMcnairs(@common.Req() request: Request): Promise<RissMcnair[]> {
    const args = plainToClass(RissMcnairFindManyArgs, request.query);
    return this.service.rissMcnairs({
      ...args,
      select: {
        site: true,
        contact: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RissMcnair })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async rissMcnair(
    @common.Param() params: RissMcnairWhereUniqueInput
  ): Promise<RissMcnair | null> {
    const result = await this.service.rissMcnair({
      where: params,
      select: {
        site: true,
        contact: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RissMcnair })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRissMcnair(
    @common.Param() params: RissMcnairWhereUniqueInput,
    @common.Body() data: RissMcnairUpdateInput
  ): Promise<RissMcnair | null> {
    try {
      return await this.service.updateRissMcnair({
        where: params,
        data: {
          ...data,

          application: data.application
            ? {
                connect: data.application,
              }
            : undefined,
        },
        select: {
          site: true,
          contact: true,

          application: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RissMcnair })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRissMcnair(
    @common.Param() params: RissMcnairWhereUniqueInput
  ): Promise<RissMcnair | null> {
    try {
      return await this.service.deleteRissMcnair({
        where: params,
        select: {
          site: true,
          contact: true,

          application: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
