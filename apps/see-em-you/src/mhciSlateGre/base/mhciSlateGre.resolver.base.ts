/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MhciSlateGre } from "./MhciSlateGre";
import { MhciSlateGreCountArgs } from "./MhciSlateGreCountArgs";
import { MhciSlateGreFindManyArgs } from "./MhciSlateGreFindManyArgs";
import { MhciSlateGreFindUniqueArgs } from "./MhciSlateGreFindUniqueArgs";
import { CreateMhciSlateGreArgs } from "./CreateMhciSlateGreArgs";
import { UpdateMhciSlateGreArgs } from "./UpdateMhciSlateGreArgs";
import { DeleteMhciSlateGreArgs } from "./DeleteMhciSlateGreArgs";
import { MhciSlateGreService } from "../mhciSlateGre.service";
@graphql.Resolver(() => MhciSlateGre)
export class MhciSlateGreResolverBase {
  constructor(protected readonly service: MhciSlateGreService) {}

  async _mhciSlateGresMeta(
    @graphql.Args() args: MhciSlateGreCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MhciSlateGre])
  async mhciSlateGres(
    @graphql.Args() args: MhciSlateGreFindManyArgs
  ): Promise<MhciSlateGre[]> {
    return this.service.mhciSlateGres(args);
  }

  @graphql.Query(() => MhciSlateGre, { nullable: true })
  async mhciSlateGre(
    @graphql.Args() args: MhciSlateGreFindUniqueArgs
  ): Promise<MhciSlateGre | null> {
    const result = await this.service.mhciSlateGre(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MhciSlateGre)
  async createMhciSlateGre(
    @graphql.Args() args: CreateMhciSlateGreArgs
  ): Promise<MhciSlateGre> {
    return await this.service.createMhciSlateGre({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MhciSlateGre)
  async updateMhciSlateGre(
    @graphql.Args() args: UpdateMhciSlateGreArgs
  ): Promise<MhciSlateGre | null> {
    try {
      return await this.service.updateMhciSlateGre({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MhciSlateGre)
  async deleteMhciSlateGre(
    @graphql.Args() args: DeleteMhciSlateGreArgs
  ): Promise<MhciSlateGre | null> {
    try {
      return await this.service.deleteMhciSlateGre(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
