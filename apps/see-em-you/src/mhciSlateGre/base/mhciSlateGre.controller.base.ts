/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MhciSlateGreService } from "../mhciSlateGre.service";
import { MhciSlateGreCreateInput } from "./MhciSlateGreCreateInput";
import { MhciSlateGre } from "./MhciSlateGre";
import { MhciSlateGreFindManyArgs } from "./MhciSlateGreFindManyArgs";
import { MhciSlateGreWhereUniqueInput } from "./MhciSlateGreWhereUniqueInput";
import { MhciSlateGreUpdateInput } from "./MhciSlateGreUpdateInput";

export class MhciSlateGreControllerBase {
  constructor(protected readonly service: MhciSlateGreService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MhciSlateGre })
  async createMhciSlateGre(
    @common.Body() data: MhciSlateGreCreateInput
  ): Promise<MhciSlateGre> {
    return await this.service.createMhciSlateGre({
      data: data,
      select: {
        prefix: true,
        first: true,
        middle: true,
        last: true,
        greVerbal: true,
        greVerbalPct: true,
        greQuantitative: true,
        greQuantitativePct: true,
        greAnalyticalWriting: true,
        greAnalyticalWritingPct: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MhciSlateGre] })
  @ApiNestedQuery(MhciSlateGreFindManyArgs)
  async mhciSlateGres(@common.Req() request: Request): Promise<MhciSlateGre[]> {
    const args = plainToClass(MhciSlateGreFindManyArgs, request.query);
    return this.service.mhciSlateGres({
      ...args,
      select: {
        prefix: true,
        first: true,
        middle: true,
        last: true,
        greVerbal: true,
        greVerbalPct: true,
        greQuantitative: true,
        greQuantitativePct: true,
        greAnalyticalWriting: true,
        greAnalyticalWritingPct: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MhciSlateGre })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mhciSlateGre(
    @common.Param() params: MhciSlateGreWhereUniqueInput
  ): Promise<MhciSlateGre | null> {
    const result = await this.service.mhciSlateGre({
      where: params,
      select: {
        prefix: true,
        first: true,
        middle: true,
        last: true,
        greVerbal: true,
        greVerbalPct: true,
        greQuantitative: true,
        greQuantitativePct: true,
        greAnalyticalWriting: true,
        greAnalyticalWritingPct: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MhciSlateGre })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMhciSlateGre(
    @common.Param() params: MhciSlateGreWhereUniqueInput,
    @common.Body() data: MhciSlateGreUpdateInput
  ): Promise<MhciSlateGre | null> {
    try {
      return await this.service.updateMhciSlateGre({
        where: params,
        data: data,
        select: {
          prefix: true,
          first: true,
          middle: true,
          last: true,
          greVerbal: true,
          greVerbalPct: true,
          greQuantitative: true,
          greQuantitativePct: true,
          greAnalyticalWriting: true,
          greAnalyticalWritingPct: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MhciSlateGre })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMhciSlateGre(
    @common.Param() params: MhciSlateGreWhereUniqueInput
  ): Promise<MhciSlateGre | null> {
    try {
      return await this.service.deleteMhciSlateGre({
        where: params,
        select: {
          prefix: true,
          first: true,
          middle: true,
          last: true,
          greVerbal: true,
          greVerbalPct: true,
          greQuantitative: true,
          greQuantitativePct: true,
          greAnalyticalWriting: true,
          greAnalyticalWritingPct: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
