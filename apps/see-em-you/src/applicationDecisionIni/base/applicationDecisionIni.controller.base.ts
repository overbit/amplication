/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ApplicationDecisionIniService } from "../applicationDecisionIni.service";
import { ApplicationDecisionIniCreateInput } from "./ApplicationDecisionIniCreateInput";
import { ApplicationDecisionIni } from "./ApplicationDecisionIni";
import { ApplicationDecisionIniFindManyArgs } from "./ApplicationDecisionIniFindManyArgs";
import { ApplicationDecisionIniWhereUniqueInput } from "./ApplicationDecisionIniWhereUniqueInput";
import { ApplicationDecisionIniUpdateInput } from "./ApplicationDecisionIniUpdateInput";

export class ApplicationDecisionIniControllerBase {
  constructor(protected readonly service: ApplicationDecisionIniService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ApplicationDecisionIni })
  async createApplicationDecisionIni(
    @common.Body() data: ApplicationDecisionIniCreateInput
  ): Promise<ApplicationDecisionIni> {
    return await this.service.createApplicationDecisionIni({
      data: data,
      select: {
        applicationId: true,
        admissionProgramId: true,
        choice: true,
        admissionStatus: true,
        comments: true,
        scholarshipAmt: true,
        scholarshipComments: true,
        timestamp: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ApplicationDecisionIni] })
  @ApiNestedQuery(ApplicationDecisionIniFindManyArgs)
  async applicationDecisionInis(
    @common.Req() request: Request
  ): Promise<ApplicationDecisionIni[]> {
    const args = plainToClass(
      ApplicationDecisionIniFindManyArgs,
      request.query
    );
    return this.service.applicationDecisionInis({
      ...args,
      select: {
        applicationId: true,
        admissionProgramId: true,
        choice: true,
        admissionStatus: true,
        comments: true,
        scholarshipAmt: true,
        scholarshipComments: true,
        timestamp: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ApplicationDecisionIni })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async applicationDecisionIni(
    @common.Param() params: ApplicationDecisionIniWhereUniqueInput
  ): Promise<ApplicationDecisionIni | null> {
    const result = await this.service.applicationDecisionIni({
      where: params,
      select: {
        applicationId: true,
        admissionProgramId: true,
        choice: true,
        admissionStatus: true,
        comments: true,
        scholarshipAmt: true,
        scholarshipComments: true,
        timestamp: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ApplicationDecisionIni })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateApplicationDecisionIni(
    @common.Param() params: ApplicationDecisionIniWhereUniqueInput,
    @common.Body() data: ApplicationDecisionIniUpdateInput
  ): Promise<ApplicationDecisionIni | null> {
    try {
      return await this.service.updateApplicationDecisionIni({
        where: params,
        data: data,
        select: {
          applicationId: true,
          admissionProgramId: true,
          choice: true,
          admissionStatus: true,
          comments: true,
          scholarshipAmt: true,
          scholarshipComments: true,
          timestamp: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ApplicationDecisionIni })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteApplicationDecisionIni(
    @common.Param() params: ApplicationDecisionIniWhereUniqueInput
  ): Promise<ApplicationDecisionIni | null> {
    try {
      return await this.service.deleteApplicationDecisionIni({
        where: params,
        select: {
          applicationId: true,
          admissionProgramId: true,
          choice: true,
          admissionStatus: true,
          comments: true,
          scholarshipAmt: true,
          scholarshipComments: true,
          timestamp: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
