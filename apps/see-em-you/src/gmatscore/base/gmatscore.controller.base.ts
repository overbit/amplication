/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GmatscoreService } from "../gmatscore.service";
import { GmatscoreCreateInput } from "./GmatscoreCreateInput";
import { GmatscoreWhereInput } from "./GmatscoreWhereInput";
import { GmatscoreWhereUniqueInput } from "./GmatscoreWhereUniqueInput";
import { GmatscoreFindManyArgs } from "./GmatscoreFindManyArgs";
import { GmatscoreUpdateInput } from "./GmatscoreUpdateInput";
import { Gmatscore } from "./Gmatscore";

export class GmatscoreControllerBase {
  constructor(protected readonly service: GmatscoreService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Gmatscore })
  async create(@common.Body() data: GmatscoreCreateInput): Promise<Gmatscore> {
    return await this.service.create({
      data: {
        ...data,

        application: {
          connect: data.application,
        },
      },
      select: {
        analyticalwritingpercentile: true,
        analyticalwritingscore: true,

        application: {
          select: {
            id: true,
          },
        },

        datafileId: true,
        id: true,
        quantitativepercentile: true,
        quantitativescore: true,
        scorereceived: true,
        testdate: true,
        totalpercentile: true,
        totalscore: true,
        verbalpercentile: true,
        verbalscore: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Gmatscore] })
  @ApiNestedQuery(GmatscoreFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Gmatscore[]> {
    const args = plainToClass(GmatscoreFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        analyticalwritingpercentile: true,
        analyticalwritingscore: true,

        application: {
          select: {
            id: true,
          },
        },

        datafileId: true,
        id: true,
        quantitativepercentile: true,
        quantitativescore: true,
        scorereceived: true,
        testdate: true,
        totalpercentile: true,
        totalscore: true,
        verbalpercentile: true,
        verbalscore: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Gmatscore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: GmatscoreWhereUniqueInput
  ): Promise<Gmatscore | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        analyticalwritingpercentile: true,
        analyticalwritingscore: true,

        application: {
          select: {
            id: true,
          },
        },

        datafileId: true,
        id: true,
        quantitativepercentile: true,
        quantitativescore: true,
        scorereceived: true,
        testdate: true,
        totalpercentile: true,
        totalscore: true,
        verbalpercentile: true,
        verbalscore: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Gmatscore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: GmatscoreWhereUniqueInput,
    @common.Body() data: GmatscoreUpdateInput
  ): Promise<Gmatscore | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          application: {
            connect: data.application,
          },
        },
        select: {
          analyticalwritingpercentile: true,
          analyticalwritingscore: true,

          application: {
            select: {
              id: true,
            },
          },

          datafileId: true,
          id: true,
          quantitativepercentile: true,
          quantitativescore: true,
          scorereceived: true,
          testdate: true,
          totalpercentile: true,
          totalscore: true,
          verbalpercentile: true,
          verbalscore: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Gmatscore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: GmatscoreWhereUniqueInput
  ): Promise<Gmatscore | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          analyticalwritingpercentile: true,
          analyticalwritingscore: true,

          application: {
            select: {
              id: true,
            },
          },

          datafileId: true,
          id: true,
          quantitativepercentile: true,
          quantitativescore: true,
          scorereceived: true,
          testdate: true,
          totalpercentile: true,
          totalscore: true,
          verbalpercentile: true,
          verbalscore: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
