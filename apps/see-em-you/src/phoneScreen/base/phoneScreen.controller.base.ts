/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PhoneScreenService } from "../phoneScreen.service";
import { PhoneScreenCreateInput } from "./PhoneScreenCreateInput";
import { PhoneScreen } from "./PhoneScreen";
import { PhoneScreenFindManyArgs } from "./PhoneScreenFindManyArgs";
import { PhoneScreenWhereUniqueInput } from "./PhoneScreenWhereUniqueInput";
import { PhoneScreenUpdateInput } from "./PhoneScreenUpdateInput";

export class PhoneScreenControllerBase {
  constructor(protected readonly service: PhoneScreenService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PhoneScreen })
  async createPhoneScreen(
    @common.Body() data: PhoneScreenCreateInput
  ): Promise<PhoneScreen> {
    return await this.service.createPhoneScreen({
      data: data,
      select: {
        applicationId: true,
        reviewerId: true,
        technicalScreen: true,
        languageScreen: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PhoneScreen] })
  @ApiNestedQuery(PhoneScreenFindManyArgs)
  async phoneScreens(@common.Req() request: Request): Promise<PhoneScreen[]> {
    const args = plainToClass(PhoneScreenFindManyArgs, request.query);
    return this.service.phoneScreens({
      ...args,
      select: {
        applicationId: true,
        reviewerId: true,
        technicalScreen: true,
        languageScreen: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PhoneScreen })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async phoneScreen(
    @common.Param() params: PhoneScreenWhereUniqueInput
  ): Promise<PhoneScreen | null> {
    const result = await this.service.phoneScreen({
      where: params,
      select: {
        applicationId: true,
        reviewerId: true,
        technicalScreen: true,
        languageScreen: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PhoneScreen })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePhoneScreen(
    @common.Param() params: PhoneScreenWhereUniqueInput,
    @common.Body() data: PhoneScreenUpdateInput
  ): Promise<PhoneScreen | null> {
    try {
      return await this.service.updatePhoneScreen({
        where: params,
        data: data,
        select: {
          applicationId: true,
          reviewerId: true,
          technicalScreen: true,
          languageScreen: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PhoneScreen })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePhoneScreen(
    @common.Param() params: PhoneScreenWhereUniqueInput
  ): Promise<PhoneScreen | null> {
    try {
      return await this.service.deletePhoneScreen({
        where: params,
        select: {
          applicationId: true,
          reviewerId: true,
          technicalScreen: true,
          languageScreen: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
