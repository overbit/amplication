/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MseLetterRecService } from "../mseLetterRec.service";
import { MseLetterRecCreateInput } from "./MseLetterRecCreateInput";
import { MseLetterRec } from "./MseLetterRec";
import { MseLetterRecFindManyArgs } from "./MseLetterRecFindManyArgs";
import { MseLetterRecWhereUniqueInput } from "./MseLetterRecWhereUniqueInput";
import { MseLetterRecUpdateInput } from "./MseLetterRecUpdateInput";

export class MseLetterRecControllerBase {
  constructor(protected readonly service: MseLetterRecService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MseLetterRec })
  async createMseLetterRec(
    @common.Body() data: MseLetterRecCreateInput
  ): Promise<MseLetterRec> {
    return await this.service.createMseLetterRec({
      data: data,
      select: {
        algortihms: true,
        applicationId: true,
        dataStructures: true,
        discrete: true,
        id: true,
        java: true,
        reviewerId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MseLetterRec] })
  @ApiNestedQuery(MseLetterRecFindManyArgs)
  async mseLetterRecs(@common.Req() request: Request): Promise<MseLetterRec[]> {
    const args = plainToClass(MseLetterRecFindManyArgs, request.query);
    return this.service.mseLetterRecs({
      ...args,
      select: {
        algortihms: true,
        applicationId: true,
        dataStructures: true,
        discrete: true,
        id: true,
        java: true,
        reviewerId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MseLetterRec })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mseLetterRec(
    @common.Param() params: MseLetterRecWhereUniqueInput
  ): Promise<MseLetterRec | null> {
    const result = await this.service.mseLetterRec({
      where: params,
      select: {
        algortihms: true,
        applicationId: true,
        dataStructures: true,
        discrete: true,
        id: true,
        java: true,
        reviewerId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MseLetterRec })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMseLetterRec(
    @common.Param() params: MseLetterRecWhereUniqueInput,
    @common.Body() data: MseLetterRecUpdateInput
  ): Promise<MseLetterRec | null> {
    try {
      return await this.service.updateMseLetterRec({
        where: params,
        data: data,
        select: {
          algortihms: true,
          applicationId: true,
          dataStructures: true,
          discrete: true,
          id: true,
          java: true,
          reviewerId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MseLetterRec })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMseLetterRec(
    @common.Param() params: MseLetterRecWhereUniqueInput
  ): Promise<MseLetterRec | null> {
    try {
      return await this.service.deleteMseLetterRec({
        where: params,
        select: {
          algortihms: true,
          applicationId: true,
          dataStructures: true,
          discrete: true,
          id: true,
          java: true,
          reviewerId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
