/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MseCodility } from "./MseCodility";
import { MseCodilityCountArgs } from "./MseCodilityCountArgs";
import { MseCodilityFindManyArgs } from "./MseCodilityFindManyArgs";
import { MseCodilityFindUniqueArgs } from "./MseCodilityFindUniqueArgs";
import { CreateMseCodilityArgs } from "./CreateMseCodilityArgs";
import { UpdateMseCodilityArgs } from "./UpdateMseCodilityArgs";
import { DeleteMseCodilityArgs } from "./DeleteMseCodilityArgs";
import { Application } from "../../application/base/Application";
import { MseCodilityService } from "../mseCodility.service";
@graphql.Resolver(() => MseCodility)
export class MseCodilityResolverBase {
  constructor(protected readonly service: MseCodilityService) {}

  async _mseCodilitiesMeta(
    @graphql.Args() args: MseCodilityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MseCodility])
  async mseCodilities(
    @graphql.Args() args: MseCodilityFindManyArgs
  ): Promise<MseCodility[]> {
    return this.service.mseCodilities(args);
  }

  @graphql.Query(() => MseCodility, { nullable: true })
  async mseCodility(
    @graphql.Args() args: MseCodilityFindUniqueArgs
  ): Promise<MseCodility | null> {
    const result = await this.service.mseCodility(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MseCodility)
  async createMseCodility(
    @graphql.Args() args: CreateMseCodilityArgs
  ): Promise<MseCodility> {
    return await this.service.createMseCodility({
      ...args,
      data: {
        ...args.data,

        application: {
          connect: args.data.application,
        },
      },
    });
  }

  @graphql.Mutation(() => MseCodility)
  async updateMseCodility(
    @graphql.Args() args: UpdateMseCodilityArgs
  ): Promise<MseCodility | null> {
    try {
      return await this.service.updateMseCodility({
        ...args,
        data: {
          ...args.data,

          application: {
            connect: args.data.application,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MseCodility)
  async deleteMseCodility(
    @graphql.Args() args: DeleteMseCodilityArgs
  ): Promise<MseCodility | null> {
    try {
      return await this.service.deleteMseCodility(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Application, {
    nullable: true,
    name: "application",
  })
  async getApplication(
    @graphql.Parent() parent: MseCodility
  ): Promise<Application | null> {
    const result = await this.service.getApplication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
