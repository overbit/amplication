/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MseCodility, // @ts-ignore
  Application,
} from "@prisma/client";

export class MseCodilityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.MseCodilityCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.MseCodilityCountArgs>
  ): Promise<number> {
    return this.prisma.mseCodility.count(args);
  }

  async mseCodilities<T extends Prisma.MseCodilityFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MseCodilityFindManyArgs>
  ): Promise<MseCodility[]> {
    return this.prisma.mseCodility.findMany(args);
  }
  async mseCodility<T extends Prisma.MseCodilityFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MseCodilityFindUniqueArgs>
  ): Promise<MseCodility | null> {
    return this.prisma.mseCodility.findUnique(args);
  }
  async createMseCodility<T extends Prisma.MseCodilityCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MseCodilityCreateArgs>
  ): Promise<MseCodility> {
    return this.prisma.mseCodility.create<T>(args);
  }
  async updateMseCodility<T extends Prisma.MseCodilityUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MseCodilityUpdateArgs>
  ): Promise<MseCodility> {
    return this.prisma.mseCodility.update<T>(args);
  }
  async deleteMseCodility<T extends Prisma.MseCodilityDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MseCodilityDeleteArgs>
  ): Promise<MseCodility> {
    return this.prisma.mseCodility.delete(args);
  }

  async getApplication(parentId: number): Promise<Application | null> {
    return this.prisma.mseCodility
      .findUnique({
        where: { id: parentId },
      })
      .application();
  }
}
