/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Unit, // @ts-ignore
  DomainUnit,
} from "@prisma/client";

export class UnitServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.UnitCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.UnitCountArgs>
  ): Promise<number> {
    return this.prisma.unit.count(args);
  }

  async units<T extends Prisma.UnitFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UnitFindManyArgs>
  ): Promise<Unit[]> {
    return this.prisma.unit.findMany(args);
  }
  async unit<T extends Prisma.UnitFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UnitFindUniqueArgs>
  ): Promise<Unit | null> {
    return this.prisma.unit.findUnique(args);
  }
  async createUnit<T extends Prisma.UnitCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UnitCreateArgs>
  ): Promise<Unit> {
    return this.prisma.unit.create<T>(args);
  }
  async updateUnit<T extends Prisma.UnitUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UnitUpdateArgs>
  ): Promise<Unit> {
    return this.prisma.unit.update<T>(args);
  }
  async deleteUnit<T extends Prisma.UnitDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UnitDeleteArgs>
  ): Promise<Unit> {
    return this.prisma.unit.delete(args);
  }

  async findDomainUnit(
    parentId: number,
    args: Prisma.DomainUnitFindManyArgs
  ): Promise<DomainUnit[]> {
    return this.prisma.unit
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .domainUnit(args);
  }
}
