/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LuProgramsInterestService } from "../luProgramsInterest.service";
import { LuProgramsInterestCreateInput } from "./LuProgramsInterestCreateInput";
import { LuProgramsInterest } from "./LuProgramsInterest";
import { LuProgramsInterestFindManyArgs } from "./LuProgramsInterestFindManyArgs";
import { LuProgramsInterestWhereUniqueInput } from "./LuProgramsInterestWhereUniqueInput";
import { LuProgramsInterestUpdateInput } from "./LuProgramsInterestUpdateInput";

export class LuProgramsInterestControllerBase {
  constructor(protected readonly service: LuProgramsInterestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LuProgramsInterest })
  async createLuProgramsInterest(
    @common.Body() data: LuProgramsInterestCreateInput
  ): Promise<LuProgramsInterest> {
    return await this.service.createLuProgramsInterest({
      data: data,
      select: {
        id: true,
        interestId: true,
        programId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LuProgramsInterest] })
  @ApiNestedQuery(LuProgramsInterestFindManyArgs)
  async luProgramsInterests(
    @common.Req() request: Request
  ): Promise<LuProgramsInterest[]> {
    const args = plainToClass(LuProgramsInterestFindManyArgs, request.query);
    return this.service.luProgramsInterests({
      ...args,
      select: {
        id: true,
        interestId: true,
        programId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LuProgramsInterest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async luProgramsInterest(
    @common.Param() params: LuProgramsInterestWhereUniqueInput
  ): Promise<LuProgramsInterest | null> {
    const result = await this.service.luProgramsInterest({
      where: params,
      select: {
        id: true,
        interestId: true,
        programId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LuProgramsInterest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLuProgramsInterest(
    @common.Param() params: LuProgramsInterestWhereUniqueInput,
    @common.Body() data: LuProgramsInterestUpdateInput
  ): Promise<LuProgramsInterest | null> {
    try {
      return await this.service.updateLuProgramsInterest({
        where: params,
        data: data,
        select: {
          id: true,
          interestId: true,
          programId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LuProgramsInterest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLuProgramsInterest(
    @common.Param() params: LuProgramsInterestWhereUniqueInput
  ): Promise<LuProgramsInterest | null> {
    try {
      return await this.service.deleteLuProgramsInterest({
        where: params,
        select: {
          id: true,
          interestId: true,
          programId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
