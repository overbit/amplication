/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VeteranInfoService } from "../veteranInfo.service";
import { VeteranInfoCreateInput } from "./VeteranInfoCreateInput";
import { VeteranInfo } from "./VeteranInfo";
import { VeteranInfoFindManyArgs } from "./VeteranInfoFindManyArgs";
import { VeteranInfoWhereUniqueInput } from "./VeteranInfoWhereUniqueInput";
import { VeteranInfoUpdateInput } from "./VeteranInfoUpdateInput";

export class VeteranInfoControllerBase {
  constructor(protected readonly service: VeteranInfoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VeteranInfo })
  async createVeteranInfo(
    @common.Body() data: VeteranInfoCreateInput
  ): Promise<VeteranInfo> {
    return await this.service.createVeteranInfo({
      data: data,
      select: {
        branch: true,
        discharge: true,
        enddate: true,
        id: true,
        startdate: true,
        status: true,
        statusEnroll: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [VeteranInfo] })
  @ApiNestedQuery(VeteranInfoFindManyArgs)
  async veteranInfos(@common.Req() request: Request): Promise<VeteranInfo[]> {
    const args = plainToClass(VeteranInfoFindManyArgs, request.query);
    return this.service.veteranInfos({
      ...args,
      select: {
        branch: true,
        discharge: true,
        enddate: true,
        id: true,
        startdate: true,
        status: true,
        statusEnroll: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VeteranInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async veteranInfo(
    @common.Param() params: VeteranInfoWhereUniqueInput
  ): Promise<VeteranInfo | null> {
    const result = await this.service.veteranInfo({
      where: params,
      select: {
        branch: true,
        discharge: true,
        enddate: true,
        id: true,
        startdate: true,
        status: true,
        statusEnroll: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VeteranInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVeteranInfo(
    @common.Param() params: VeteranInfoWhereUniqueInput,
    @common.Body() data: VeteranInfoUpdateInput
  ): Promise<VeteranInfo | null> {
    try {
      return await this.service.updateVeteranInfo({
        where: params,
        data: data,
        select: {
          branch: true,
          discharge: true,
          enddate: true,
          id: true,
          startdate: true,
          status: true,
          statusEnroll: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VeteranInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVeteranInfo(
    @common.Param() params: VeteranInfoWhereUniqueInput
  ): Promise<VeteranInfo | null> {
    try {
      return await this.service.deleteVeteranInfo({
        where: params,
        select: {
          branch: true,
          discharge: true,
          enddate: true,
          id: true,
          startdate: true,
          status: true,
          statusEnroll: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
