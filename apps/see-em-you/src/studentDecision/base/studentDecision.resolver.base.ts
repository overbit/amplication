/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateStudentDecisionArgs } from "./CreateStudentDecisionArgs";
import { UpdateStudentDecisionArgs } from "./UpdateStudentDecisionArgs";
import { DeleteStudentDecisionArgs } from "./DeleteStudentDecisionArgs";
import { StudentDecisionCountArgs } from "./StudentDecisionCountArgs";
import { StudentDecisionFindManyArgs } from "./StudentDecisionFindManyArgs";
import { StudentDecisionFindUniqueArgs } from "./StudentDecisionFindUniqueArgs";
import { StudentDecision } from "./StudentDecision";
import { Application } from "../../application/base/Application";
import { StudentDecisionService } from "../studentDecision.service";
@graphql.Resolver(() => StudentDecision)
export class StudentDecisionResolverBase {
  constructor(protected readonly service: StudentDecisionService) {}

  async _studentDecisionsMeta(
    @graphql.Args() args: StudentDecisionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StudentDecision])
  async studentDecisions(
    @graphql.Args() args: StudentDecisionFindManyArgs
  ): Promise<StudentDecision[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => StudentDecision, { nullable: true })
  async studentDecision(
    @graphql.Args() args: StudentDecisionFindUniqueArgs
  ): Promise<StudentDecision | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StudentDecision)
  async createStudentDecision(
    @graphql.Args() args: CreateStudentDecisionArgs
  ): Promise<StudentDecision> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        application: {
          connect: args.data.application,
        },
      },
    });
  }

  @graphql.Mutation(() => StudentDecision)
  async updateStudentDecision(
    @graphql.Args() args: UpdateStudentDecisionArgs
  ): Promise<StudentDecision | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          application: {
            connect: args.data.application,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StudentDecision)
  async deleteStudentDecision(
    @graphql.Args() args: DeleteStudentDecisionArgs
  ): Promise<StudentDecision | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Application, {
    nullable: true,
    name: "application",
  })
  async resolveFieldApplication(
    @graphql.Parent() parent: StudentDecision
  ): Promise<Application | null> {
    const result = await this.service.getApplication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
