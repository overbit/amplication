/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FellowshipService } from "../fellowship.service";
import { FellowshipCreateInput } from "./FellowshipCreateInput";
import { Fellowship } from "./Fellowship";
import { FellowshipFindManyArgs } from "./FellowshipFindManyArgs";
import { FellowshipWhereUniqueInput } from "./FellowshipWhereUniqueInput";
import { FellowshipUpdateInput } from "./FellowshipUpdateInput";

export class FellowshipControllerBase {
  constructor(protected readonly service: FellowshipService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Fellowship })
  async createFellowship(
    @common.Body() data: FellowshipCreateInput
  ): Promise<Fellowship> {
    return await this.service.createFellowship({
      data: {
        ...data,

        application: {
          connect: data.application,
        },
      },
      select: {
        name: true,
        amount: true,
        status: true,
        appliedDate: true,
        awardDate: true,
        duration: true,
        datafileId: true,
        short: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Fellowship] })
  @ApiNestedQuery(FellowshipFindManyArgs)
  async fellowships(@common.Req() request: Request): Promise<Fellowship[]> {
    const args = plainToClass(FellowshipFindManyArgs, request.query);
    return this.service.fellowships({
      ...args,
      select: {
        name: true,
        amount: true,
        status: true,
        appliedDate: true,
        awardDate: true,
        duration: true,
        datafileId: true,
        short: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Fellowship })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async fellowship(
    @common.Param() params: FellowshipWhereUniqueInput
  ): Promise<Fellowship | null> {
    const result = await this.service.fellowship({
      where: params,
      select: {
        name: true,
        amount: true,
        status: true,
        appliedDate: true,
        awardDate: true,
        duration: true,
        datafileId: true,
        short: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Fellowship })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFellowship(
    @common.Param() params: FellowshipWhereUniqueInput,
    @common.Body() data: FellowshipUpdateInput
  ): Promise<Fellowship | null> {
    try {
      return await this.service.updateFellowship({
        where: params,
        data: {
          ...data,

          application: {
            connect: data.application,
          },
        },
        select: {
          name: true,
          amount: true,
          status: true,
          appliedDate: true,
          awardDate: true,
          duration: true,
          datafileId: true,
          short: true,

          application: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Fellowship })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFellowship(
    @common.Param() params: FellowshipWhereUniqueInput
  ): Promise<Fellowship | null> {
    try {
      return await this.service.deleteFellowship({
        where: params,
        select: {
          name: true,
          amount: true,
          status: true,
          appliedDate: true,
          awardDate: true,
          duration: true,
          datafileId: true,
          short: true,

          application: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
