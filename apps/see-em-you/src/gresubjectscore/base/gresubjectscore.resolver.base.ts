/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateGresubjectscoreArgs } from "./CreateGresubjectscoreArgs";
import { UpdateGresubjectscoreArgs } from "./UpdateGresubjectscoreArgs";
import { DeleteGresubjectscoreArgs } from "./DeleteGresubjectscoreArgs";
import { GresubjectscoreCountArgs } from "./GresubjectscoreCountArgs";
import { GresubjectscoreFindManyArgs } from "./GresubjectscoreFindManyArgs";
import { GresubjectscoreFindUniqueArgs } from "./GresubjectscoreFindUniqueArgs";
import { Gresubjectscore } from "./Gresubjectscore";
import { Application } from "../../application/base/Application";
import { GresubjectscoreService } from "../gresubjectscore.service";
@graphql.Resolver(() => Gresubjectscore)
export class GresubjectscoreResolverBase {
  constructor(protected readonly service: GresubjectscoreService) {}

  async _gresubjectscoresMeta(
    @graphql.Args() args: GresubjectscoreCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Gresubjectscore])
  async gresubjectscores(
    @graphql.Args() args: GresubjectscoreFindManyArgs
  ): Promise<Gresubjectscore[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Gresubjectscore, { nullable: true })
  async gresubjectscore(
    @graphql.Args() args: GresubjectscoreFindUniqueArgs
  ): Promise<Gresubjectscore | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Gresubjectscore)
  async createGresubjectscore(
    @graphql.Args() args: CreateGresubjectscoreArgs
  ): Promise<Gresubjectscore> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        application: {
          connect: args.data.application,
        },
      },
    });
  }

  @graphql.Mutation(() => Gresubjectscore)
  async updateGresubjectscore(
    @graphql.Args() args: UpdateGresubjectscoreArgs
  ): Promise<Gresubjectscore | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          application: {
            connect: args.data.application,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Gresubjectscore)
  async deleteGresubjectscore(
    @graphql.Args() args: DeleteGresubjectscoreArgs
  ): Promise<Gresubjectscore | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Application, {
    nullable: true,
    name: "application",
  })
  async resolveFieldApplication(
    @graphql.Parent() parent: Gresubjectscore
  ): Promise<Application | null> {
    const result = await this.service.getApplication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
