/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GresubjectscoreService } from "../gresubjectscore.service";
import { GresubjectscoreCreateInput } from "./GresubjectscoreCreateInput";
import { Gresubjectscore } from "./Gresubjectscore";
import { GresubjectscoreFindManyArgs } from "./GresubjectscoreFindManyArgs";
import { GresubjectscoreWhereUniqueInput } from "./GresubjectscoreWhereUniqueInput";
import { GresubjectscoreUpdateInput } from "./GresubjectscoreUpdateInput";

export class GresubjectscoreControllerBase {
  constructor(protected readonly service: GresubjectscoreService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Gresubjectscore })
  async createGresubjectscore(
    @common.Body() data: GresubjectscoreCreateInput
  ): Promise<Gresubjectscore> {
    return await this.service.createGresubjectscore({
      data: {
        ...data,

        application: {
          connect: data.application,
        },
      },
      select: {
        testdate: true,
        name: true,
        score: true,
        percentile: true,
        datafileId: true,
        greSubEmail: true,
        scorereceived: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Gresubjectscore] })
  @ApiNestedQuery(GresubjectscoreFindManyArgs)
  async gresubjectscores(
    @common.Req() request: Request
  ): Promise<Gresubjectscore[]> {
    const args = plainToClass(GresubjectscoreFindManyArgs, request.query);
    return this.service.gresubjectscores({
      ...args,
      select: {
        testdate: true,
        name: true,
        score: true,
        percentile: true,
        datafileId: true,
        greSubEmail: true,
        scorereceived: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Gresubjectscore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async gresubjectscore(
    @common.Param() params: GresubjectscoreWhereUniqueInput
  ): Promise<Gresubjectscore | null> {
    const result = await this.service.gresubjectscore({
      where: params,
      select: {
        testdate: true,
        name: true,
        score: true,
        percentile: true,
        datafileId: true,
        greSubEmail: true,
        scorereceived: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Gresubjectscore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGresubjectscore(
    @common.Param() params: GresubjectscoreWhereUniqueInput,
    @common.Body() data: GresubjectscoreUpdateInput
  ): Promise<Gresubjectscore | null> {
    try {
      return await this.service.updateGresubjectscore({
        where: params,
        data: {
          ...data,

          application: {
            connect: data.application,
          },
        },
        select: {
          testdate: true,
          name: true,
          score: true,
          percentile: true,
          datafileId: true,
          greSubEmail: true,
          scorereceived: true,

          application: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Gresubjectscore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGresubjectscore(
    @common.Param() params: GresubjectscoreWhereUniqueInput
  ): Promise<Gresubjectscore | null> {
    try {
      return await this.service.deleteGresubjectscore({
        where: params,
        select: {
          testdate: true,
          name: true,
          score: true,
          percentile: true,
          datafileId: true,
          greSubEmail: true,
          scorereceived: true,

          application: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
