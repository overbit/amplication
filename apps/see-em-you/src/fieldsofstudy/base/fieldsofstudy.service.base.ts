/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Fieldsofstudy as PrismaFieldsofstudy,
  ProgramModel as PrismaProgramModel,
} from "@prisma/client";

export class FieldsofstudyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.FieldsofstudyCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.FieldsofstudyCountArgs>
  ): Promise<number> {
    return this.prisma.fieldsofstudy.count(args);
  }

  async fieldsofstudies<T extends Prisma.FieldsofstudyFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FieldsofstudyFindManyArgs>
  ): Promise<PrismaFieldsofstudy[]> {
    return this.prisma.fieldsofstudy.findMany(args);
  }
  async fieldsofstudy<T extends Prisma.FieldsofstudyFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FieldsofstudyFindUniqueArgs>
  ): Promise<PrismaFieldsofstudy | null> {
    return this.prisma.fieldsofstudy.findUnique(args);
  }
  async createFieldsofstudy<T extends Prisma.FieldsofstudyCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FieldsofstudyCreateArgs>
  ): Promise<PrismaFieldsofstudy> {
    return this.prisma.fieldsofstudy.create<T>(args);
  }
  async updateFieldsofstudy<T extends Prisma.FieldsofstudyUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FieldsofstudyUpdateArgs>
  ): Promise<PrismaFieldsofstudy> {
    return this.prisma.fieldsofstudy.update<T>(args);
  }
  async deleteFieldsofstudy<T extends Prisma.FieldsofstudyDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FieldsofstudyDeleteArgs>
  ): Promise<PrismaFieldsofstudy> {
    return this.prisma.fieldsofstudy.delete(args);
  }

  async findPrograms(
    parentId: number,
    args: Prisma.ProgramModelFindManyArgs
  ): Promise<PrismaProgramModel[]> {
    return this.prisma.fieldsofstudy
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .programs(args);
  }
}
