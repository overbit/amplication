/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Committee as PrismaCommittee } from "@prisma/client";

export class CommitteeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.CommitteeCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommitteeCountArgs>
  ): Promise<number> {
    return this.prisma.committee.count(args);
  }

  async committees<T extends Prisma.CommitteeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommitteeFindManyArgs>
  ): Promise<PrismaCommittee[]> {
    return this.prisma.committee.findMany(args);
  }
  async committee<T extends Prisma.CommitteeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommitteeFindUniqueArgs>
  ): Promise<PrismaCommittee | null> {
    return this.prisma.committee.findUnique(args);
  }
  async createCommittee<T extends Prisma.CommitteeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommitteeCreateArgs>
  ): Promise<PrismaCommittee> {
    return this.prisma.committee.create<T>(args);
  }
  async updateCommittee<T extends Prisma.CommitteeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommitteeUpdateArgs>
  ): Promise<PrismaCommittee> {
    return this.prisma.committee.update<T>(args);
  }
  async deleteCommittee<T extends Prisma.CommitteeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommitteeDeleteArgs>
  ): Promise<PrismaCommittee> {
    return this.prisma.committee.delete(args);
  }
}
