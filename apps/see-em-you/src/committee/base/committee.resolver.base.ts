/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateCommitteeArgs } from "./CreateCommitteeArgs";
import { UpdateCommitteeArgs } from "./UpdateCommitteeArgs";
import { DeleteCommitteeArgs } from "./DeleteCommitteeArgs";
import { CommitteeCountArgs } from "./CommitteeCountArgs";
import { CommitteeFindManyArgs } from "./CommitteeFindManyArgs";
import { CommitteeFindUniqueArgs } from "./CommitteeFindUniqueArgs";
import { Committee } from "./Committee";
import { CommitteeService } from "../committee.service";
@graphql.Resolver(() => Committee)
export class CommitteeResolverBase {
  constructor(protected readonly service: CommitteeService) {}

  async _committeesMeta(
    @graphql.Args() args: CommitteeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Committee])
  async committees(
    @graphql.Args() args: CommitteeFindManyArgs
  ): Promise<Committee[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Committee, { nullable: true })
  async committee(
    @graphql.Args() args: CommitteeFindUniqueArgs
  ): Promise<Committee | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Committee)
  async createCommittee(
    @graphql.Args() args: CreateCommitteeArgs
  ): Promise<Committee> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Committee)
  async updateCommittee(
    @graphql.Args() args: UpdateCommitteeArgs
  ): Promise<Committee | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Committee)
  async deleteCommittee(
    @graphql.Args() args: DeleteCommitteeArgs
  ): Promise<Committee | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
