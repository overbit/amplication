/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, MitsSlatePub as PrismaMitsSlatePub } from "@prisma/client";

export class MitsSlatePubServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.MitsSlatePubCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.MitsSlatePubCountArgs>
  ): Promise<number> {
    return this.prisma.mitsSlatePub.count(args);
  }

  async mitsSlatePubs<T extends Prisma.MitsSlatePubFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MitsSlatePubFindManyArgs>
  ): Promise<PrismaMitsSlatePub[]> {
    return this.prisma.mitsSlatePub.findMany(args);
  }
  async mitsSlatePub<T extends Prisma.MitsSlatePubFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MitsSlatePubFindUniqueArgs>
  ): Promise<PrismaMitsSlatePub | null> {
    return this.prisma.mitsSlatePub.findUnique(args);
  }
  async createMitsSlatePub<T extends Prisma.MitsSlatePubCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MitsSlatePubCreateArgs>
  ): Promise<PrismaMitsSlatePub> {
    return this.prisma.mitsSlatePub.create<T>(args);
  }
  async updateMitsSlatePub<T extends Prisma.MitsSlatePubUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MitsSlatePubUpdateArgs>
  ): Promise<PrismaMitsSlatePub> {
    return this.prisma.mitsSlatePub.update<T>(args);
  }
  async deleteMitsSlatePub<T extends Prisma.MitsSlatePubDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MitsSlatePubDeleteArgs>
  ): Promise<PrismaMitsSlatePub> {
    return this.prisma.mitsSlatePub.delete(args);
  }
}
