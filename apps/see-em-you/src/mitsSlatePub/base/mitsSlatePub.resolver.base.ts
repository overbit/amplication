/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateMitsSlatePubArgs } from "./CreateMitsSlatePubArgs";
import { UpdateMitsSlatePubArgs } from "./UpdateMitsSlatePubArgs";
import { DeleteMitsSlatePubArgs } from "./DeleteMitsSlatePubArgs";
import { MitsSlatePubCountArgs } from "./MitsSlatePubCountArgs";
import { MitsSlatePubFindManyArgs } from "./MitsSlatePubFindManyArgs";
import { MitsSlatePubFindUniqueArgs } from "./MitsSlatePubFindUniqueArgs";
import { MitsSlatePub } from "./MitsSlatePub";
import { MitsSlatePubService } from "../mitsSlatePub.service";
@graphql.Resolver(() => MitsSlatePub)
export class MitsSlatePubResolverBase {
  constructor(protected readonly service: MitsSlatePubService) {}

  async _mitsSlatePubsMeta(
    @graphql.Args() args: MitsSlatePubCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MitsSlatePub])
  async mitsSlatePubs(
    @graphql.Args() args: MitsSlatePubFindManyArgs
  ): Promise<MitsSlatePub[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => MitsSlatePub, { nullable: true })
  async mitsSlatePub(
    @graphql.Args() args: MitsSlatePubFindUniqueArgs
  ): Promise<MitsSlatePub | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MitsSlatePub)
  async createMitsSlatePub(
    @graphql.Args() args: CreateMitsSlatePubArgs
  ): Promise<MitsSlatePub> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MitsSlatePub)
  async updateMitsSlatePub(
    @graphql.Args() args: UpdateMitsSlatePubArgs
  ): Promise<MitsSlatePub | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MitsSlatePub)
  async deleteMitsSlatePub(
    @graphql.Args() args: DeleteMitsSlatePubArgs
  ): Promise<MitsSlatePub | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
