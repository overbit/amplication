/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MitsSlateAppSchool } from "./MitsSlateAppSchool";
import { MitsSlateAppSchoolCountArgs } from "./MitsSlateAppSchoolCountArgs";
import { MitsSlateAppSchoolFindManyArgs } from "./MitsSlateAppSchoolFindManyArgs";
import { MitsSlateAppSchoolFindUniqueArgs } from "./MitsSlateAppSchoolFindUniqueArgs";
import { CreateMitsSlateAppSchoolArgs } from "./CreateMitsSlateAppSchoolArgs";
import { UpdateMitsSlateAppSchoolArgs } from "./UpdateMitsSlateAppSchoolArgs";
import { DeleteMitsSlateAppSchoolArgs } from "./DeleteMitsSlateAppSchoolArgs";
import { MitsSlateAppSchoolService } from "../mitsSlateAppSchool.service";
@graphql.Resolver(() => MitsSlateAppSchool)
export class MitsSlateAppSchoolResolverBase {
  constructor(protected readonly service: MitsSlateAppSchoolService) {}

  async _mitsSlateAppSchoolsMeta(
    @graphql.Args() args: MitsSlateAppSchoolCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MitsSlateAppSchool])
  async mitsSlateAppSchools(
    @graphql.Args() args: MitsSlateAppSchoolFindManyArgs
  ): Promise<MitsSlateAppSchool[]> {
    return this.service.mitsSlateAppSchools(args);
  }

  @graphql.Query(() => MitsSlateAppSchool, { nullable: true })
  async mitsSlateAppSchool(
    @graphql.Args() args: MitsSlateAppSchoolFindUniqueArgs
  ): Promise<MitsSlateAppSchool | null> {
    const result = await this.service.mitsSlateAppSchool(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MitsSlateAppSchool)
  async createMitsSlateAppSchool(
    @graphql.Args() args: CreateMitsSlateAppSchoolArgs
  ): Promise<MitsSlateAppSchool> {
    return await this.service.createMitsSlateAppSchool({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MitsSlateAppSchool)
  async updateMitsSlateAppSchool(
    @graphql.Args() args: UpdateMitsSlateAppSchoolArgs
  ): Promise<MitsSlateAppSchool | null> {
    try {
      return await this.service.updateMitsSlateAppSchool({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MitsSlateAppSchool)
  async deleteMitsSlateAppSchool(
    @graphql.Args() args: DeleteMitsSlateAppSchoolArgs
  ): Promise<MitsSlateAppSchool | null> {
    try {
      return await this.service.deleteMitsSlateAppSchool(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
