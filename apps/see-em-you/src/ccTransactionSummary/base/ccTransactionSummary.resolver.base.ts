/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateCcTransactionSummaryArgs } from "./CreateCcTransactionSummaryArgs";
import { UpdateCcTransactionSummaryArgs } from "./UpdateCcTransactionSummaryArgs";
import { DeleteCcTransactionSummaryArgs } from "./DeleteCcTransactionSummaryArgs";
import { CcTransactionSummaryCountArgs } from "./CcTransactionSummaryCountArgs";
import { CcTransactionSummaryFindManyArgs } from "./CcTransactionSummaryFindManyArgs";
import { CcTransactionSummaryFindUniqueArgs } from "./CcTransactionSummaryFindUniqueArgs";
import { CcTransactionSummary } from "./CcTransactionSummary";
import { CcTransactionSummaryService } from "../ccTransactionSummary.service";
@graphql.Resolver(() => CcTransactionSummary)
export class CcTransactionSummaryResolverBase {
  constructor(protected readonly service: CcTransactionSummaryService) {}

  async _ccTransactionSummariesMeta(
    @graphql.Args() args: CcTransactionSummaryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CcTransactionSummary])
  async ccTransactionSummaries(
    @graphql.Args() args: CcTransactionSummaryFindManyArgs
  ): Promise<CcTransactionSummary[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => CcTransactionSummary, { nullable: true })
  async ccTransactionSummary(
    @graphql.Args() args: CcTransactionSummaryFindUniqueArgs
  ): Promise<CcTransactionSummary | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CcTransactionSummary)
  async createCcTransactionSummary(
    @graphql.Args() args: CreateCcTransactionSummaryArgs
  ): Promise<CcTransactionSummary> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CcTransactionSummary)
  async updateCcTransactionSummary(
    @graphql.Args() args: UpdateCcTransactionSummaryArgs
  ): Promise<CcTransactionSummary | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CcTransactionSummary)
  async deleteCcTransactionSummary(
    @graphql.Args() args: DeleteCcTransactionSummaryArgs
  ): Promise<CcTransactionSummary | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
