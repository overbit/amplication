/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GroupRankCommentService } from "../groupRankComment.service";
import { GroupRankCommentCreateInput } from "./GroupRankCommentCreateInput";
import { GroupRankComment } from "./GroupRankComment";
import { GroupRankCommentFindManyArgs } from "./GroupRankCommentFindManyArgs";
import { GroupRankCommentWhereUniqueInput } from "./GroupRankCommentWhereUniqueInput";
import { GroupRankCommentUpdateInput } from "./GroupRankCommentUpdateInput";

export class GroupRankCommentControllerBase {
  constructor(protected readonly service: GroupRankCommentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GroupRankComment })
  async createGroupRankComment(
    @common.Body() data: GroupRankCommentCreateInput
  ): Promise<GroupRankComment> {
    return await this.service.createGroupRankComment({
      data: data,
      select: {
        comment: true,
        groupId: true,
        id: true,
        luUsersUsertypesId: true,
        periodId: true,
        round: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GroupRankComment] })
  @ApiNestedQuery(GroupRankCommentFindManyArgs)
  async groupRankComments(
    @common.Req() request: Request
  ): Promise<GroupRankComment[]> {
    const args = plainToClass(GroupRankCommentFindManyArgs, request.query);
    return this.service.groupRankComments({
      ...args,
      select: {
        comment: true,
        groupId: true,
        id: true,
        luUsersUsertypesId: true,
        periodId: true,
        round: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GroupRankComment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async groupRankComment(
    @common.Param() params: GroupRankCommentWhereUniqueInput
  ): Promise<GroupRankComment | null> {
    const result = await this.service.groupRankComment({
      where: params,
      select: {
        comment: true,
        groupId: true,
        id: true,
        luUsersUsertypesId: true,
        periodId: true,
        round: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GroupRankComment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGroupRankComment(
    @common.Param() params: GroupRankCommentWhereUniqueInput,
    @common.Body() data: GroupRankCommentUpdateInput
  ): Promise<GroupRankComment | null> {
    try {
      return await this.service.updateGroupRankComment({
        where: params,
        data: data,
        select: {
          comment: true,
          groupId: true,
          id: true,
          luUsersUsertypesId: true,
          periodId: true,
          round: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GroupRankComment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGroupRankComment(
    @common.Param() params: GroupRankCommentWhereUniqueInput
  ): Promise<GroupRankComment | null> {
    try {
      return await this.service.deleteGroupRankComment({
        where: params,
        select: {
          comment: true,
          groupId: true,
          id: true,
          luUsersUsertypesId: true,
          periodId: true,
          round: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
