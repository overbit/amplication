/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VoucherProgramService } from "../voucherProgram.service";
import { VoucherProgramCreateInput } from "./VoucherProgramCreateInput";
import { VoucherProgram } from "./VoucherProgram";
import { VoucherProgramFindManyArgs } from "./VoucherProgramFindManyArgs";
import { VoucherProgramWhereUniqueInput } from "./VoucherProgramWhereUniqueInput";
import { VoucherProgramUpdateInput } from "./VoucherProgramUpdateInput";

export class VoucherProgramControllerBase {
  constructor(protected readonly service: VoucherProgramService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VoucherProgram })
  async createVoucherProgram(
    @common.Body() data: VoucherProgramCreateInput
  ): Promise<VoucherProgram> {
    return await this.service.createVoucherProgram({
      data: data,
      select: {
        id: true,
        programId: true,
        voucherId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [VoucherProgram] })
  @ApiNestedQuery(VoucherProgramFindManyArgs)
  async voucherPrograms(
    @common.Req() request: Request
  ): Promise<VoucherProgram[]> {
    const args = plainToClass(VoucherProgramFindManyArgs, request.query);
    return this.service.voucherPrograms({
      ...args,
      select: {
        id: true,
        programId: true,
        voucherId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VoucherProgram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async voucherProgram(
    @common.Param() params: VoucherProgramWhereUniqueInput
  ): Promise<VoucherProgram | null> {
    const result = await this.service.voucherProgram({
      where: params,
      select: {
        id: true,
        programId: true,
        voucherId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VoucherProgram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVoucherProgram(
    @common.Param() params: VoucherProgramWhereUniqueInput,
    @common.Body() data: VoucherProgramUpdateInput
  ): Promise<VoucherProgram | null> {
    try {
      return await this.service.updateVoucherProgram({
        where: params,
        data: data,
        select: {
          id: true,
          programId: true,
          voucherId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VoucherProgram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVoucherProgram(
    @common.Param() params: VoucherProgramWhereUniqueInput
  ): Promise<VoucherProgram | null> {
    try {
      return await this.service.deleteVoucherProgram({
        where: params,
        select: {
          id: true,
          programId: true,
          voucherId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
