/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ToeflService } from "../toefl.service";
import { ToeflCreateInput } from "./ToeflCreateInput";
import { Toefl } from "./Toefl";
import { ToeflFindManyArgs } from "./ToeflFindManyArgs";
import { ToeflWhereUniqueInput } from "./ToeflWhereUniqueInput";
import { ToeflUpdateInput } from "./ToeflUpdateInput";

export class ToeflControllerBase {
  constructor(protected readonly service: ToeflService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Toefl })
  async createToefl(@common.Body() data: ToeflCreateInput): Promise<Toefl> {
    return await this.service.createToefl({
      data: data,
      select: {
        applicationId: true,
        datafileId: true,
        essay: true,
        essaymb: true,
        id: true,
        scorereceived: true,
        section1: true,
        section1mb: true,
        section2: true,
        section2mb: true,
        section3: true,
        section3mb: true,
        testdate: true,
        toeflEmail: true,
        toeflPaperEmail: true,
        total: true,
        totalmb: true,
        typeField: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Toefl] })
  @ApiNestedQuery(ToeflFindManyArgs)
  async toefls(@common.Req() request: Request): Promise<Toefl[]> {
    const args = plainToClass(ToeflFindManyArgs, request.query);
    return this.service.toefls({
      ...args,
      select: {
        applicationId: true,
        datafileId: true,
        essay: true,
        essaymb: true,
        id: true,
        scorereceived: true,
        section1: true,
        section1mb: true,
        section2: true,
        section2mb: true,
        section3: true,
        section3mb: true,
        testdate: true,
        toeflEmail: true,
        toeflPaperEmail: true,
        total: true,
        totalmb: true,
        typeField: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Toefl })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async toefl(
    @common.Param() params: ToeflWhereUniqueInput
  ): Promise<Toefl | null> {
    const result = await this.service.toefl({
      where: params,
      select: {
        applicationId: true,
        datafileId: true,
        essay: true,
        essaymb: true,
        id: true,
        scorereceived: true,
        section1: true,
        section1mb: true,
        section2: true,
        section2mb: true,
        section3: true,
        section3mb: true,
        testdate: true,
        toeflEmail: true,
        toeflPaperEmail: true,
        total: true,
        totalmb: true,
        typeField: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Toefl })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateToefl(
    @common.Param() params: ToeflWhereUniqueInput,
    @common.Body() data: ToeflUpdateInput
  ): Promise<Toefl | null> {
    try {
      return await this.service.updateToefl({
        where: params,
        data: data,
        select: {
          applicationId: true,
          datafileId: true,
          essay: true,
          essaymb: true,
          id: true,
          scorereceived: true,
          section1: true,
          section1mb: true,
          section2: true,
          section2mb: true,
          section3: true,
          section3mb: true,
          testdate: true,
          toeflEmail: true,
          toeflPaperEmail: true,
          total: true,
          totalmb: true,
          typeField: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Toefl })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteToefl(
    @common.Param() params: ToeflWhereUniqueInput
  ): Promise<Toefl | null> {
    try {
      return await this.service.deleteToefl({
        where: params,
        select: {
          applicationId: true,
          datafileId: true,
          essay: true,
          essaymb: true,
          id: true,
          scorereceived: true,
          section1: true,
          section1mb: true,
          section2: true,
          section2mb: true,
          section3: true,
          section3mb: true,
          testdate: true,
          toeflEmail: true,
          toeflPaperEmail: true,
          total: true,
          totalmb: true,
          typeField: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
