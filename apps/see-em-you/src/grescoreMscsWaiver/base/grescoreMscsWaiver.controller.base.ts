/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrescoreMscsWaiverService } from "../grescoreMscsWaiver.service";
import { GrescoreMscsWaiverCreateInput } from "./GrescoreMscsWaiverCreateInput";
import { GrescoreMscsWaiver } from "./GrescoreMscsWaiver";
import { GrescoreMscsWaiverFindManyArgs } from "./GrescoreMscsWaiverFindManyArgs";
import { GrescoreMscsWaiverWhereUniqueInput } from "./GrescoreMscsWaiverWhereUniqueInput";
import { GrescoreMscsWaiverUpdateInput } from "./GrescoreMscsWaiverUpdateInput";

export class GrescoreMscsWaiverControllerBase {
  constructor(protected readonly service: GrescoreMscsWaiverService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GrescoreMscsWaiver })
  async createGrescoreMscsWaiver(
    @common.Body() data: GrescoreMscsWaiverCreateInput
  ): Promise<GrescoreMscsWaiver> {
    return await this.service.createGrescoreMscsWaiver({
      data: data,
      select: {
        waiverAgree: true,
        waiverTime: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GrescoreMscsWaiver] })
  @ApiNestedQuery(GrescoreMscsWaiverFindManyArgs)
  async grescoreMscsWaivers(
    @common.Req() request: Request
  ): Promise<GrescoreMscsWaiver[]> {
    const args = plainToClass(GrescoreMscsWaiverFindManyArgs, request.query);
    return this.service.grescoreMscsWaivers({
      ...args,
      select: {
        waiverAgree: true,
        waiverTime: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GrescoreMscsWaiver })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async grescoreMscsWaiver(
    @common.Param() params: GrescoreMscsWaiverWhereUniqueInput
  ): Promise<GrescoreMscsWaiver | null> {
    const result = await this.service.grescoreMscsWaiver({
      where: params,
      select: {
        waiverAgree: true,
        waiverTime: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GrescoreMscsWaiver })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGrescoreMscsWaiver(
    @common.Param() params: GrescoreMscsWaiverWhereUniqueInput,
    @common.Body() data: GrescoreMscsWaiverUpdateInput
  ): Promise<GrescoreMscsWaiver | null> {
    try {
      return await this.service.updateGrescoreMscsWaiver({
        where: params,
        data: data,
        select: {
          waiverAgree: true,
          waiverTime: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GrescoreMscsWaiver })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGrescoreMscsWaiver(
    @common.Param() params: GrescoreMscsWaiverWhereUniqueInput
  ): Promise<GrescoreMscsWaiver | null> {
    try {
      return await this.service.deleteGrescoreMscsWaiver({
        where: params,
        select: {
          waiverAgree: true,
          waiverTime: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
