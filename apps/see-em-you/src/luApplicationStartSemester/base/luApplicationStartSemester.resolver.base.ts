/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LuApplicationStartSemester } from "./LuApplicationStartSemester";
import { LuApplicationStartSemesterCountArgs } from "./LuApplicationStartSemesterCountArgs";
import { LuApplicationStartSemesterFindManyArgs } from "./LuApplicationStartSemesterFindManyArgs";
import { LuApplicationStartSemesterFindUniqueArgs } from "./LuApplicationStartSemesterFindUniqueArgs";
import { CreateLuApplicationStartSemesterArgs } from "./CreateLuApplicationStartSemesterArgs";
import { UpdateLuApplicationStartSemesterArgs } from "./UpdateLuApplicationStartSemesterArgs";
import { DeleteLuApplicationStartSemesterArgs } from "./DeleteLuApplicationStartSemesterArgs";
import { Application } from "../../application/base/Application";
import { LuApplicationStartSemesterService } from "../luApplicationStartSemester.service";
@graphql.Resolver(() => LuApplicationStartSemester)
export class LuApplicationStartSemesterResolverBase {
  constructor(protected readonly service: LuApplicationStartSemesterService) {}

  async _luApplicationStartSemestersMeta(
    @graphql.Args() args: LuApplicationStartSemesterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LuApplicationStartSemester])
  async luApplicationStartSemesters(
    @graphql.Args() args: LuApplicationStartSemesterFindManyArgs
  ): Promise<LuApplicationStartSemester[]> {
    return this.service.luApplicationStartSemesters(args);
  }

  @graphql.Query(() => LuApplicationStartSemester, { nullable: true })
  async luApplicationStartSemester(
    @graphql.Args() args: LuApplicationStartSemesterFindUniqueArgs
  ): Promise<LuApplicationStartSemester | null> {
    const result = await this.service.luApplicationStartSemester(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LuApplicationStartSemester)
  async createLuApplicationStartSemester(
    @graphql.Args() args: CreateLuApplicationStartSemesterArgs
  ): Promise<LuApplicationStartSemester> {
    return await this.service.createLuApplicationStartSemester({
      ...args,
      data: {
        ...args.data,

        application: {
          connect: args.data.application,
        },
      },
    });
  }

  @graphql.Mutation(() => LuApplicationStartSemester)
  async updateLuApplicationStartSemester(
    @graphql.Args() args: UpdateLuApplicationStartSemesterArgs
  ): Promise<LuApplicationStartSemester | null> {
    try {
      return await this.service.updateLuApplicationStartSemester({
        ...args,
        data: {
          ...args.data,

          application: {
            connect: args.data.application,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LuApplicationStartSemester)
  async deleteLuApplicationStartSemester(
    @graphql.Args() args: DeleteLuApplicationStartSemesterArgs
  ): Promise<LuApplicationStartSemester | null> {
    try {
      return await this.service.deleteLuApplicationStartSemester(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Application, {
    nullable: true,
    name: "application",
  })
  async getApplication(
    @graphql.Parent() parent: LuApplicationStartSemester
  ): Promise<Application | null> {
    const result = await this.service.getApplication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
