/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SlateIelt } from "./SlateIelt";
import { SlateIeltCountArgs } from "./SlateIeltCountArgs";
import { SlateIeltFindManyArgs } from "./SlateIeltFindManyArgs";
import { SlateIeltFindUniqueArgs } from "./SlateIeltFindUniqueArgs";
import { CreateSlateIeltArgs } from "./CreateSlateIeltArgs";
import { UpdateSlateIeltArgs } from "./UpdateSlateIeltArgs";
import { DeleteSlateIeltArgs } from "./DeleteSlateIeltArgs";
import { SlateIeltService } from "../slateIelt.service";
@graphql.Resolver(() => SlateIelt)
export class SlateIeltResolverBase {
  constructor(protected readonly service: SlateIeltService) {}

  async _slateIeltsMeta(
    @graphql.Args() args: SlateIeltCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SlateIelt])
  async slateIelts(
    @graphql.Args() args: SlateIeltFindManyArgs
  ): Promise<SlateIelt[]> {
    return this.service.slateIelts(args);
  }

  @graphql.Query(() => SlateIelt, { nullable: true })
  async slateIelt(
    @graphql.Args() args: SlateIeltFindUniqueArgs
  ): Promise<SlateIelt | null> {
    const result = await this.service.slateIelt(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SlateIelt)
  async createSlateIelt(
    @graphql.Args() args: CreateSlateIeltArgs
  ): Promise<SlateIelt> {
    return await this.service.createSlateIelt({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SlateIelt)
  async updateSlateIelt(
    @graphql.Args() args: UpdateSlateIeltArgs
  ): Promise<SlateIelt | null> {
    try {
      return await this.service.updateSlateIelt({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SlateIelt)
  async deleteSlateIelt(
    @graphql.Args() args: DeleteSlateIeltArgs
  ): Promise<SlateIelt | null> {
    try {
      return await this.service.deleteSlateIelt(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
