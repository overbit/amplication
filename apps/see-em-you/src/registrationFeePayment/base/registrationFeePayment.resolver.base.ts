/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RegistrationFeePayment } from "./RegistrationFeePayment";
import { RegistrationFeePaymentCountArgs } from "./RegistrationFeePaymentCountArgs";
import { RegistrationFeePaymentFindManyArgs } from "./RegistrationFeePaymentFindManyArgs";
import { RegistrationFeePaymentFindUniqueArgs } from "./RegistrationFeePaymentFindUniqueArgs";
import { CreateRegistrationFeePaymentArgs } from "./CreateRegistrationFeePaymentArgs";
import { UpdateRegistrationFeePaymentArgs } from "./UpdateRegistrationFeePaymentArgs";
import { DeleteRegistrationFeePaymentArgs } from "./DeleteRegistrationFeePaymentArgs";
import { Application } from "../../application/base/Application";
import { RegistrationFeePaymentService } from "../registrationFeePayment.service";
@graphql.Resolver(() => RegistrationFeePayment)
export class RegistrationFeePaymentResolverBase {
  constructor(protected readonly service: RegistrationFeePaymentService) {}

  async _registrationFeePaymentsMeta(
    @graphql.Args() args: RegistrationFeePaymentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RegistrationFeePayment])
  async registrationFeePayments(
    @graphql.Args() args: RegistrationFeePaymentFindManyArgs
  ): Promise<RegistrationFeePayment[]> {
    return this.service.registrationFeePayments(args);
  }

  @graphql.Query(() => RegistrationFeePayment, { nullable: true })
  async registrationFeePayment(
    @graphql.Args() args: RegistrationFeePaymentFindUniqueArgs
  ): Promise<RegistrationFeePayment | null> {
    const result = await this.service.registrationFeePayment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RegistrationFeePayment)
  async createRegistrationFeePayment(
    @graphql.Args() args: CreateRegistrationFeePaymentArgs
  ): Promise<RegistrationFeePayment> {
    return await this.service.createRegistrationFeePayment({
      ...args,
      data: {
        ...args.data,

        application: {
          connect: args.data.application,
        },
      },
    });
  }

  @graphql.Mutation(() => RegistrationFeePayment)
  async updateRegistrationFeePayment(
    @graphql.Args() args: UpdateRegistrationFeePaymentArgs
  ): Promise<RegistrationFeePayment | null> {
    try {
      return await this.service.updateRegistrationFeePayment({
        ...args,
        data: {
          ...args.data,

          application: {
            connect: args.data.application,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RegistrationFeePayment)
  async deleteRegistrationFeePayment(
    @graphql.Args() args: DeleteRegistrationFeePaymentArgs
  ): Promise<RegistrationFeePayment | null> {
    try {
      return await this.service.deleteRegistrationFeePayment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Application, {
    nullable: true,
    name: "application",
  })
  async getApplication(
    @graphql.Parent() parent: RegistrationFeePayment
  ): Promise<Application | null> {
    const result = await this.service.getApplication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
