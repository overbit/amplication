/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  RegistrationFeePayment as PrismaRegistrationFeePayment,
  Application as PrismaApplication,
} from "@prisma/client";

export class RegistrationFeePaymentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.RegistrationFeePaymentCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.RegistrationFeePaymentCountArgs>
  ): Promise<number> {
    return this.prisma.registrationFeePayment.count(args);
  }

  async registrationFeePayments<
    T extends Prisma.RegistrationFeePaymentFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.RegistrationFeePaymentFindManyArgs>
  ): Promise<PrismaRegistrationFeePayment[]> {
    return this.prisma.registrationFeePayment.findMany(args);
  }
  async registrationFeePayment<
    T extends Prisma.RegistrationFeePaymentFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.RegistrationFeePaymentFindUniqueArgs>
  ): Promise<PrismaRegistrationFeePayment | null> {
    return this.prisma.registrationFeePayment.findUnique(args);
  }
  async createRegistrationFeePayment<
    T extends Prisma.RegistrationFeePaymentCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.RegistrationFeePaymentCreateArgs>
  ): Promise<PrismaRegistrationFeePayment> {
    return this.prisma.registrationFeePayment.create<T>(args);
  }
  async updateRegistrationFeePayment<
    T extends Prisma.RegistrationFeePaymentUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.RegistrationFeePaymentUpdateArgs>
  ): Promise<PrismaRegistrationFeePayment> {
    return this.prisma.registrationFeePayment.update<T>(args);
  }
  async deleteRegistrationFeePayment<
    T extends Prisma.RegistrationFeePaymentDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.RegistrationFeePaymentDeleteArgs>
  ): Promise<PrismaRegistrationFeePayment> {
    return this.prisma.registrationFeePayment.delete(args);
  }

  async getApplication(parentId: number): Promise<PrismaApplication | null> {
    return this.prisma.registrationFeePayment
      .findUnique({
        where: { id: parentId },
      })
      .application();
  }
}
