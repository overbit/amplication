/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SlateProgramsMseReviewedService } from "../slateProgramsMseReviewed.service";
import { SlateProgramsMseReviewedCreateInput } from "./SlateProgramsMseReviewedCreateInput";
import { SlateProgramsMseReviewed } from "./SlateProgramsMseReviewed";
import { SlateProgramsMseReviewedFindManyArgs } from "./SlateProgramsMseReviewedFindManyArgs";
import { SlateProgramsMseReviewedWhereUniqueInput } from "./SlateProgramsMseReviewedWhereUniqueInput";
import { SlateProgramsMseReviewedUpdateInput } from "./SlateProgramsMseReviewedUpdateInput";

export class SlateProgramsMseReviewedControllerBase {
  constructor(protected readonly service: SlateProgramsMseReviewedService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SlateProgramsMseReviewed })
  async createSlateProgramsMseReviewed(
    @common.Body() data: SlateProgramsMseReviewedCreateInput
  ): Promise<SlateProgramsMseReviewed> {
    return await this.service.createSlateProgramsMseReviewed({
      data: data,
      select: {
        first: true,
        id: true,
        last: true,
        middle: true,
        mseProgram1: true,
        mseProgram2: true,
        mseProgram3: true,
        prefix: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SlateProgramsMseReviewed] })
  @ApiNestedQuery(SlateProgramsMseReviewedFindManyArgs)
  async slateProgramsMseRevieweds(
    @common.Req() request: Request
  ): Promise<SlateProgramsMseReviewed[]> {
    const args = plainToClass(
      SlateProgramsMseReviewedFindManyArgs,
      request.query
    );
    return this.service.slateProgramsMseRevieweds({
      ...args,
      select: {
        first: true,
        id: true,
        last: true,
        middle: true,
        mseProgram1: true,
        mseProgram2: true,
        mseProgram3: true,
        prefix: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SlateProgramsMseReviewed })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async slateProgramsMseReviewed(
    @common.Param() params: SlateProgramsMseReviewedWhereUniqueInput
  ): Promise<SlateProgramsMseReviewed | null> {
    const result = await this.service.slateProgramsMseReviewed({
      where: params,
      select: {
        first: true,
        id: true,
        last: true,
        middle: true,
        mseProgram1: true,
        mseProgram2: true,
        mseProgram3: true,
        prefix: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SlateProgramsMseReviewed })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSlateProgramsMseReviewed(
    @common.Param() params: SlateProgramsMseReviewedWhereUniqueInput,
    @common.Body() data: SlateProgramsMseReviewedUpdateInput
  ): Promise<SlateProgramsMseReviewed | null> {
    try {
      return await this.service.updateSlateProgramsMseReviewed({
        where: params,
        data: data,
        select: {
          first: true,
          id: true,
          last: true,
          middle: true,
          mseProgram1: true,
          mseProgram2: true,
          mseProgram3: true,
          prefix: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SlateProgramsMseReviewed })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSlateProgramsMseReviewed(
    @common.Param() params: SlateProgramsMseReviewedWhereUniqueInput
  ): Promise<SlateProgramsMseReviewed | null> {
    try {
      return await this.service.deleteSlateProgramsMseReviewed({
        where: params,
        select: {
          first: true,
          id: true,
          last: true,
          middle: true,
          mseProgram1: true,
          mseProgram2: true,
          mseProgram3: true,
          prefix: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
