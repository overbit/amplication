/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Reclog as PrismaReclog } from "@prisma/client";

export class ReclogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ReclogCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReclogCountArgs>
  ): Promise<number> {
    return this.prisma.reclog.count(args);
  }

  async reclogs<T extends Prisma.ReclogFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReclogFindManyArgs>
  ): Promise<PrismaReclog[]> {
    return this.prisma.reclog.findMany(args);
  }
  async reclog<T extends Prisma.ReclogFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReclogFindUniqueArgs>
  ): Promise<PrismaReclog | null> {
    return this.prisma.reclog.findUnique(args);
  }
  async createReclog<T extends Prisma.ReclogCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReclogCreateArgs>
  ): Promise<PrismaReclog> {
    return this.prisma.reclog.create<T>(args);
  }
  async updateReclog<T extends Prisma.ReclogUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReclogUpdateArgs>
  ): Promise<PrismaReclog> {
    return this.prisma.reclog.update<T>(args);
  }
  async deleteReclog<T extends Prisma.ReclogDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReclogDeleteArgs>
  ): Promise<PrismaReclog> {
    return this.prisma.reclog.delete(args);
  }
}
