/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Visatype } from "./Visatype";
import { VisatypeCountArgs } from "./VisatypeCountArgs";
import { VisatypeFindManyArgs } from "./VisatypeFindManyArgs";
import { VisatypeFindUniqueArgs } from "./VisatypeFindUniqueArgs";
import { CreateVisatypeArgs } from "./CreateVisatypeArgs";
import { UpdateVisatypeArgs } from "./UpdateVisatypeArgs";
import { DeleteVisatypeArgs } from "./DeleteVisatypeArgs";
import { VisatypeService } from "../visatype.service";
@graphql.Resolver(() => Visatype)
export class VisatypeResolverBase {
  constructor(protected readonly service: VisatypeService) {}

  async _visatypesMeta(
    @graphql.Args() args: VisatypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Visatype])
  async visatypes(
    @graphql.Args() args: VisatypeFindManyArgs
  ): Promise<Visatype[]> {
    return this.service.visatypes(args);
  }

  @graphql.Query(() => Visatype, { nullable: true })
  async visatype(
    @graphql.Args() args: VisatypeFindUniqueArgs
  ): Promise<Visatype | null> {
    const result = await this.service.visatype(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Visatype)
  async createVisatype(
    @graphql.Args() args: CreateVisatypeArgs
  ): Promise<Visatype> {
    return await this.service.createVisatype({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Visatype)
  async updateVisatype(
    @graphql.Args() args: UpdateVisatypeArgs
  ): Promise<Visatype | null> {
    try {
      return await this.service.updateVisatype({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Visatype)
  async deleteVisatype(
    @graphql.Args() args: DeleteVisatypeArgs
  ): Promise<Visatype | null> {
    try {
      return await this.service.deleteVisatype(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
