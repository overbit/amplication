/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Visatype as PrismaVisatype } from "@prisma/client";

export class VisatypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.VisatypeCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.VisatypeCountArgs>
  ): Promise<number> {
    return this.prisma.visatype.count(args);
  }

  async visatypes<T extends Prisma.VisatypeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.VisatypeFindManyArgs>
  ): Promise<PrismaVisatype[]> {
    return this.prisma.visatype.findMany(args);
  }
  async visatype<T extends Prisma.VisatypeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.VisatypeFindUniqueArgs>
  ): Promise<PrismaVisatype | null> {
    return this.prisma.visatype.findUnique(args);
  }
  async createVisatype<T extends Prisma.VisatypeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VisatypeCreateArgs>
  ): Promise<PrismaVisatype> {
    return this.prisma.visatype.create<T>(args);
  }
  async updateVisatype<T extends Prisma.VisatypeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VisatypeUpdateArgs>
  ): Promise<PrismaVisatype> {
    return this.prisma.visatype.update<T>(args);
  }
  async deleteVisatype<T extends Prisma.VisatypeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.VisatypeDeleteArgs>
  ): Promise<PrismaVisatype> {
    return this.prisma.visatype.delete(args);
  }
}
