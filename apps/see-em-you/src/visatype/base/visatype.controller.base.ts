/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VisatypeService } from "../visatype.service";
import { VisatypeCreateInput } from "./VisatypeCreateInput";
import { Visatype } from "./Visatype";
import { VisatypeFindManyArgs } from "./VisatypeFindManyArgs";
import { VisatypeWhereUniqueInput } from "./VisatypeWhereUniqueInput";
import { VisatypeUpdateInput } from "./VisatypeUpdateInput";

export class VisatypeControllerBase {
  constructor(protected readonly service: VisatypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Visatype })
  async createVisatype(
    @common.Body() data: VisatypeCreateInput
  ): Promise<Visatype> {
    return await this.service.createVisatype({
      data: data,
      select: {
        addedFor: true,
        description: true,
        id: true,
        name: true,
        short: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Visatype] })
  @ApiNestedQuery(VisatypeFindManyArgs)
  async visatypes(@common.Req() request: Request): Promise<Visatype[]> {
    const args = plainToClass(VisatypeFindManyArgs, request.query);
    return this.service.visatypes({
      ...args,
      select: {
        addedFor: true,
        description: true,
        id: true,
        name: true,
        short: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Visatype })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async visatype(
    @common.Param() params: VisatypeWhereUniqueInput
  ): Promise<Visatype | null> {
    const result = await this.service.visatype({
      where: params,
      select: {
        addedFor: true,
        description: true,
        id: true,
        name: true,
        short: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Visatype })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVisatype(
    @common.Param() params: VisatypeWhereUniqueInput,
    @common.Body() data: VisatypeUpdateInput
  ): Promise<Visatype | null> {
    try {
      return await this.service.updateVisatype({
        where: params,
        data: data,
        select: {
          addedFor: true,
          description: true,
          id: true,
          name: true,
          short: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Visatype })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVisatype(
    @common.Param() params: VisatypeWhereUniqueInput
  ): Promise<Visatype | null> {
    try {
      return await this.service.deleteVisatype({
        where: params,
        select: {
          addedFor: true,
          description: true,
          id: true,
          name: true,
          short: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
