/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MseRiskFactorsDecisionService } from "../mseRiskFactorsDecision.service";
import { MseRiskFactorsDecisionCreateInput } from "./MseRiskFactorsDecisionCreateInput";
import { MseRiskFactorsDecision } from "./MseRiskFactorsDecision";
import { MseRiskFactorsDecisionFindManyArgs } from "./MseRiskFactorsDecisionFindManyArgs";
import { MseRiskFactorsDecisionWhereUniqueInput } from "./MseRiskFactorsDecisionWhereUniqueInput";
import { MseRiskFactorsDecisionUpdateInput } from "./MseRiskFactorsDecisionUpdateInput";

export class MseRiskFactorsDecisionControllerBase {
  constructor(protected readonly service: MseRiskFactorsDecisionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MseRiskFactorsDecision })
  async createMseRiskFactorsDecision(
    @common.Body() data: MseRiskFactorsDecisionCreateInput
  ): Promise<MseRiskFactorsDecision> {
    return await this.service.createMseRiskFactorsDecision({
      data: data,
      select: {
        experience: true,
        applicationId: true,
        programId: true,
        language: true,
        academic: true,
        other: true,
        otherText: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MseRiskFactorsDecision] })
  @ApiNestedQuery(MseRiskFactorsDecisionFindManyArgs)
  async mseRiskFactorsDecisions(
    @common.Req() request: Request
  ): Promise<MseRiskFactorsDecision[]> {
    const args = plainToClass(
      MseRiskFactorsDecisionFindManyArgs,
      request.query
    );
    return this.service.mseRiskFactorsDecisions({
      ...args,
      select: {
        experience: true,
        applicationId: true,
        programId: true,
        language: true,
        academic: true,
        other: true,
        otherText: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MseRiskFactorsDecision })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mseRiskFactorsDecision(
    @common.Param() params: MseRiskFactorsDecisionWhereUniqueInput
  ): Promise<MseRiskFactorsDecision | null> {
    const result = await this.service.mseRiskFactorsDecision({
      where: params,
      select: {
        experience: true,
        applicationId: true,
        programId: true,
        language: true,
        academic: true,
        other: true,
        otherText: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MseRiskFactorsDecision })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMseRiskFactorsDecision(
    @common.Param() params: MseRiskFactorsDecisionWhereUniqueInput,
    @common.Body() data: MseRiskFactorsDecisionUpdateInput
  ): Promise<MseRiskFactorsDecision | null> {
    try {
      return await this.service.updateMseRiskFactorsDecision({
        where: params,
        data: data,
        select: {
          experience: true,
          applicationId: true,
          programId: true,
          language: true,
          academic: true,
          other: true,
          otherText: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MseRiskFactorsDecision })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMseRiskFactorsDecision(
    @common.Param() params: MseRiskFactorsDecisionWhereUniqueInput
  ): Promise<MseRiskFactorsDecision | null> {
    try {
      return await this.service.deleteMseRiskFactorsDecision({
        where: params,
        select: {
          experience: true,
          applicationId: true,
          programId: true,
          language: true,
          academic: true,
          other: true,
          otherText: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
