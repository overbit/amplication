/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateMseRiskFactorsDecisionArgs } from "./CreateMseRiskFactorsDecisionArgs";
import { UpdateMseRiskFactorsDecisionArgs } from "./UpdateMseRiskFactorsDecisionArgs";
import { DeleteMseRiskFactorsDecisionArgs } from "./DeleteMseRiskFactorsDecisionArgs";
import { MseRiskFactorsDecisionCountArgs } from "./MseRiskFactorsDecisionCountArgs";
import { MseRiskFactorsDecisionFindManyArgs } from "./MseRiskFactorsDecisionFindManyArgs";
import { MseRiskFactorsDecisionFindUniqueArgs } from "./MseRiskFactorsDecisionFindUniqueArgs";
import { MseRiskFactorsDecision } from "./MseRiskFactorsDecision";
import { MseRiskFactorsDecisionService } from "../mseRiskFactorsDecision.service";
@graphql.Resolver(() => MseRiskFactorsDecision)
export class MseRiskFactorsDecisionResolverBase {
  constructor(protected readonly service: MseRiskFactorsDecisionService) {}

  async _mseRiskFactorsDecisionsMeta(
    @graphql.Args() args: MseRiskFactorsDecisionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MseRiskFactorsDecision])
  async mseRiskFactorsDecisions(
    @graphql.Args() args: MseRiskFactorsDecisionFindManyArgs
  ): Promise<MseRiskFactorsDecision[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => MseRiskFactorsDecision, { nullable: true })
  async mseRiskFactorsDecision(
    @graphql.Args() args: MseRiskFactorsDecisionFindUniqueArgs
  ): Promise<MseRiskFactorsDecision | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MseRiskFactorsDecision)
  async createMseRiskFactorsDecision(
    @graphql.Args() args: CreateMseRiskFactorsDecisionArgs
  ): Promise<MseRiskFactorsDecision> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MseRiskFactorsDecision)
  async updateMseRiskFactorsDecision(
    @graphql.Args() args: UpdateMseRiskFactorsDecisionArgs
  ): Promise<MseRiskFactorsDecision | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MseRiskFactorsDecision)
  async deleteMseRiskFactorsDecision(
    @graphql.Args() args: DeleteMseRiskFactorsDecisionArgs
  ): Promise<MseRiskFactorsDecision | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
