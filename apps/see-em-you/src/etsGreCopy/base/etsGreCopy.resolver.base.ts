/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateEtsGreCopyArgs } from "./CreateEtsGreCopyArgs";
import { UpdateEtsGreCopyArgs } from "./UpdateEtsGreCopyArgs";
import { DeleteEtsGreCopyArgs } from "./DeleteEtsGreCopyArgs";
import { EtsGreCopyCountArgs } from "./EtsGreCopyCountArgs";
import { EtsGreCopyFindManyArgs } from "./EtsGreCopyFindManyArgs";
import { EtsGreCopyFindUniqueArgs } from "./EtsGreCopyFindUniqueArgs";
import { EtsGreCopy } from "./EtsGreCopy";
import { EtsGreCopyService } from "../etsGreCopy.service";
@graphql.Resolver(() => EtsGreCopy)
export class EtsGreCopyResolverBase {
  constructor(protected readonly service: EtsGreCopyService) {}

  async _etsGreCopiesMeta(
    @graphql.Args() args: EtsGreCopyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EtsGreCopy])
  async etsGreCopies(
    @graphql.Args() args: EtsGreCopyFindManyArgs
  ): Promise<EtsGreCopy[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => EtsGreCopy, { nullable: true })
  async etsGreCopy(
    @graphql.Args() args: EtsGreCopyFindUniqueArgs
  ): Promise<EtsGreCopy | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EtsGreCopy)
  async createEtsGreCopy(
    @graphql.Args() args: CreateEtsGreCopyArgs
  ): Promise<EtsGreCopy> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => EtsGreCopy)
  async updateEtsGreCopy(
    @graphql.Args() args: UpdateEtsGreCopyArgs
  ): Promise<EtsGreCopy | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EtsGreCopy)
  async deleteEtsGreCopy(
    @graphql.Args() args: DeleteEtsGreCopyArgs
  ): Promise<EtsGreCopy | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
