/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, EtsGreCopy as PrismaEtsGreCopy } from "@prisma/client";

export class EtsGreCopyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.EtsGreCopyCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.EtsGreCopyCountArgs>
  ): Promise<number> {
    return this.prisma.etsGreCopy.count(args);
  }

  async etsGreCopies<T extends Prisma.EtsGreCopyFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EtsGreCopyFindManyArgs>
  ): Promise<PrismaEtsGreCopy[]> {
    return this.prisma.etsGreCopy.findMany(args);
  }
  async etsGreCopy<T extends Prisma.EtsGreCopyFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.EtsGreCopyFindUniqueArgs>
  ): Promise<PrismaEtsGreCopy | null> {
    return this.prisma.etsGreCopy.findUnique(args);
  }
  async createEtsGreCopy<T extends Prisma.EtsGreCopyCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EtsGreCopyCreateArgs>
  ): Promise<PrismaEtsGreCopy> {
    return this.prisma.etsGreCopy.create<T>(args);
  }
  async updateEtsGreCopy<T extends Prisma.EtsGreCopyUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EtsGreCopyUpdateArgs>
  ): Promise<PrismaEtsGreCopy> {
    return this.prisma.etsGreCopy.update<T>(args);
  }
  async deleteEtsGreCopy<T extends Prisma.EtsGreCopyDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.EtsGreCopyDeleteArgs>
  ): Promise<PrismaEtsGreCopy> {
    return this.prisma.etsGreCopy.delete(args);
  }
}
