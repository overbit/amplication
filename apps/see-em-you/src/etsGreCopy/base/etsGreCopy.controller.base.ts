/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EtsGreCopyService } from "../etsGreCopy.service";
import { EtsGreCopyCreateInput } from "./EtsGreCopyCreateInput";
import { EtsGreCopyWhereInput } from "./EtsGreCopyWhereInput";
import { EtsGreCopyWhereUniqueInput } from "./EtsGreCopyWhereUniqueInput";
import { EtsGreCopyFindManyArgs } from "./EtsGreCopyFindManyArgs";
import { EtsGreCopyUpdateInput } from "./EtsGreCopyUpdateInput";
import { EtsGreCopy } from "./EtsGreCopy";

export class EtsGreCopyControllerBase {
  constructor(protected readonly service: EtsGreCopyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EtsGreCopy })
  async create(
    @common.Body() data: EtsGreCopyCreateInput
  ): Promise<EtsGreCopy> {
    return await this.service.create({
      data: data,
      select: {
        address1: true,
        address2: true,
        address3: true,
        addressCity: true,
        addressState: true,
        addressZip: true,
        countryCode: true,
        countryName: true,
        createdDate: true,
        cycleNum: true,
        deptCode: true,
        deptName: true,
        dob: true,
        email: true,
        fName: true,
        gender: true,
        gradMajorCode: true,
        gradMajorName: true,
        id: true,
        instCode: true,
        instName: true,
        instType: true,
        lName: true,
        mName: true,
        percentileRank1: true,
        percentileRank2: true,
        percentileRank3: true,
        percentileRank4: true,
        percentileRank5: true,
        percentileRank6: true,
        percentileRank7: true,
        phone: true,
        processDate: true,
        recordSerialNum: true,
        regNumber: true,
        scaledScore1: true,
        scaledScore2: true,
        scaledScore3: true,
        scaledScore4: true,
        scaledScore5: true,
        scaledScore6: true,
        scaledScore7: true,
        scoreType1: true,
        scoreType2: true,
        scoreType3: true,
        scoreType4: true,
        scoreType5: true,
        scoreType6: true,
        scoreType7: true,
        sequenceNum: true,
        ssn: true,
        testCode: true,
        testDate: true,
        testName: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EtsGreCopy] })
  @ApiNestedQuery(EtsGreCopyFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<EtsGreCopy[]> {
    const args = plainToClass(EtsGreCopyFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        address1: true,
        address2: true,
        address3: true,
        addressCity: true,
        addressState: true,
        addressZip: true,
        countryCode: true,
        countryName: true,
        createdDate: true,
        cycleNum: true,
        deptCode: true,
        deptName: true,
        dob: true,
        email: true,
        fName: true,
        gender: true,
        gradMajorCode: true,
        gradMajorName: true,
        id: true,
        instCode: true,
        instName: true,
        instType: true,
        lName: true,
        mName: true,
        percentileRank1: true,
        percentileRank2: true,
        percentileRank3: true,
        percentileRank4: true,
        percentileRank5: true,
        percentileRank6: true,
        percentileRank7: true,
        phone: true,
        processDate: true,
        recordSerialNum: true,
        regNumber: true,
        scaledScore1: true,
        scaledScore2: true,
        scaledScore3: true,
        scaledScore4: true,
        scaledScore5: true,
        scaledScore6: true,
        scaledScore7: true,
        scoreType1: true,
        scoreType2: true,
        scoreType3: true,
        scoreType4: true,
        scoreType5: true,
        scoreType6: true,
        scoreType7: true,
        sequenceNum: true,
        ssn: true,
        testCode: true,
        testDate: true,
        testName: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EtsGreCopy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: EtsGreCopyWhereUniqueInput
  ): Promise<EtsGreCopy | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        address1: true,
        address2: true,
        address3: true,
        addressCity: true,
        addressState: true,
        addressZip: true,
        countryCode: true,
        countryName: true,
        createdDate: true,
        cycleNum: true,
        deptCode: true,
        deptName: true,
        dob: true,
        email: true,
        fName: true,
        gender: true,
        gradMajorCode: true,
        gradMajorName: true,
        id: true,
        instCode: true,
        instName: true,
        instType: true,
        lName: true,
        mName: true,
        percentileRank1: true,
        percentileRank2: true,
        percentileRank3: true,
        percentileRank4: true,
        percentileRank5: true,
        percentileRank6: true,
        percentileRank7: true,
        phone: true,
        processDate: true,
        recordSerialNum: true,
        regNumber: true,
        scaledScore1: true,
        scaledScore2: true,
        scaledScore3: true,
        scaledScore4: true,
        scaledScore5: true,
        scaledScore6: true,
        scaledScore7: true,
        scoreType1: true,
        scoreType2: true,
        scoreType3: true,
        scoreType4: true,
        scoreType5: true,
        scoreType6: true,
        scoreType7: true,
        sequenceNum: true,
        ssn: true,
        testCode: true,
        testDate: true,
        testName: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EtsGreCopy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: EtsGreCopyWhereUniqueInput,
    @common.Body() data: EtsGreCopyUpdateInput
  ): Promise<EtsGreCopy | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          address1: true,
          address2: true,
          address3: true,
          addressCity: true,
          addressState: true,
          addressZip: true,
          countryCode: true,
          countryName: true,
          createdDate: true,
          cycleNum: true,
          deptCode: true,
          deptName: true,
          dob: true,
          email: true,
          fName: true,
          gender: true,
          gradMajorCode: true,
          gradMajorName: true,
          id: true,
          instCode: true,
          instName: true,
          instType: true,
          lName: true,
          mName: true,
          percentileRank1: true,
          percentileRank2: true,
          percentileRank3: true,
          percentileRank4: true,
          percentileRank5: true,
          percentileRank6: true,
          percentileRank7: true,
          phone: true,
          processDate: true,
          recordSerialNum: true,
          regNumber: true,
          scaledScore1: true,
          scaledScore2: true,
          scaledScore3: true,
          scaledScore4: true,
          scaledScore5: true,
          scaledScore6: true,
          scaledScore7: true,
          scoreType1: true,
          scoreType2: true,
          scoreType3: true,
          scoreType4: true,
          scoreType5: true,
          scoreType6: true,
          scoreType7: true,
          sequenceNum: true,
          ssn: true,
          testCode: true,
          testDate: true,
          testName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EtsGreCopy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: EtsGreCopyWhereUniqueInput
  ): Promise<EtsGreCopy | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          address1: true,
          address2: true,
          address3: true,
          addressCity: true,
          addressState: true,
          addressZip: true,
          countryCode: true,
          countryName: true,
          createdDate: true,
          cycleNum: true,
          deptCode: true,
          deptName: true,
          dob: true,
          email: true,
          fName: true,
          gender: true,
          gradMajorCode: true,
          gradMajorName: true,
          id: true,
          instCode: true,
          instName: true,
          instType: true,
          lName: true,
          mName: true,
          percentileRank1: true,
          percentileRank2: true,
          percentileRank3: true,
          percentileRank4: true,
          percentileRank5: true,
          percentileRank6: true,
          percentileRank7: true,
          phone: true,
          processDate: true,
          recordSerialNum: true,
          regNumber: true,
          scaledScore1: true,
          scaledScore2: true,
          scaledScore3: true,
          scaledScore4: true,
          scaledScore5: true,
          scaledScore6: true,
          scaledScore7: true,
          scoreType1: true,
          scoreType2: true,
          scoreType3: true,
          scoreType4: true,
          scoreType5: true,
          scoreType6: true,
          scoreType7: true,
          sequenceNum: true,
          ssn: true,
          testCode: true,
          testDate: true,
          testName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
