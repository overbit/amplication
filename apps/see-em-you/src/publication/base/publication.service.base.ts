/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Publication as PrismaPublication,
  Application as PrismaApplication,
} from "@prisma/client";

export class PublicationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.PublicationCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.PublicationCountArgs>
  ): Promise<number> {
    return this.prisma.publication.count(args);
  }

  async publications<T extends Prisma.PublicationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PublicationFindManyArgs>
  ): Promise<PrismaPublication[]> {
    return this.prisma.publication.findMany(args);
  }
  async publication<T extends Prisma.PublicationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PublicationFindUniqueArgs>
  ): Promise<PrismaPublication | null> {
    return this.prisma.publication.findUnique(args);
  }
  async createPublication<T extends Prisma.PublicationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PublicationCreateArgs>
  ): Promise<PrismaPublication> {
    return this.prisma.publication.create<T>(args);
  }
  async updatePublication<T extends Prisma.PublicationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PublicationUpdateArgs>
  ): Promise<PrismaPublication> {
    return this.prisma.publication.update<T>(args);
  }
  async deletePublication<T extends Prisma.PublicationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PublicationDeleteArgs>
  ): Promise<PrismaPublication> {
    return this.prisma.publication.delete(args);
  }

  async getApplication(parentId: number): Promise<PrismaApplication | null> {
    return this.prisma.publication
      .findUnique({
        where: { id: parentId },
      })
      .application();
  }
}
