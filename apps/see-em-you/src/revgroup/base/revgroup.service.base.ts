/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Revgroup as PrismaRevgroup } from "@prisma/client";

export class RevgroupServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.RevgroupCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.RevgroupCountArgs>
  ): Promise<number> {
    return this.prisma.revgroup.count(args);
  }

  async revgroups<T extends Prisma.RevgroupFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RevgroupFindManyArgs>
  ): Promise<PrismaRevgroup[]> {
    return this.prisma.revgroup.findMany(args);
  }
  async revgroup<T extends Prisma.RevgroupFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RevgroupFindUniqueArgs>
  ): Promise<PrismaRevgroup | null> {
    return this.prisma.revgroup.findUnique(args);
  }
  async createRevgroup<T extends Prisma.RevgroupCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RevgroupCreateArgs>
  ): Promise<PrismaRevgroup> {
    return this.prisma.revgroup.create<T>(args);
  }
  async updateRevgroup<T extends Prisma.RevgroupUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RevgroupUpdateArgs>
  ): Promise<PrismaRevgroup> {
    return this.prisma.revgroup.update<T>(args);
  }
  async deleteRevgroup<T extends Prisma.RevgroupDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RevgroupDeleteArgs>
  ): Promise<PrismaRevgroup> {
    return this.prisma.revgroup.delete(args);
  }
}
