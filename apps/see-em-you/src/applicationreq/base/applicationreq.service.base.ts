/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Applicationreq as PrismaApplicationreq,
  ProgramsApplicationreq as PrismaProgramsApplicationreq,
} from "@prisma/client";

export class ApplicationreqServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ApplicationreqCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApplicationreqCountArgs>
  ): Promise<number> {
    return this.prisma.applicationreq.count(args);
  }

  async applicationreqs<T extends Prisma.ApplicationreqFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApplicationreqFindManyArgs>
  ): Promise<PrismaApplicationreq[]> {
    return this.prisma.applicationreq.findMany(args);
  }
  async applicationreq<T extends Prisma.ApplicationreqFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApplicationreqFindUniqueArgs>
  ): Promise<PrismaApplicationreq | null> {
    return this.prisma.applicationreq.findUnique(args);
  }
  async createApplicationreq<T extends Prisma.ApplicationreqCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApplicationreqCreateArgs>
  ): Promise<PrismaApplicationreq> {
    return this.prisma.applicationreq.create<T>(args);
  }
  async updateApplicationreq<T extends Prisma.ApplicationreqUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApplicationreqUpdateArgs>
  ): Promise<PrismaApplicationreq> {
    return this.prisma.applicationreq.update<T>(args);
  }
  async deleteApplicationreq<T extends Prisma.ApplicationreqDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApplicationreqDeleteArgs>
  ): Promise<PrismaApplicationreq> {
    return this.prisma.applicationreq.delete(args);
  }

  async findProgramsApplicationreqs(
    parentId: number,
    args: Prisma.ProgramsApplicationreqFindManyArgs
  ): Promise<PrismaProgramsApplicationreq[]> {
    return this.prisma.applicationreq
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .programsApplicationreqs(args);
  }
}
