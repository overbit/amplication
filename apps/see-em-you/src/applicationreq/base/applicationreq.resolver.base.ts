/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Applicationreq } from "./Applicationreq";
import { ApplicationreqCountArgs } from "./ApplicationreqCountArgs";
import { ApplicationreqFindManyArgs } from "./ApplicationreqFindManyArgs";
import { ApplicationreqFindUniqueArgs } from "./ApplicationreqFindUniqueArgs";
import { CreateApplicationreqArgs } from "./CreateApplicationreqArgs";
import { UpdateApplicationreqArgs } from "./UpdateApplicationreqArgs";
import { DeleteApplicationreqArgs } from "./DeleteApplicationreqArgs";
import { ProgramsApplicationreqFindManyArgs } from "../../programsApplicationreq/base/ProgramsApplicationreqFindManyArgs";
import { ProgramsApplicationreq } from "../../programsApplicationreq/base/ProgramsApplicationreq";
import { ApplicationreqService } from "../applicationreq.service";
@graphql.Resolver(() => Applicationreq)
export class ApplicationreqResolverBase {
  constructor(protected readonly service: ApplicationreqService) {}

  async _applicationreqsMeta(
    @graphql.Args() args: ApplicationreqCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Applicationreq])
  async applicationreqs(
    @graphql.Args() args: ApplicationreqFindManyArgs
  ): Promise<Applicationreq[]> {
    return this.service.applicationreqs(args);
  }

  @graphql.Query(() => Applicationreq, { nullable: true })
  async applicationreq(
    @graphql.Args() args: ApplicationreqFindUniqueArgs
  ): Promise<Applicationreq | null> {
    const result = await this.service.applicationreq(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Applicationreq)
  async createApplicationreq(
    @graphql.Args() args: CreateApplicationreqArgs
  ): Promise<Applicationreq> {
    return await this.service.createApplicationreq({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Applicationreq)
  async updateApplicationreq(
    @graphql.Args() args: UpdateApplicationreqArgs
  ): Promise<Applicationreq | null> {
    try {
      return await this.service.updateApplicationreq({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Applicationreq)
  async deleteApplicationreq(
    @graphql.Args() args: DeleteApplicationreqArgs
  ): Promise<Applicationreq | null> {
    try {
      return await this.service.deleteApplicationreq(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [ProgramsApplicationreq], {
    name: "programsApplicationreqs",
  })
  async findProgramsApplicationreqs(
    @graphql.Parent() parent: Applicationreq,
    @graphql.Args() args: ProgramsApplicationreqFindManyArgs
  ): Promise<ProgramsApplicationreq[]> {
    const results = await this.service.findProgramsApplicationreqs(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
