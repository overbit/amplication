/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { VideoEssay } from "./VideoEssay";
import { VideoEssayCountArgs } from "./VideoEssayCountArgs";
import { VideoEssayFindManyArgs } from "./VideoEssayFindManyArgs";
import { VideoEssayFindUniqueArgs } from "./VideoEssayFindUniqueArgs";
import { CreateVideoEssayArgs } from "./CreateVideoEssayArgs";
import { UpdateVideoEssayArgs } from "./UpdateVideoEssayArgs";
import { DeleteVideoEssayArgs } from "./DeleteVideoEssayArgs";
import { VideoEssayService } from "../videoEssay.service";
@graphql.Resolver(() => VideoEssay)
export class VideoEssayResolverBase {
  constructor(protected readonly service: VideoEssayService) {}

  async _videoEssaysMeta(
    @graphql.Args() args: VideoEssayCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [VideoEssay])
  async videoEssays(
    @graphql.Args() args: VideoEssayFindManyArgs
  ): Promise<VideoEssay[]> {
    return this.service.videoEssays(args);
  }

  @graphql.Query(() => VideoEssay, { nullable: true })
  async videoEssay(
    @graphql.Args() args: VideoEssayFindUniqueArgs
  ): Promise<VideoEssay | null> {
    const result = await this.service.videoEssay(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => VideoEssay)
  async createVideoEssay(
    @graphql.Args() args: CreateVideoEssayArgs
  ): Promise<VideoEssay> {
    return await this.service.createVideoEssay({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => VideoEssay)
  async updateVideoEssay(
    @graphql.Args() args: UpdateVideoEssayArgs
  ): Promise<VideoEssay | null> {
    try {
      return await this.service.updateVideoEssay({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VideoEssay)
  async deleteVideoEssay(
    @graphql.Args() args: DeleteVideoEssayArgs
  ): Promise<VideoEssay | null> {
    try {
      return await this.service.deleteVideoEssay(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
