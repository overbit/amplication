/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VideoEssayService } from "../videoEssay.service";
import { VideoEssayCreateInput } from "./VideoEssayCreateInput";
import { VideoEssay } from "./VideoEssay";
import { VideoEssayFindManyArgs } from "./VideoEssayFindManyArgs";
import { VideoEssayWhereUniqueInput } from "./VideoEssayWhereUniqueInput";
import { VideoEssayUpdateInput } from "./VideoEssayUpdateInput";

export class VideoEssayControllerBase {
  constructor(protected readonly service: VideoEssayService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VideoEssay })
  async createVideoEssay(
    @common.Body() data: VideoEssayCreateInput
  ): Promise<VideoEssay> {
    return await this.service.createVideoEssay({
      data: data,
      select: {
        accessCode: true,
        applicationId: true,
        id: true,
        url: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [VideoEssay] })
  @ApiNestedQuery(VideoEssayFindManyArgs)
  async videoEssays(@common.Req() request: Request): Promise<VideoEssay[]> {
    const args = plainToClass(VideoEssayFindManyArgs, request.query);
    return this.service.videoEssays({
      ...args,
      select: {
        accessCode: true,
        applicationId: true,
        id: true,
        url: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VideoEssay })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async videoEssay(
    @common.Param() params: VideoEssayWhereUniqueInput
  ): Promise<VideoEssay | null> {
    const result = await this.service.videoEssay({
      where: params,
      select: {
        accessCode: true,
        applicationId: true,
        id: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VideoEssay })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVideoEssay(
    @common.Param() params: VideoEssayWhereUniqueInput,
    @common.Body() data: VideoEssayUpdateInput
  ): Promise<VideoEssay | null> {
    try {
      return await this.service.updateVideoEssay({
        where: params,
        data: data,
        select: {
          accessCode: true,
          applicationId: true,
          id: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VideoEssay })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVideoEssay(
    @common.Param() params: VideoEssayWhereUniqueInput
  ): Promise<VideoEssay | null> {
    try {
      return await this.service.deleteVideoEssay({
        where: params,
        select: {
          accessCode: true,
          applicationId: true,
          id: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
