/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CampusService } from "../campus.service";
import { CampusCreateInput } from "./CampusCreateInput";
import { Campus } from "./Campus";
import { CampusFindManyArgs } from "./CampusFindManyArgs";
import { CampusWhereUniqueInput } from "./CampusWhereUniqueInput";
import { CampusUpdateInput } from "./CampusUpdateInput";

export class CampusControllerBase {
  constructor(protected readonly service: CampusService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Campus })
  async createCampus(@common.Body() data: CampusCreateInput): Promise<Campus> {
    return await this.service.createCampus({
      data: data,
      select: {
        id: true,
        name: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Campus] })
  @ApiNestedQuery(CampusFindManyArgs)
  async campuses(@common.Req() request: Request): Promise<Campus[]> {
    const args = plainToClass(CampusFindManyArgs, request.query);
    return this.service.campuses({
      ...args,
      select: {
        id: true,
        name: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Campus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async campus(
    @common.Param() params: CampusWhereUniqueInput
  ): Promise<Campus | null> {
    const result = await this.service.campus({
      where: params,
      select: {
        id: true,
        name: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Campus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCampus(
    @common.Param() params: CampusWhereUniqueInput,
    @common.Body() data: CampusUpdateInput
  ): Promise<Campus | null> {
    try {
      return await this.service.updateCampus({
        where: params,
        data: data,
        select: {
          id: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Campus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCampus(
    @common.Param() params: CampusWhereUniqueInput
  ): Promise<Campus | null> {
    try {
      return await this.service.deleteCampus({
        where: params,
        select: {
          id: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
