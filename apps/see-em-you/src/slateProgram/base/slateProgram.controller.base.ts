/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SlateProgramService } from "../slateProgram.service";
import { SlateProgramCreateInput } from "./SlateProgramCreateInput";
import { SlateProgram } from "./SlateProgram";
import { SlateProgramFindManyArgs } from "./SlateProgramFindManyArgs";
import { SlateProgramWhereUniqueInput } from "./SlateProgramWhereUniqueInput";
import { SlateProgramUpdateInput } from "./SlateProgramUpdateInput";

export class SlateProgramControllerBase {
  constructor(protected readonly service: SlateProgramService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SlateProgram })
  async createSlateProgram(
    @common.Body() data: SlateProgramCreateInput
  ): Promise<SlateProgram> {
    return await this.service.createSlateProgram({
      data: data,
      select: {
        prefix: true,
        first: true,
        middle: true,
        last: true,
        mseProgram1: true,
        mseProgram2: true,
        mseProgram3: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SlateProgram] })
  @ApiNestedQuery(SlateProgramFindManyArgs)
  async slatePrograms(@common.Req() request: Request): Promise<SlateProgram[]> {
    const args = plainToClass(SlateProgramFindManyArgs, request.query);
    return this.service.slatePrograms({
      ...args,
      select: {
        prefix: true,
        first: true,
        middle: true,
        last: true,
        mseProgram1: true,
        mseProgram2: true,
        mseProgram3: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SlateProgram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async slateProgram(
    @common.Param() params: SlateProgramWhereUniqueInput
  ): Promise<SlateProgram | null> {
    const result = await this.service.slateProgram({
      where: params,
      select: {
        prefix: true,
        first: true,
        middle: true,
        last: true,
        mseProgram1: true,
        mseProgram2: true,
        mseProgram3: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SlateProgram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSlateProgram(
    @common.Param() params: SlateProgramWhereUniqueInput,
    @common.Body() data: SlateProgramUpdateInput
  ): Promise<SlateProgram | null> {
    try {
      return await this.service.updateSlateProgram({
        where: params,
        data: data,
        select: {
          prefix: true,
          first: true,
          middle: true,
          last: true,
          mseProgram1: true,
          mseProgram2: true,
          mseProgram3: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SlateProgram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSlateProgram(
    @common.Param() params: SlateProgramWhereUniqueInput
  ): Promise<SlateProgram | null> {
    try {
      return await this.service.deleteSlateProgram({
        where: params,
        select: {
          prefix: true,
          first: true,
          middle: true,
          last: true,
          mseProgram1: true,
          mseProgram2: true,
          mseProgram3: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
