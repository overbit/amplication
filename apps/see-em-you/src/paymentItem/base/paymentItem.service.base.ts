/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PaymentItem as PrismaPaymentItem,
  ProgramModel as PrismaProgramModel,
} from "@prisma/client";

export class PaymentItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.PaymentItemCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentItemCountArgs>
  ): Promise<number> {
    return this.prisma.paymentItem.count(args);
  }

  async paymentItems<T extends Prisma.PaymentItemFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentItemFindManyArgs>
  ): Promise<PrismaPaymentItem[]> {
    return this.prisma.paymentItem.findMany(args);
  }
  async paymentItem<T extends Prisma.PaymentItemFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentItemFindUniqueArgs>
  ): Promise<PrismaPaymentItem | null> {
    return this.prisma.paymentItem.findUnique(args);
  }
  async createPaymentItem<T extends Prisma.PaymentItemCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentItemCreateArgs>
  ): Promise<PrismaPaymentItem> {
    return this.prisma.paymentItem.create<T>(args);
  }
  async updatePaymentItem<T extends Prisma.PaymentItemUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentItemUpdateArgs>
  ): Promise<PrismaPaymentItem> {
    return this.prisma.paymentItem.update<T>(args);
  }
  async deletePaymentItem<T extends Prisma.PaymentItemDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentItemDeleteArgs>
  ): Promise<PrismaPaymentItem> {
    return this.prisma.paymentItem.delete(args);
  }

  async getPrograms(parentId: number): Promise<PrismaProgramModel | null> {
    return this.prisma.paymentItem
      .findUnique({
        where: { id: parentId },
      })
      .programs();
  }
}
