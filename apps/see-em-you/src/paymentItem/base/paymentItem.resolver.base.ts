/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreatePaymentItemArgs } from "./CreatePaymentItemArgs";
import { UpdatePaymentItemArgs } from "./UpdatePaymentItemArgs";
import { DeletePaymentItemArgs } from "./DeletePaymentItemArgs";
import { PaymentItemCountArgs } from "./PaymentItemCountArgs";
import { PaymentItemFindManyArgs } from "./PaymentItemFindManyArgs";
import { PaymentItemFindUniqueArgs } from "./PaymentItemFindUniqueArgs";
import { PaymentItem } from "./PaymentItem";
import { ProgramModel } from "../../programModel/base/ProgramModel";
import { PaymentItemService } from "../paymentItem.service";
@graphql.Resolver(() => PaymentItem)
export class PaymentItemResolverBase {
  constructor(protected readonly service: PaymentItemService) {}

  async _paymentItemsMeta(
    @graphql.Args() args: PaymentItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PaymentItem])
  async paymentItems(
    @graphql.Args() args: PaymentItemFindManyArgs
  ): Promise<PaymentItem[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => PaymentItem, { nullable: true })
  async paymentItem(
    @graphql.Args() args: PaymentItemFindUniqueArgs
  ): Promise<PaymentItem | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PaymentItem)
  async createPaymentItem(
    @graphql.Args() args: CreatePaymentItemArgs
  ): Promise<PaymentItem> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        programs: args.data.programs
          ? {
              connect: args.data.programs,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PaymentItem)
  async updatePaymentItem(
    @graphql.Args() args: UpdatePaymentItemArgs
  ): Promise<PaymentItem | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          programs: args.data.programs
            ? {
                connect: args.data.programs,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PaymentItem)
  async deletePaymentItem(
    @graphql.Args() args: DeletePaymentItemArgs
  ): Promise<PaymentItem | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => ProgramModel, {
    nullable: true,
    name: "programs",
  })
  async resolveFieldPrograms(
    @graphql.Parent() parent: PaymentItem
  ): Promise<ProgramModel | null> {
    const result = await this.service.getPrograms(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
