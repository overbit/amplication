/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MhciPrereqsProgrammingTestService } from "../mhciPrereqsProgrammingTest.service";
import { MhciPrereqsProgrammingTestCreateInput } from "./MhciPrereqsProgrammingTestCreateInput";
import { MhciPrereqsProgrammingTest } from "./MhciPrereqsProgrammingTest";
import { MhciPrereqsProgrammingTestFindManyArgs } from "./MhciPrereqsProgrammingTestFindManyArgs";
import { MhciPrereqsProgrammingTestWhereUniqueInput } from "./MhciPrereqsProgrammingTestWhereUniqueInput";
import { MhciPrereqsProgrammingTestUpdateInput } from "./MhciPrereqsProgrammingTestUpdateInput";

export class MhciPrereqsProgrammingTestControllerBase {
  constructor(protected readonly service: MhciPrereqsProgrammingTestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MhciPrereqsProgrammingTest })
  async createMhciPrereqsProgrammingTest(
    @common.Body() data: MhciPrereqsProgrammingTestCreateInput
  ): Promise<MhciPrereqsProgrammingTest> {
    return await this.service.createMhciPrereqsProgrammingTest({
      data: {
        ...data,

        luUsersUsertypes: {
          connect: data.luUsersUsertypes,
        },
      },
      select: {
        applicationId: true,
        downloadTimestamp: true,
        id: true,

        luUsersUsertypes: {
          select: {
            id: true,
          },
        },

        periodId: true,
        uploadDatafileinfoId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MhciPrereqsProgrammingTest] })
  @ApiNestedQuery(MhciPrereqsProgrammingTestFindManyArgs)
  async mhciPrereqsProgrammingTests(
    @common.Req() request: Request
  ): Promise<MhciPrereqsProgrammingTest[]> {
    const args = plainToClass(
      MhciPrereqsProgrammingTestFindManyArgs,
      request.query
    );
    return this.service.mhciPrereqsProgrammingTests({
      ...args,
      select: {
        applicationId: true,
        downloadTimestamp: true,
        id: true,

        luUsersUsertypes: {
          select: {
            id: true,
          },
        },

        periodId: true,
        uploadDatafileinfoId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MhciPrereqsProgrammingTest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mhciPrereqsProgrammingTest(
    @common.Param() params: MhciPrereqsProgrammingTestWhereUniqueInput
  ): Promise<MhciPrereqsProgrammingTest | null> {
    const result = await this.service.mhciPrereqsProgrammingTest({
      where: params,
      select: {
        applicationId: true,
        downloadTimestamp: true,
        id: true,

        luUsersUsertypes: {
          select: {
            id: true,
          },
        },

        periodId: true,
        uploadDatafileinfoId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MhciPrereqsProgrammingTest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMhciPrereqsProgrammingTest(
    @common.Param() params: MhciPrereqsProgrammingTestWhereUniqueInput,
    @common.Body() data: MhciPrereqsProgrammingTestUpdateInput
  ): Promise<MhciPrereqsProgrammingTest | null> {
    try {
      return await this.service.updateMhciPrereqsProgrammingTest({
        where: params,
        data: {
          ...data,

          luUsersUsertypes: {
            connect: data.luUsersUsertypes,
          },
        },
        select: {
          applicationId: true,
          downloadTimestamp: true,
          id: true,

          luUsersUsertypes: {
            select: {
              id: true,
            },
          },

          periodId: true,
          uploadDatafileinfoId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MhciPrereqsProgrammingTest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMhciPrereqsProgrammingTest(
    @common.Param() params: MhciPrereqsProgrammingTestWhereUniqueInput
  ): Promise<MhciPrereqsProgrammingTest | null> {
    try {
      return await this.service.deleteMhciPrereqsProgrammingTest({
        where: params,
        select: {
          applicationId: true,
          downloadTimestamp: true,
          id: true,

          luUsersUsertypes: {
            select: {
              id: true,
            },
          },

          periodId: true,
          uploadDatafileinfoId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
