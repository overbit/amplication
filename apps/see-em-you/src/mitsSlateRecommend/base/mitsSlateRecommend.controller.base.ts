/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MitsSlateRecommendService } from "../mitsSlateRecommend.service";
import { MitsSlateRecommendCreateInput } from "./MitsSlateRecommendCreateInput";
import { MitsSlateRecommend } from "./MitsSlateRecommend";
import { MitsSlateRecommendFindManyArgs } from "./MitsSlateRecommendFindManyArgs";
import { MitsSlateRecommendWhereUniqueInput } from "./MitsSlateRecommendWhereUniqueInput";
import { MitsSlateRecommendUpdateInput } from "./MitsSlateRecommendUpdateInput";

export class MitsSlateRecommendControllerBase {
  constructor(protected readonly service: MitsSlateRecommendService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MitsSlateRecommend })
  async createMitsSlateRecommend(
    @common.Body() data: MitsSlateRecommendCreateInput
  ): Promise<MitsSlateRecommend> {
    return await this.service.createMitsSlateRecommend({
      data: data,
      select: {
        applicationSlateGuid: true,
        first: true,
        id: true,
        last: true,
        middle: true,
        prefix: true,
        reference1Email: true,
        reference1First: true,
        reference1Industry: true,
        reference1Last: true,
        reference1Organization: true,
        reference1Phone: true,
        reference1Submitted: true,
        reference1Title: true,
        reference1Type: true,
        referenceNum1IsrmsRecommenderScore1: true,
        referenceNum1IsrmsRecommenderScore10: true,
        referenceNum1IsrmsRecommenderScore11: true,
        referenceNum1IsrmsRecommenderScore12: true,
        referenceNum1IsrmsRecommenderScore13: true,
        referenceNum1IsrmsRecommenderScore14: true,
        referenceNum1IsrmsRecommenderScore15: true,
        referenceNum1IsrmsRecommenderScore2: true,
        referenceNum1IsrmsRecommenderScore3: true,
        referenceNum1IsrmsRecommenderScore4: true,
        referenceNum1IsrmsRecommenderScore5: true,
        referenceNum1IsrmsRecommenderScore6: true,
        referenceNum1IsrmsRecommenderScore7: true,
        referenceNum1IsrmsRecommenderScore8: true,
        referenceNum1IsrmsRecommenderScore9: true,
        referenceNum1MseRecommendationAdditional: true,
        referenceNum1MseRecommendationComparison: true,
        referenceNum1MseRecommendationHowKnown: true,
        referenceNum1MseRecommendationProjectPerformance: true,
        referenceNum1MseRecommendationStrengthsWeakness: true,
        referenceNum1RecommenderScore1: true,
        referenceNum1RecommenderScore2: true,
        referenceNum1RecommenderScore3: true,
        referenceNum1RecommenderScore4: true,
        referenceNum1RecommenderScore5: true,
        referenceNum1RecommenderScore6: true,
        referenceNum1RecommenderScore7: true,
        referenceNum1RecommenderScore8: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MitsSlateRecommend] })
  @ApiNestedQuery(MitsSlateRecommendFindManyArgs)
  async mitsSlateRecommends(
    @common.Req() request: Request
  ): Promise<MitsSlateRecommend[]> {
    const args = plainToClass(MitsSlateRecommendFindManyArgs, request.query);
    return this.service.mitsSlateRecommends({
      ...args,
      select: {
        applicationSlateGuid: true,
        first: true,
        id: true,
        last: true,
        middle: true,
        prefix: true,
        reference1Email: true,
        reference1First: true,
        reference1Industry: true,
        reference1Last: true,
        reference1Organization: true,
        reference1Phone: true,
        reference1Submitted: true,
        reference1Title: true,
        reference1Type: true,
        referenceNum1IsrmsRecommenderScore1: true,
        referenceNum1IsrmsRecommenderScore10: true,
        referenceNum1IsrmsRecommenderScore11: true,
        referenceNum1IsrmsRecommenderScore12: true,
        referenceNum1IsrmsRecommenderScore13: true,
        referenceNum1IsrmsRecommenderScore14: true,
        referenceNum1IsrmsRecommenderScore15: true,
        referenceNum1IsrmsRecommenderScore2: true,
        referenceNum1IsrmsRecommenderScore3: true,
        referenceNum1IsrmsRecommenderScore4: true,
        referenceNum1IsrmsRecommenderScore5: true,
        referenceNum1IsrmsRecommenderScore6: true,
        referenceNum1IsrmsRecommenderScore7: true,
        referenceNum1IsrmsRecommenderScore8: true,
        referenceNum1IsrmsRecommenderScore9: true,
        referenceNum1MseRecommendationAdditional: true,
        referenceNum1MseRecommendationComparison: true,
        referenceNum1MseRecommendationHowKnown: true,
        referenceNum1MseRecommendationProjectPerformance: true,
        referenceNum1MseRecommendationStrengthsWeakness: true,
        referenceNum1RecommenderScore1: true,
        referenceNum1RecommenderScore2: true,
        referenceNum1RecommenderScore3: true,
        referenceNum1RecommenderScore4: true,
        referenceNum1RecommenderScore5: true,
        referenceNum1RecommenderScore6: true,
        referenceNum1RecommenderScore7: true,
        referenceNum1RecommenderScore8: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MitsSlateRecommend })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mitsSlateRecommend(
    @common.Param() params: MitsSlateRecommendWhereUniqueInput
  ): Promise<MitsSlateRecommend | null> {
    const result = await this.service.mitsSlateRecommend({
      where: params,
      select: {
        applicationSlateGuid: true,
        first: true,
        id: true,
        last: true,
        middle: true,
        prefix: true,
        reference1Email: true,
        reference1First: true,
        reference1Industry: true,
        reference1Last: true,
        reference1Organization: true,
        reference1Phone: true,
        reference1Submitted: true,
        reference1Title: true,
        reference1Type: true,
        referenceNum1IsrmsRecommenderScore1: true,
        referenceNum1IsrmsRecommenderScore10: true,
        referenceNum1IsrmsRecommenderScore11: true,
        referenceNum1IsrmsRecommenderScore12: true,
        referenceNum1IsrmsRecommenderScore13: true,
        referenceNum1IsrmsRecommenderScore14: true,
        referenceNum1IsrmsRecommenderScore15: true,
        referenceNum1IsrmsRecommenderScore2: true,
        referenceNum1IsrmsRecommenderScore3: true,
        referenceNum1IsrmsRecommenderScore4: true,
        referenceNum1IsrmsRecommenderScore5: true,
        referenceNum1IsrmsRecommenderScore6: true,
        referenceNum1IsrmsRecommenderScore7: true,
        referenceNum1IsrmsRecommenderScore8: true,
        referenceNum1IsrmsRecommenderScore9: true,
        referenceNum1MseRecommendationAdditional: true,
        referenceNum1MseRecommendationComparison: true,
        referenceNum1MseRecommendationHowKnown: true,
        referenceNum1MseRecommendationProjectPerformance: true,
        referenceNum1MseRecommendationStrengthsWeakness: true,
        referenceNum1RecommenderScore1: true,
        referenceNum1RecommenderScore2: true,
        referenceNum1RecommenderScore3: true,
        referenceNum1RecommenderScore4: true,
        referenceNum1RecommenderScore5: true,
        referenceNum1RecommenderScore6: true,
        referenceNum1RecommenderScore7: true,
        referenceNum1RecommenderScore8: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MitsSlateRecommend })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMitsSlateRecommend(
    @common.Param() params: MitsSlateRecommendWhereUniqueInput,
    @common.Body() data: MitsSlateRecommendUpdateInput
  ): Promise<MitsSlateRecommend | null> {
    try {
      return await this.service.updateMitsSlateRecommend({
        where: params,
        data: data,
        select: {
          applicationSlateGuid: true,
          first: true,
          id: true,
          last: true,
          middle: true,
          prefix: true,
          reference1Email: true,
          reference1First: true,
          reference1Industry: true,
          reference1Last: true,
          reference1Organization: true,
          reference1Phone: true,
          reference1Submitted: true,
          reference1Title: true,
          reference1Type: true,
          referenceNum1IsrmsRecommenderScore1: true,
          referenceNum1IsrmsRecommenderScore10: true,
          referenceNum1IsrmsRecommenderScore11: true,
          referenceNum1IsrmsRecommenderScore12: true,
          referenceNum1IsrmsRecommenderScore13: true,
          referenceNum1IsrmsRecommenderScore14: true,
          referenceNum1IsrmsRecommenderScore15: true,
          referenceNum1IsrmsRecommenderScore2: true,
          referenceNum1IsrmsRecommenderScore3: true,
          referenceNum1IsrmsRecommenderScore4: true,
          referenceNum1IsrmsRecommenderScore5: true,
          referenceNum1IsrmsRecommenderScore6: true,
          referenceNum1IsrmsRecommenderScore7: true,
          referenceNum1IsrmsRecommenderScore8: true,
          referenceNum1IsrmsRecommenderScore9: true,
          referenceNum1MseRecommendationAdditional: true,
          referenceNum1MseRecommendationComparison: true,
          referenceNum1MseRecommendationHowKnown: true,
          referenceNum1MseRecommendationProjectPerformance: true,
          referenceNum1MseRecommendationStrengthsWeakness: true,
          referenceNum1RecommenderScore1: true,
          referenceNum1RecommenderScore2: true,
          referenceNum1RecommenderScore3: true,
          referenceNum1RecommenderScore4: true,
          referenceNum1RecommenderScore5: true,
          referenceNum1RecommenderScore6: true,
          referenceNum1RecommenderScore7: true,
          referenceNum1RecommenderScore8: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MitsSlateRecommend })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMitsSlateRecommend(
    @common.Param() params: MitsSlateRecommendWhereUniqueInput
  ): Promise<MitsSlateRecommend | null> {
    try {
      return await this.service.deleteMitsSlateRecommend({
        where: params,
        select: {
          applicationSlateGuid: true,
          first: true,
          id: true,
          last: true,
          middle: true,
          prefix: true,
          reference1Email: true,
          reference1First: true,
          reference1Industry: true,
          reference1Last: true,
          reference1Organization: true,
          reference1Phone: true,
          reference1Submitted: true,
          reference1Title: true,
          reference1Type: true,
          referenceNum1IsrmsRecommenderScore1: true,
          referenceNum1IsrmsRecommenderScore10: true,
          referenceNum1IsrmsRecommenderScore11: true,
          referenceNum1IsrmsRecommenderScore12: true,
          referenceNum1IsrmsRecommenderScore13: true,
          referenceNum1IsrmsRecommenderScore14: true,
          referenceNum1IsrmsRecommenderScore15: true,
          referenceNum1IsrmsRecommenderScore2: true,
          referenceNum1IsrmsRecommenderScore3: true,
          referenceNum1IsrmsRecommenderScore4: true,
          referenceNum1IsrmsRecommenderScore5: true,
          referenceNum1IsrmsRecommenderScore6: true,
          referenceNum1IsrmsRecommenderScore7: true,
          referenceNum1IsrmsRecommenderScore8: true,
          referenceNum1IsrmsRecommenderScore9: true,
          referenceNum1MseRecommendationAdditional: true,
          referenceNum1MseRecommendationComparison: true,
          referenceNum1MseRecommendationHowKnown: true,
          referenceNum1MseRecommendationProjectPerformance: true,
          referenceNum1MseRecommendationStrengthsWeakness: true,
          referenceNum1RecommenderScore1: true,
          referenceNum1RecommenderScore2: true,
          referenceNum1RecommenderScore3: true,
          referenceNum1RecommenderScore4: true,
          referenceNum1RecommenderScore5: true,
          referenceNum1RecommenderScore6: true,
          referenceNum1RecommenderScore7: true,
          referenceNum1RecommenderScore8: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
