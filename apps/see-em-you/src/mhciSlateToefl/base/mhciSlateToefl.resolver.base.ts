/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateMhciSlateToeflArgs } from "./CreateMhciSlateToeflArgs";
import { UpdateMhciSlateToeflArgs } from "./UpdateMhciSlateToeflArgs";
import { DeleteMhciSlateToeflArgs } from "./DeleteMhciSlateToeflArgs";
import { MhciSlateToeflCountArgs } from "./MhciSlateToeflCountArgs";
import { MhciSlateToeflFindManyArgs } from "./MhciSlateToeflFindManyArgs";
import { MhciSlateToeflFindUniqueArgs } from "./MhciSlateToeflFindUniqueArgs";
import { MhciSlateToefl } from "./MhciSlateToefl";
import { MhciSlateToeflService } from "../mhciSlateToefl.service";
@graphql.Resolver(() => MhciSlateToefl)
export class MhciSlateToeflResolverBase {
  constructor(protected readonly service: MhciSlateToeflService) {}

  async _mhciSlateToeflsMeta(
    @graphql.Args() args: MhciSlateToeflCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MhciSlateToefl])
  async mhciSlateToefls(
    @graphql.Args() args: MhciSlateToeflFindManyArgs
  ): Promise<MhciSlateToefl[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => MhciSlateToefl, { nullable: true })
  async mhciSlateToefl(
    @graphql.Args() args: MhciSlateToeflFindUniqueArgs
  ): Promise<MhciSlateToefl | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MhciSlateToefl)
  async createMhciSlateToefl(
    @graphql.Args() args: CreateMhciSlateToeflArgs
  ): Promise<MhciSlateToefl> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MhciSlateToefl)
  async updateMhciSlateToefl(
    @graphql.Args() args: UpdateMhciSlateToeflArgs
  ): Promise<MhciSlateToefl | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MhciSlateToefl)
  async deleteMhciSlateToefl(
    @graphql.Args() args: DeleteMhciSlateToeflArgs
  ): Promise<MhciSlateToefl | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
