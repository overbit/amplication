/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DisabilityService } from "../disability.service";
import { DisabilityCreateInput } from "./DisabilityCreateInput";
import { Disability } from "./Disability";
import { DisabilityFindManyArgs } from "./DisabilityFindManyArgs";
import { DisabilityWhereUniqueInput } from "./DisabilityWhereUniqueInput";
import { DisabilityUpdateInput } from "./DisabilityUpdateInput";

export class DisabilityControllerBase {
  constructor(protected readonly service: DisabilityService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Disability })
  async createDisability(
    @common.Body() data: DisabilityCreateInput
  ): Promise<Disability> {
    return await this.service.createDisability({
      data: data,
      select: {
        applicationId: true,
        hasDisability: true,
        disabilityType: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Disability] })
  @ApiNestedQuery(DisabilityFindManyArgs)
  async disabilities(@common.Req() request: Request): Promise<Disability[]> {
    const args = plainToClass(DisabilityFindManyArgs, request.query);
    return this.service.disabilities({
      ...args,
      select: {
        applicationId: true,
        hasDisability: true,
        disabilityType: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Disability })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async disability(
    @common.Param() params: DisabilityWhereUniqueInput
  ): Promise<Disability | null> {
    const result = await this.service.disability({
      where: params,
      select: {
        applicationId: true,
        hasDisability: true,
        disabilityType: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Disability })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDisability(
    @common.Param() params: DisabilityWhereUniqueInput,
    @common.Body() data: DisabilityUpdateInput
  ): Promise<Disability | null> {
    try {
      return await this.service.updateDisability({
        where: params,
        data: data,
        select: {
          applicationId: true,
          hasDisability: true,
          disabilityType: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Disability })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDisability(
    @common.Param() params: DisabilityWhereUniqueInput
  ): Promise<Disability | null> {
    try {
      return await this.service.deleteDisability({
        where: params,
        select: {
          applicationId: true,
          hasDisability: true,
          disabilityType: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
