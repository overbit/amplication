/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CmuAffiliationService } from "../cmuAffiliation.service";
import { CmuAffiliationCreateInput } from "./CmuAffiliationCreateInput";
import { CmuAffiliation } from "./CmuAffiliation";
import { CmuAffiliationFindManyArgs } from "./CmuAffiliationFindManyArgs";
import { CmuAffiliationWhereUniqueInput } from "./CmuAffiliationWhereUniqueInput";
import { CmuAffiliationUpdateInput } from "./CmuAffiliationUpdateInput";

export class CmuAffiliationControllerBase {
  constructor(protected readonly service: CmuAffiliationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CmuAffiliation })
  async createCmuAffiliation(
    @common.Body() data: CmuAffiliationCreateInput
  ): Promise<CmuAffiliation> {
    return await this.service.createCmuAffiliation({
      data: data,
      select: {
        applicationId: true,
        cmuStudentOrAlumnus: true,
        cmuEmployee: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CmuAffiliation] })
  @ApiNestedQuery(CmuAffiliationFindManyArgs)
  async cmuAffiliations(
    @common.Req() request: Request
  ): Promise<CmuAffiliation[]> {
    const args = plainToClass(CmuAffiliationFindManyArgs, request.query);
    return this.service.cmuAffiliations({
      ...args,
      select: {
        applicationId: true,
        cmuStudentOrAlumnus: true,
        cmuEmployee: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CmuAffiliation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cmuAffiliation(
    @common.Param() params: CmuAffiliationWhereUniqueInput
  ): Promise<CmuAffiliation | null> {
    const result = await this.service.cmuAffiliation({
      where: params,
      select: {
        applicationId: true,
        cmuStudentOrAlumnus: true,
        cmuEmployee: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CmuAffiliation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCmuAffiliation(
    @common.Param() params: CmuAffiliationWhereUniqueInput,
    @common.Body() data: CmuAffiliationUpdateInput
  ): Promise<CmuAffiliation | null> {
    try {
      return await this.service.updateCmuAffiliation({
        where: params,
        data: data,
        select: {
          applicationId: true,
          cmuStudentOrAlumnus: true,
          cmuEmployee: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CmuAffiliation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCmuAffiliation(
    @common.Param() params: CmuAffiliationWhereUniqueInput
  ): Promise<CmuAffiliation | null> {
    try {
      return await this.service.deleteCmuAffiliation({
        where: params,
        select: {
          applicationId: true,
          cmuStudentOrAlumnus: true,
          cmuEmployee: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
