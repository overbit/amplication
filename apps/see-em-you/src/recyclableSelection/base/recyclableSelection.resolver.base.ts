/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateRecyclableSelectionArgs } from "./CreateRecyclableSelectionArgs";
import { UpdateRecyclableSelectionArgs } from "./UpdateRecyclableSelectionArgs";
import { DeleteRecyclableSelectionArgs } from "./DeleteRecyclableSelectionArgs";
import { RecyclableSelectionCountArgs } from "./RecyclableSelectionCountArgs";
import { RecyclableSelectionFindManyArgs } from "./RecyclableSelectionFindManyArgs";
import { RecyclableSelectionFindUniqueArgs } from "./RecyclableSelectionFindUniqueArgs";
import { RecyclableSelection } from "./RecyclableSelection";
import { RecyclableSelectionService } from "../recyclableSelection.service";
@graphql.Resolver(() => RecyclableSelection)
export class RecyclableSelectionResolverBase {
  constructor(protected readonly service: RecyclableSelectionService) {}

  async _recyclableSelectionsMeta(
    @graphql.Args() args: RecyclableSelectionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RecyclableSelection])
  async recyclableSelections(
    @graphql.Args() args: RecyclableSelectionFindManyArgs
  ): Promise<RecyclableSelection[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => RecyclableSelection, { nullable: true })
  async recyclableSelection(
    @graphql.Args() args: RecyclableSelectionFindUniqueArgs
  ): Promise<RecyclableSelection | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RecyclableSelection)
  async createRecyclableSelection(
    @graphql.Args() args: CreateRecyclableSelectionArgs
  ): Promise<RecyclableSelection> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => RecyclableSelection)
  async updateRecyclableSelection(
    @graphql.Args() args: UpdateRecyclableSelectionArgs
  ): Promise<RecyclableSelection | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RecyclableSelection)
  async deleteRecyclableSelection(
    @graphql.Args() args: DeleteRecyclableSelectionArgs
  ): Promise<RecyclableSelection | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
