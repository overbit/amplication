/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PaymentVoucherService } from "../paymentVoucher.service";
import { PaymentVoucherCreateInput } from "./PaymentVoucherCreateInput";
import { PaymentVoucher } from "./PaymentVoucher";
import { PaymentVoucherFindManyArgs } from "./PaymentVoucherFindManyArgs";
import { PaymentVoucherWhereUniqueInput } from "./PaymentVoucherWhereUniqueInput";
import { PaymentVoucherUpdateInput } from "./PaymentVoucherUpdateInput";

export class PaymentVoucherControllerBase {
  constructor(protected readonly service: PaymentVoucherService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PaymentVoucher })
  async createPaymentVoucher(
    @common.Body() data: PaymentVoucherCreateInput
  ): Promise<PaymentVoucher> {
    return await this.service.createPaymentVoucher({
      data: {
        ...data,

        payment: {
          connect: data.payment,
        },
      },
      select: {
        datafileinfoId: true,

        payment: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PaymentVoucher] })
  @ApiNestedQuery(PaymentVoucherFindManyArgs)
  async paymentVouchers(
    @common.Req() request: Request
  ): Promise<PaymentVoucher[]> {
    const args = plainToClass(PaymentVoucherFindManyArgs, request.query);
    return this.service.paymentVouchers({
      ...args,
      select: {
        datafileinfoId: true,

        payment: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PaymentVoucher })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async paymentVoucher(
    @common.Param() params: PaymentVoucherWhereUniqueInput
  ): Promise<PaymentVoucher | null> {
    const result = await this.service.paymentVoucher({
      where: params,
      select: {
        datafileinfoId: true,

        payment: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PaymentVoucher })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePaymentVoucher(
    @common.Param() params: PaymentVoucherWhereUniqueInput,
    @common.Body() data: PaymentVoucherUpdateInput
  ): Promise<PaymentVoucher | null> {
    try {
      return await this.service.updatePaymentVoucher({
        where: params,
        data: {
          ...data,

          payment: {
            connect: data.payment,
          },
        },
        select: {
          datafileinfoId: true,

          payment: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PaymentVoucher })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePaymentVoucher(
    @common.Param() params: PaymentVoucherWhereUniqueInput
  ): Promise<PaymentVoucher | null> {
    try {
      return await this.service.deletePaymentVoucher({
        where: params,
        select: {
          datafileinfoId: true,

          payment: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
