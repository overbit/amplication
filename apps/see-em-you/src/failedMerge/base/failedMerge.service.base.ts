/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FailedMerge as PrismaFailedMerge } from "@prisma/client";

export class FailedMergeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.FailedMergeCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.FailedMergeCountArgs>
  ): Promise<number> {
    return this.prisma.failedMerge.count(args);
  }

  async failedMerges<T extends Prisma.FailedMergeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FailedMergeFindManyArgs>
  ): Promise<PrismaFailedMerge[]> {
    return this.prisma.failedMerge.findMany(args);
  }
  async failedMerge<T extends Prisma.FailedMergeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FailedMergeFindUniqueArgs>
  ): Promise<PrismaFailedMerge | null> {
    return this.prisma.failedMerge.findUnique(args);
  }
  async createFailedMerge<T extends Prisma.FailedMergeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FailedMergeCreateArgs>
  ): Promise<PrismaFailedMerge> {
    return this.prisma.failedMerge.create<T>(args);
  }
  async updateFailedMerge<T extends Prisma.FailedMergeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FailedMergeUpdateArgs>
  ): Promise<PrismaFailedMerge> {
    return this.prisma.failedMerge.update<T>(args);
  }
  async deleteFailedMerge<T extends Prisma.FailedMergeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FailedMergeDeleteArgs>
  ): Promise<PrismaFailedMerge> {
    return this.prisma.failedMerge.delete(args);
  }
}
