/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FailedMergeService } from "../failedMerge.service";
import { FailedMergeCreateInput } from "./FailedMergeCreateInput";
import { FailedMerge } from "./FailedMerge";
import { FailedMergeFindManyArgs } from "./FailedMergeFindManyArgs";
import { FailedMergeWhereUniqueInput } from "./FailedMergeWhereUniqueInput";
import { FailedMergeUpdateInput } from "./FailedMergeUpdateInput";

export class FailedMergeControllerBase {
  constructor(protected readonly service: FailedMergeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FailedMerge })
  async createFailedMerge(
    @common.Body() data: FailedMergeCreateInput
  ): Promise<FailedMerge> {
    return await this.service.createFailedMerge({
      data: data,
      select: {
        applicationId: true,
        guid: true,
        file: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FailedMerge] })
  @ApiNestedQuery(FailedMergeFindManyArgs)
  async failedMerges(@common.Req() request: Request): Promise<FailedMerge[]> {
    const args = plainToClass(FailedMergeFindManyArgs, request.query);
    return this.service.failedMerges({
      ...args,
      select: {
        applicationId: true,
        guid: true,
        file: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FailedMerge })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async failedMerge(
    @common.Param() params: FailedMergeWhereUniqueInput
  ): Promise<FailedMerge | null> {
    const result = await this.service.failedMerge({
      where: params,
      select: {
        applicationId: true,
        guid: true,
        file: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FailedMerge })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFailedMerge(
    @common.Param() params: FailedMergeWhereUniqueInput,
    @common.Body() data: FailedMergeUpdateInput
  ): Promise<FailedMerge | null> {
    try {
      return await this.service.updateFailedMerge({
        where: params,
        data: data,
        select: {
          applicationId: true,
          guid: true,
          file: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FailedMerge })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFailedMerge(
    @common.Param() params: FailedMergeWhereUniqueInput
  ): Promise<FailedMerge | null> {
    try {
      return await this.service.deleteFailedMerge({
        where: params,
        select: {
          applicationId: true,
          guid: true,
          file: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
