/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateFailedMergeArgs } from "./CreateFailedMergeArgs";
import { UpdateFailedMergeArgs } from "./UpdateFailedMergeArgs";
import { DeleteFailedMergeArgs } from "./DeleteFailedMergeArgs";
import { FailedMergeCountArgs } from "./FailedMergeCountArgs";
import { FailedMergeFindManyArgs } from "./FailedMergeFindManyArgs";
import { FailedMergeFindUniqueArgs } from "./FailedMergeFindUniqueArgs";
import { FailedMerge } from "./FailedMerge";
import { FailedMergeService } from "../failedMerge.service";
@graphql.Resolver(() => FailedMerge)
export class FailedMergeResolverBase {
  constructor(protected readonly service: FailedMergeService) {}

  async _failedMergesMeta(
    @graphql.Args() args: FailedMergeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FailedMerge])
  async failedMerges(
    @graphql.Args() args: FailedMergeFindManyArgs
  ): Promise<FailedMerge[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => FailedMerge, { nullable: true })
  async failedMerge(
    @graphql.Args() args: FailedMergeFindUniqueArgs
  ): Promise<FailedMerge | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FailedMerge)
  async createFailedMerge(
    @graphql.Args() args: CreateFailedMergeArgs
  ): Promise<FailedMerge> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FailedMerge)
  async updateFailedMerge(
    @graphql.Args() args: UpdateFailedMergeArgs
  ): Promise<FailedMerge | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FailedMerge)
  async deleteFailedMerge(
    @graphql.Args() args: DeleteFailedMergeArgs
  ): Promise<FailedMerge | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
