/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Usersinst as PrismaUsersinst } from "@prisma/client";

export class UsersinstServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.UsersinstCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.UsersinstCountArgs>
  ): Promise<number> {
    return this.prisma.usersinst.count(args);
  }

  async usersinsts<T extends Prisma.UsersinstFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UsersinstFindManyArgs>
  ): Promise<PrismaUsersinst[]> {
    return this.prisma.usersinst.findMany(args);
  }
  async usersinst<T extends Prisma.UsersinstFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UsersinstFindUniqueArgs>
  ): Promise<PrismaUsersinst | null> {
    return this.prisma.usersinst.findUnique(args);
  }
  async createUsersinst<T extends Prisma.UsersinstCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UsersinstCreateArgs>
  ): Promise<PrismaUsersinst> {
    return this.prisma.usersinst.create<T>(args);
  }
  async updateUsersinst<T extends Prisma.UsersinstUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UsersinstUpdateArgs>
  ): Promise<PrismaUsersinst> {
    return this.prisma.usersinst.update<T>(args);
  }
  async deleteUsersinst<T extends Prisma.UsersinstDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UsersinstDeleteArgs>
  ): Promise<PrismaUsersinst> {
    return this.prisma.usersinst.delete(args);
  }
}
