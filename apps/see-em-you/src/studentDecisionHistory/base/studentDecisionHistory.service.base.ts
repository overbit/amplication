/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  StudentDecisionHistory as PrismaStudentDecisionHistory,
  Application as PrismaApplication,
} from "@prisma/client";

export class StudentDecisionHistoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.StudentDecisionHistoryCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDecisionHistoryCountArgs>
  ): Promise<number> {
    return this.prisma.studentDecisionHistory.count(args);
  }

  async studentDecisionHistories<
    T extends Prisma.StudentDecisionHistoryFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.StudentDecisionHistoryFindManyArgs>
  ): Promise<PrismaStudentDecisionHistory[]> {
    return this.prisma.studentDecisionHistory.findMany(args);
  }
  async studentDecisionHistory<
    T extends Prisma.StudentDecisionHistoryFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.StudentDecisionHistoryFindUniqueArgs>
  ): Promise<PrismaStudentDecisionHistory | null> {
    return this.prisma.studentDecisionHistory.findUnique(args);
  }
  async createStudentDecisionHistory<
    T extends Prisma.StudentDecisionHistoryCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.StudentDecisionHistoryCreateArgs>
  ): Promise<PrismaStudentDecisionHistory> {
    return this.prisma.studentDecisionHistory.create<T>(args);
  }
  async updateStudentDecisionHistory<
    T extends Prisma.StudentDecisionHistoryUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.StudentDecisionHistoryUpdateArgs>
  ): Promise<PrismaStudentDecisionHistory> {
    return this.prisma.studentDecisionHistory.update<T>(args);
  }
  async deleteStudentDecisionHistory<
    T extends Prisma.StudentDecisionHistoryDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.StudentDecisionHistoryDeleteArgs>
  ): Promise<PrismaStudentDecisionHistory> {
    return this.prisma.studentDecisionHistory.delete(args);
  }

  async getApplication(parentId: number): Promise<PrismaApplication | null> {
    return this.prisma.studentDecisionHistory
      .findUnique({
        where: { id: parentId },
      })
      .application();
  }
}
