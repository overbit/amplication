/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DisabilityType as PrismaDisabilityType } from "@prisma/client";

export class DisabilityTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.DisabilityTypeCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.DisabilityTypeCountArgs>
  ): Promise<number> {
    return this.prisma.disabilityType.count(args);
  }

  async disabilityTypes<T extends Prisma.DisabilityTypeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DisabilityTypeFindManyArgs>
  ): Promise<PrismaDisabilityType[]> {
    return this.prisma.disabilityType.findMany(args);
  }
  async disabilityType<T extends Prisma.DisabilityTypeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DisabilityTypeFindUniqueArgs>
  ): Promise<PrismaDisabilityType | null> {
    return this.prisma.disabilityType.findUnique(args);
  }
  async createDisabilityType<T extends Prisma.DisabilityTypeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DisabilityTypeCreateArgs>
  ): Promise<PrismaDisabilityType> {
    return this.prisma.disabilityType.create<T>(args);
  }
  async updateDisabilityType<T extends Prisma.DisabilityTypeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DisabilityTypeUpdateArgs>
  ): Promise<PrismaDisabilityType> {
    return this.prisma.disabilityType.update<T>(args);
  }
  async deleteDisabilityType<T extends Prisma.DisabilityTypeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DisabilityTypeDeleteArgs>
  ): Promise<PrismaDisabilityType> {
    return this.prisma.disabilityType.delete(args);
  }
}
