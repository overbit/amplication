/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DisabilityTypeService } from "../disabilityType.service";
import { DisabilityTypeCreateInput } from "./DisabilityTypeCreateInput";
import { DisabilityType } from "./DisabilityType";
import { DisabilityTypeFindManyArgs } from "./DisabilityTypeFindManyArgs";
import { DisabilityTypeWhereUniqueInput } from "./DisabilityTypeWhereUniqueInput";
import { DisabilityTypeUpdateInput } from "./DisabilityTypeUpdateInput";

export class DisabilityTypeControllerBase {
  constructor(protected readonly service: DisabilityTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DisabilityType })
  async createDisabilityType(
    @common.Body() data: DisabilityTypeCreateInput
  ): Promise<DisabilityType> {
    return await this.service.createDisabilityType({
      data: data,
      select: {
        value: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DisabilityType] })
  @ApiNestedQuery(DisabilityTypeFindManyArgs)
  async disabilityTypes(
    @common.Req() request: Request
  ): Promise<DisabilityType[]> {
    const args = plainToClass(DisabilityTypeFindManyArgs, request.query);
    return this.service.disabilityTypes({
      ...args,
      select: {
        value: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DisabilityType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async disabilityType(
    @common.Param() params: DisabilityTypeWhereUniqueInput
  ): Promise<DisabilityType | null> {
    const result = await this.service.disabilityType({
      where: params,
      select: {
        value: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DisabilityType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDisabilityType(
    @common.Param() params: DisabilityTypeWhereUniqueInput,
    @common.Body() data: DisabilityTypeUpdateInput
  ): Promise<DisabilityType | null> {
    try {
      return await this.service.updateDisabilityType({
        where: params,
        data: data,
        select: {
          value: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DisabilityType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDisabilityType(
    @common.Param() params: DisabilityTypeWhereUniqueInput
  ): Promise<DisabilityType | null> {
    try {
      return await this.service.deleteDisabilityType({
        where: params,
        select: {
          value: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
