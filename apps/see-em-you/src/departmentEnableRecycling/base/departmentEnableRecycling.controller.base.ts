/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DepartmentEnableRecyclingService } from "../departmentEnableRecycling.service";
import { DepartmentEnableRecyclingCreateInput } from "./DepartmentEnableRecyclingCreateInput";
import { DepartmentEnableRecycling } from "./DepartmentEnableRecycling";
import { DepartmentEnableRecyclingFindManyArgs } from "./DepartmentEnableRecyclingFindManyArgs";
import { DepartmentEnableRecyclingWhereUniqueInput } from "./DepartmentEnableRecyclingWhereUniqueInput";
import { DepartmentEnableRecyclingUpdateInput } from "./DepartmentEnableRecyclingUpdateInput";

export class DepartmentEnableRecyclingControllerBase {
  constructor(protected readonly service: DepartmentEnableRecyclingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DepartmentEnableRecycling })
  async createDepartmentEnableRecycling(
    @common.Body() data: DepartmentEnableRecyclingCreateInput
  ): Promise<DepartmentEnableRecycling> {
    return await this.service.createDepartmentEnableRecycling({
      data: data,
      select: {
        departmentId: true,
        periodId: true,
        enableRecycling: true,
        usersId: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DepartmentEnableRecycling] })
  @ApiNestedQuery(DepartmentEnableRecyclingFindManyArgs)
  async departmentEnableRecyclings(
    @common.Req() request: Request
  ): Promise<DepartmentEnableRecycling[]> {
    const args = plainToClass(
      DepartmentEnableRecyclingFindManyArgs,
      request.query
    );
    return this.service.departmentEnableRecyclings({
      ...args,
      select: {
        departmentId: true,
        periodId: true,
        enableRecycling: true,
        usersId: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DepartmentEnableRecycling })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async departmentEnableRecycling(
    @common.Param() params: DepartmentEnableRecyclingWhereUniqueInput
  ): Promise<DepartmentEnableRecycling | null> {
    const result = await this.service.departmentEnableRecycling({
      where: params,
      select: {
        departmentId: true,
        periodId: true,
        enableRecycling: true,
        usersId: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DepartmentEnableRecycling })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDepartmentEnableRecycling(
    @common.Param() params: DepartmentEnableRecyclingWhereUniqueInput,
    @common.Body() data: DepartmentEnableRecyclingUpdateInput
  ): Promise<DepartmentEnableRecycling | null> {
    try {
      return await this.service.updateDepartmentEnableRecycling({
        where: params,
        data: data,
        select: {
          departmentId: true,
          periodId: true,
          enableRecycling: true,
          usersId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DepartmentEnableRecycling })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDepartmentEnableRecycling(
    @common.Param() params: DepartmentEnableRecyclingWhereUniqueInput
  ): Promise<DepartmentEnableRecycling | null> {
    try {
      return await this.service.deleteDepartmentEnableRecycling({
        where: params,
        select: {
          departmentId: true,
          periodId: true,
          enableRecycling: true,
          usersId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
