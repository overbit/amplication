/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReviewRiskFactorOtherService } from "../reviewRiskFactorOther.service";
import { ReviewRiskFactorOtherCreateInput } from "./ReviewRiskFactorOtherCreateInput";
import { ReviewRiskFactorOther } from "./ReviewRiskFactorOther";
import { ReviewRiskFactorOtherFindManyArgs } from "./ReviewRiskFactorOtherFindManyArgs";
import { ReviewRiskFactorOtherWhereUniqueInput } from "./ReviewRiskFactorOtherWhereUniqueInput";
import { ReviewRiskFactorOtherUpdateInput } from "./ReviewRiskFactorOtherUpdateInput";

export class ReviewRiskFactorOtherControllerBase {
  constructor(protected readonly service: ReviewRiskFactorOtherService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ReviewRiskFactorOther })
  async createReviewRiskFactorOther(
    @common.Body() data: ReviewRiskFactorOtherCreateInput
  ): Promise<ReviewRiskFactorOther> {
    return await this.service.createReviewRiskFactorOther({
      data: data,
      select: {
        riskFactorOther: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ReviewRiskFactorOther] })
  @ApiNestedQuery(ReviewRiskFactorOtherFindManyArgs)
  async reviewRiskFactorOthers(
    @common.Req() request: Request
  ): Promise<ReviewRiskFactorOther[]> {
    const args = plainToClass(ReviewRiskFactorOtherFindManyArgs, request.query);
    return this.service.reviewRiskFactorOthers({
      ...args,
      select: {
        riskFactorOther: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ReviewRiskFactorOther })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async reviewRiskFactorOther(
    @common.Param() params: ReviewRiskFactorOtherWhereUniqueInput
  ): Promise<ReviewRiskFactorOther | null> {
    const result = await this.service.reviewRiskFactorOther({
      where: params,
      select: {
        riskFactorOther: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ReviewRiskFactorOther })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReviewRiskFactorOther(
    @common.Param() params: ReviewRiskFactorOtherWhereUniqueInput,
    @common.Body() data: ReviewRiskFactorOtherUpdateInput
  ): Promise<ReviewRiskFactorOther | null> {
    try {
      return await this.service.updateReviewRiskFactorOther({
        where: params,
        data: data,
        select: {
          riskFactorOther: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ReviewRiskFactorOther })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReviewRiskFactorOther(
    @common.Param() params: ReviewRiskFactorOtherWhereUniqueInput
  ): Promise<ReviewRiskFactorOther | null> {
    try {
      return await this.service.deleteReviewRiskFactorOther({
        where: params,
        select: {
          riskFactorOther: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
