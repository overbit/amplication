/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateReviewRiskFactorOtherArgs } from "./CreateReviewRiskFactorOtherArgs";
import { UpdateReviewRiskFactorOtherArgs } from "./UpdateReviewRiskFactorOtherArgs";
import { DeleteReviewRiskFactorOtherArgs } from "./DeleteReviewRiskFactorOtherArgs";
import { ReviewRiskFactorOtherCountArgs } from "./ReviewRiskFactorOtherCountArgs";
import { ReviewRiskFactorOtherFindManyArgs } from "./ReviewRiskFactorOtherFindManyArgs";
import { ReviewRiskFactorOtherFindUniqueArgs } from "./ReviewRiskFactorOtherFindUniqueArgs";
import { ReviewRiskFactorOther } from "./ReviewRiskFactorOther";
import { ReviewRiskFactorOtherService } from "../reviewRiskFactorOther.service";
@graphql.Resolver(() => ReviewRiskFactorOther)
export class ReviewRiskFactorOtherResolverBase {
  constructor(protected readonly service: ReviewRiskFactorOtherService) {}

  async _reviewRiskFactorOthersMeta(
    @graphql.Args() args: ReviewRiskFactorOtherCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ReviewRiskFactorOther])
  async reviewRiskFactorOthers(
    @graphql.Args() args: ReviewRiskFactorOtherFindManyArgs
  ): Promise<ReviewRiskFactorOther[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ReviewRiskFactorOther, { nullable: true })
  async reviewRiskFactorOther(
    @graphql.Args() args: ReviewRiskFactorOtherFindUniqueArgs
  ): Promise<ReviewRiskFactorOther | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ReviewRiskFactorOther)
  async createReviewRiskFactorOther(
    @graphql.Args() args: CreateReviewRiskFactorOtherArgs
  ): Promise<ReviewRiskFactorOther> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ReviewRiskFactorOther)
  async updateReviewRiskFactorOther(
    @graphql.Args() args: UpdateReviewRiskFactorOtherArgs
  ): Promise<ReviewRiskFactorOther | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReviewRiskFactorOther)
  async deleteReviewRiskFactorOther(
    @graphql.Args() args: DeleteReviewRiskFactorOtherArgs
  ): Promise<ReviewRiskFactorOther | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
