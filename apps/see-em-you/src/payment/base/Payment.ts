/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsInt,
  IsNumber,
  IsDate,
  IsEnum,
  ValidateNested,
  IsOptional,
} from "class-validator";
import { Decimal } from "decimal.js";
import { Type } from "class-transformer";
import { EnumPaymentPaymentStatus } from "./EnumPaymentPaymentStatus";
import { Application } from "../../application/base/Application";
import { PaymentVoucher } from "../../paymentVoucher/base/PaymentVoucher";

@ObjectType()
class Payment {
  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  paymentId!: number;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  paymentType!: number;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Float)
  paymentAmount!: Decimal;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  paymentIntentDate!: Date;

  @ApiProperty({
    required: true,
    enum: EnumPaymentPaymentStatus,
  })
  @IsEnum(EnumPaymentPaymentStatus)
  @Field(() => EnumPaymentPaymentStatus, {
    nullable: true,
  })
  payment_status?: "pending" | "paid" | "refunded" | "void";

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  lastModTime!: Date;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  lastModUserId!: number;

  @ApiProperty({
    required: true,
    type: () => Application,
  })
  @ValidateNested()
  @Type(() => Application)
  application?: Application;

  @ApiProperty({
    required: false,
    type: () => PaymentVoucher,
  })
  @ValidateNested()
  @Type(() => PaymentVoucher)
  @IsOptional()
  paymentVoucher?: PaymentVoucher | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  id!: number;
}

export { Payment as Payment };
