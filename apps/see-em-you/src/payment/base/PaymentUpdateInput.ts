/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { ApplicationWhereUniqueInput } from "../../application/base/ApplicationWhereUniqueInput";
import {
  ValidateNested,
  IsOptional,
  IsInt,
  IsNumber,
  IsDate,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { Decimal } from "decimal.js";
import { EnumPaymentPaymentStatus } from "./EnumPaymentPaymentStatus";
import { PaymentVoucherWhereUniqueInput } from "../../paymentVoucher/base/PaymentVoucherWhereUniqueInput";

@InputType()
class PaymentUpdateInput {
  @ApiProperty({
    required: false,
    type: () => ApplicationWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ApplicationWhereUniqueInput)
  @IsOptional()
  @Field(() => ApplicationWhereUniqueInput, {
    nullable: true,
  })
  application?: ApplicationWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  lastModUserId?: number;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  paymentAmount?: Decimal;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  paymentId?: number;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  paymentIntentDate?: Date;

  @ApiProperty({
    required: false,
    enum: EnumPaymentPaymentStatus,
  })
  @IsEnum(EnumPaymentPaymentStatus)
  @IsOptional()
  @Field(() => EnumPaymentPaymentStatus, {
    nullable: true,
  })
  payment_status?: "pending" | "paid" | "refunded" | "void";

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  paymentType?: number;

  @ApiProperty({
    required: false,
    type: () => PaymentVoucherWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => PaymentVoucherWhereUniqueInput)
  @IsOptional()
  @Field(() => PaymentVoucherWhereUniqueInput, {
    nullable: true,
  })
  paymentVoucher?: PaymentVoucherWhereUniqueInput | null;
}

export { PaymentUpdateInput as PaymentUpdateInput };
