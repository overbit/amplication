/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EtsToeflScoreService } from "../etsToeflScore.service";
import { EtsToeflScoreCreateInput } from "./EtsToeflScoreCreateInput";
import { EtsToeflScoreWhereInput } from "./EtsToeflScoreWhereInput";
import { EtsToeflScoreWhereUniqueInput } from "./EtsToeflScoreWhereUniqueInput";
import { EtsToeflScoreFindManyArgs } from "./EtsToeflScoreFindManyArgs";
import { EtsToeflScoreUpdateInput } from "./EtsToeflScoreUpdateInput";
import { EtsToeflScore } from "./EtsToeflScore";

export class EtsToeflScoreControllerBase {
  constructor(protected readonly service: EtsToeflScoreService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EtsToeflScore })
  async create(
    @common.Body() data: EtsToeflScoreCreateInput
  ): Promise<EtsToeflScore> {
    return await this.service.create({
      data: data,
      select: {
        address1: true,
        address2: true,
        address3: true,
        address4: true,
        addressCity: true,
        addressState: true,
        addressZip: true,
        countryCode: true,
        countryName: true,
        createdDate: true,
        deptCode: true,
        dob: true,
        email: true,
        essentialsListening: true,
        essentialsListeningCEFR: true,
        essentialsListeningmb: true,
        essentialsListeningmbDate: true,
        essentialsReading: true,
        essentialsReadingCEFR: true,
        essentialsReadingmb: true,
        essentialsReadingmbDate: true,
        essentialsSpeaking: true,
        essentialsSpeakingCEFR: true,
        essentialsSpeakingmb: true,
        essentialsSpeakingmbDate: true,
        essentialsTotalBandScore: true,
        essentialsTotalBandScoreCEFR: true,
        essentialsTotalBandScoremb: true,
        essentialsTotalBandScorembDate: true,
        essentialsWriting: true,
        essentialsWritingCEFR: true,
        essentialsWritingmb: true,
        essentialsWritingmbDate: true,
        fName: true,
        gender: true,
        id: true,
        identificationType: true,
        idNumber: true,
        instCode: true,
        issuingCountry: true,
        listening: true,
        listeningIndicator: true,
        listeningmb: true,
        listeningmbDate: true,
        lName: true,
        mName: true,
        nativeCountryCode: true,
        nativeCountryName: true,
        nativeLanguageCode: true,
        nativeLanguageName: true,
        reading: true,
        readingmb: true,
        readingmbDate: true,
        regNumber: true,
        reportDate: true,
        rPDTListening: true,
        rPDTReading: true,
        rPDTWriting: true,
        speaking: true,
        speakingIndicator: true,
        speakingmb: true,
        speakingmbDate: true,
        testCenterCode: true,
        testCenterCodeRPDT: true,
        testCountryLocation: true,
        testDate: true,
        testType: true,
        total: true,
        totalmb: true,
        totalmbDate: true,
        writing: true,
        writingmb: true,
        writingmbDate: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EtsToeflScore] })
  @ApiNestedQuery(EtsToeflScoreFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<EtsToeflScore[]> {
    const args = plainToClass(EtsToeflScoreFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        address1: true,
        address2: true,
        address3: true,
        address4: true,
        addressCity: true,
        addressState: true,
        addressZip: true,
        countryCode: true,
        countryName: true,
        createdDate: true,
        deptCode: true,
        dob: true,
        email: true,
        essentialsListening: true,
        essentialsListeningCEFR: true,
        essentialsListeningmb: true,
        essentialsListeningmbDate: true,
        essentialsReading: true,
        essentialsReadingCEFR: true,
        essentialsReadingmb: true,
        essentialsReadingmbDate: true,
        essentialsSpeaking: true,
        essentialsSpeakingCEFR: true,
        essentialsSpeakingmb: true,
        essentialsSpeakingmbDate: true,
        essentialsTotalBandScore: true,
        essentialsTotalBandScoreCEFR: true,
        essentialsTotalBandScoremb: true,
        essentialsTotalBandScorembDate: true,
        essentialsWriting: true,
        essentialsWritingCEFR: true,
        essentialsWritingmb: true,
        essentialsWritingmbDate: true,
        fName: true,
        gender: true,
        id: true,
        identificationType: true,
        idNumber: true,
        instCode: true,
        issuingCountry: true,
        listening: true,
        listeningIndicator: true,
        listeningmb: true,
        listeningmbDate: true,
        lName: true,
        mName: true,
        nativeCountryCode: true,
        nativeCountryName: true,
        nativeLanguageCode: true,
        nativeLanguageName: true,
        reading: true,
        readingmb: true,
        readingmbDate: true,
        regNumber: true,
        reportDate: true,
        rPDTListening: true,
        rPDTReading: true,
        rPDTWriting: true,
        speaking: true,
        speakingIndicator: true,
        speakingmb: true,
        speakingmbDate: true,
        testCenterCode: true,
        testCenterCodeRPDT: true,
        testCountryLocation: true,
        testDate: true,
        testType: true,
        total: true,
        totalmb: true,
        totalmbDate: true,
        writing: true,
        writingmb: true,
        writingmbDate: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EtsToeflScore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: EtsToeflScoreWhereUniqueInput
  ): Promise<EtsToeflScore | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        address1: true,
        address2: true,
        address3: true,
        address4: true,
        addressCity: true,
        addressState: true,
        addressZip: true,
        countryCode: true,
        countryName: true,
        createdDate: true,
        deptCode: true,
        dob: true,
        email: true,
        essentialsListening: true,
        essentialsListeningCEFR: true,
        essentialsListeningmb: true,
        essentialsListeningmbDate: true,
        essentialsReading: true,
        essentialsReadingCEFR: true,
        essentialsReadingmb: true,
        essentialsReadingmbDate: true,
        essentialsSpeaking: true,
        essentialsSpeakingCEFR: true,
        essentialsSpeakingmb: true,
        essentialsSpeakingmbDate: true,
        essentialsTotalBandScore: true,
        essentialsTotalBandScoreCEFR: true,
        essentialsTotalBandScoremb: true,
        essentialsTotalBandScorembDate: true,
        essentialsWriting: true,
        essentialsWritingCEFR: true,
        essentialsWritingmb: true,
        essentialsWritingmbDate: true,
        fName: true,
        gender: true,
        id: true,
        identificationType: true,
        idNumber: true,
        instCode: true,
        issuingCountry: true,
        listening: true,
        listeningIndicator: true,
        listeningmb: true,
        listeningmbDate: true,
        lName: true,
        mName: true,
        nativeCountryCode: true,
        nativeCountryName: true,
        nativeLanguageCode: true,
        nativeLanguageName: true,
        reading: true,
        readingmb: true,
        readingmbDate: true,
        regNumber: true,
        reportDate: true,
        rPDTListening: true,
        rPDTReading: true,
        rPDTWriting: true,
        speaking: true,
        speakingIndicator: true,
        speakingmb: true,
        speakingmbDate: true,
        testCenterCode: true,
        testCenterCodeRPDT: true,
        testCountryLocation: true,
        testDate: true,
        testType: true,
        total: true,
        totalmb: true,
        totalmbDate: true,
        writing: true,
        writingmb: true,
        writingmbDate: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EtsToeflScore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: EtsToeflScoreWhereUniqueInput,
    @common.Body() data: EtsToeflScoreUpdateInput
  ): Promise<EtsToeflScore | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          address1: true,
          address2: true,
          address3: true,
          address4: true,
          addressCity: true,
          addressState: true,
          addressZip: true,
          countryCode: true,
          countryName: true,
          createdDate: true,
          deptCode: true,
          dob: true,
          email: true,
          essentialsListening: true,
          essentialsListeningCEFR: true,
          essentialsListeningmb: true,
          essentialsListeningmbDate: true,
          essentialsReading: true,
          essentialsReadingCEFR: true,
          essentialsReadingmb: true,
          essentialsReadingmbDate: true,
          essentialsSpeaking: true,
          essentialsSpeakingCEFR: true,
          essentialsSpeakingmb: true,
          essentialsSpeakingmbDate: true,
          essentialsTotalBandScore: true,
          essentialsTotalBandScoreCEFR: true,
          essentialsTotalBandScoremb: true,
          essentialsTotalBandScorembDate: true,
          essentialsWriting: true,
          essentialsWritingCEFR: true,
          essentialsWritingmb: true,
          essentialsWritingmbDate: true,
          fName: true,
          gender: true,
          id: true,
          identificationType: true,
          idNumber: true,
          instCode: true,
          issuingCountry: true,
          listening: true,
          listeningIndicator: true,
          listeningmb: true,
          listeningmbDate: true,
          lName: true,
          mName: true,
          nativeCountryCode: true,
          nativeCountryName: true,
          nativeLanguageCode: true,
          nativeLanguageName: true,
          reading: true,
          readingmb: true,
          readingmbDate: true,
          regNumber: true,
          reportDate: true,
          rPDTListening: true,
          rPDTReading: true,
          rPDTWriting: true,
          speaking: true,
          speakingIndicator: true,
          speakingmb: true,
          speakingmbDate: true,
          testCenterCode: true,
          testCenterCodeRPDT: true,
          testCountryLocation: true,
          testDate: true,
          testType: true,
          total: true,
          totalmb: true,
          totalmbDate: true,
          writing: true,
          writingmb: true,
          writingmbDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EtsToeflScore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: EtsToeflScoreWhereUniqueInput
  ): Promise<EtsToeflScore | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          address1: true,
          address2: true,
          address3: true,
          address4: true,
          addressCity: true,
          addressState: true,
          addressZip: true,
          countryCode: true,
          countryName: true,
          createdDate: true,
          deptCode: true,
          dob: true,
          email: true,
          essentialsListening: true,
          essentialsListeningCEFR: true,
          essentialsListeningmb: true,
          essentialsListeningmbDate: true,
          essentialsReading: true,
          essentialsReadingCEFR: true,
          essentialsReadingmb: true,
          essentialsReadingmbDate: true,
          essentialsSpeaking: true,
          essentialsSpeakingCEFR: true,
          essentialsSpeakingmb: true,
          essentialsSpeakingmbDate: true,
          essentialsTotalBandScore: true,
          essentialsTotalBandScoreCEFR: true,
          essentialsTotalBandScoremb: true,
          essentialsTotalBandScorembDate: true,
          essentialsWriting: true,
          essentialsWritingCEFR: true,
          essentialsWritingmb: true,
          essentialsWritingmbDate: true,
          fName: true,
          gender: true,
          id: true,
          identificationType: true,
          idNumber: true,
          instCode: true,
          issuingCountry: true,
          listening: true,
          listeningIndicator: true,
          listeningmb: true,
          listeningmbDate: true,
          lName: true,
          mName: true,
          nativeCountryCode: true,
          nativeCountryName: true,
          nativeLanguageCode: true,
          nativeLanguageName: true,
          reading: true,
          readingmb: true,
          readingmbDate: true,
          regNumber: true,
          reportDate: true,
          rPDTListening: true,
          rPDTReading: true,
          rPDTWriting: true,
          speaking: true,
          speakingIndicator: true,
          speakingmb: true,
          speakingmbDate: true,
          testCenterCode: true,
          testCenterCodeRPDT: true,
          testCountryLocation: true,
          testDate: true,
          testType: true,
          total: true,
          totalmb: true,
          totalmbDate: true,
          writing: true,
          writingmb: true,
          writingmbDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
