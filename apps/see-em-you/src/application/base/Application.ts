/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AcoPal } from "../../acoPal/base/AcoPal";
import {
  ValidateNested,
  IsOptional,
  IsString,
  IsBoolean,
  IsInt,
  IsDate,
  IsNumber,
} from "class-validator";
import { Type } from "class-transformer";
import { ApplicationAdminNote } from "../../applicationAdminNote/base/ApplicationAdminNote";
import { Attendance } from "../../attendance/base/Attendance";
import { CashnetPayment } from "../../cashnetPayment/base/CashnetPayment";
import { Experience } from "../../experience/base/Experience";
import { Fellowship } from "../../fellowship/base/Fellowship";
import { Gmatscore } from "../../gmatscore/base/Gmatscore";
import { Gresubjectscore } from "../../gresubjectscore/base/Gresubjectscore";
import { Ieltsscore } from "../../ieltsscore/base/Ieltsscore";
import { LuApplicationAdvisor } from "../../luApplicationAdvisor/base/LuApplicationAdvisor";
import { LuApplicationAppreq } from "../../luApplicationAppreq/base/LuApplicationAppreq";
import { LuApplicationCohort } from "../../luApplicationCohort/base/LuApplicationCohort";
import { LuApplicationGroup } from "../../luApplicationGroup/base/LuApplicationGroup";
import { LuApplicationProgram } from "../../luApplicationProgram/base/LuApplicationProgram";
import { LuApplicationStartSemester } from "../../luApplicationStartSemester/base/LuApplicationStartSemester";
import { MhciPrereq } from "../../mhciPrereq/base/MhciPrereq";
import { MhciPrereqsCourse } from "../../mhciPrereqsCourse/base/MhciPrereqsCourse";
import { MlArea } from "../../mlArea/base/MlArea";
import { MlSupportingCoursework } from "../../mlSupportingCoursework/base/MlSupportingCoursework";
import { MseAqa } from "../../mseAqa/base/MseAqa";
import { MseCodility } from "../../mseCodility/base/MseCodility";
import { Payment } from "../../payment/base/Payment";
import { Decimal } from "decimal.js";
import { PeriodApplication } from "../../periodApplication/base/PeriodApplication";
import { PromotionHistory } from "../../promotionHistory/base/PromotionHistory";
import { Publication } from "../../publication/base/Publication";
import { Recommend } from "../../recommend/base/Recommend";
import { RegistrationFeePayment } from "../../registrationFeePayment/base/RegistrationFeePayment";
import { RegistrationFeeStatus } from "../../registrationFeeStatus/base/RegistrationFeeStatus";
import { Review } from "../../review/base/Review";
import { RissFunding } from "../../rissFunding/base/RissFunding";
import { RissMcnair } from "../../rissMcnair/base/RissMcnair";
import { SpecialConsideration } from "../../specialConsideration/base/SpecialConsideration";
import { StudentDecision } from "../../studentDecision/base/StudentDecision";
import { StudentDecisionHistory } from "../../studentDecisionHistory/base/StudentDecisionHistory";
import { TagMember } from "../../tagMember/base/TagMember";

@ObjectType()
class Application {
  @ApiProperty({
    required: false,
    type: () => AcoPal,
  })
  @ValidateNested()
  @Type(() => AcoPal)
  @IsOptional()
  acoPal?: AcoPal | null;

  @ApiProperty({
    required: false,
    type: () => [ApplicationAdminNote],
  })
  @ValidateNested()
  @Type(() => ApplicationAdminNote)
  @IsOptional()
  applicationAdminNote?: Array<ApplicationAdminNote>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  area1!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  area2!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  area3!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Attendance],
  })
  @ValidateNested()
  @Type(() => Attendance)
  @IsOptional()
  attendance?: Array<Attendance>;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  buckleywaive!: boolean | null;

  @ApiProperty({
    required: false,
    type: () => [CashnetPayment],
  })
  @ValidateNested()
  @Type(() => CashnetPayment)
  @IsOptional()
  cashnetPayment?: Array<CashnetPayment>;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  cnbc!: number | null;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  complete!: boolean;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  createdDate!: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  crossDeptProgs!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  crossDeptProgsOther!: string | null;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  cups!: boolean;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  curEnrolled!: string;

  @ApiProperty({
    required: false,
    type: () => [Experience],
  })
  @ValidateNested()
  @Type(() => Experience)
  @IsOptional()
  experience?: Array<Experience>;

  @ApiProperty({
    required: false,
    type: () => [Fellowship],
  })
  @ValidateNested()
  @Type(() => Fellowship)
  @IsOptional()
  fellowships?: Array<Fellowship>;

  @ApiProperty({
    required: false,
    type: () => [Gmatscore],
  })
  @ValidateNested()
  @Type(() => Gmatscore)
  @IsOptional()
  gmatscore?: Array<Gmatscore>;

  @ApiProperty({
    required: false,
    type: () => [Gresubjectscore],
  })
  @ValidateNested()
  @Type(() => Gresubjectscore)
  @IsOptional()
  gresubjectscore?: Array<Gresubjectscore>;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  hide!: boolean;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  honors!: string | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  id!: number;

  @ApiProperty({
    required: false,
    type: () => [Ieltsscore],
  })
  @ValidateNested()
  @Type(() => Ieltsscore)
  @IsOptional()
  ieltsscore?: Array<Ieltsscore>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  invitationEmailSent!: string | null;

  @ApiProperty({
    required: false,
    type: () => [LuApplicationAdvisor],
  })
  @ValidateNested()
  @Type(() => LuApplicationAdvisor)
  @IsOptional()
  luApplicationAdvisor?: Array<LuApplicationAdvisor>;

  @ApiProperty({
    required: false,
    type: () => [LuApplicationAppreq],
  })
  @ValidateNested()
  @Type(() => LuApplicationAppreq)
  @IsOptional()
  luApplicationAppreqs?: Array<LuApplicationAppreq>;

  @ApiProperty({
    required: false,
    type: () => LuApplicationCohort,
  })
  @ValidateNested()
  @Type(() => LuApplicationCohort)
  @IsOptional()
  luApplicationCohort?: LuApplicationCohort | null;

  @ApiProperty({
    required: false,
    type: () => [LuApplicationGroup],
  })
  @ValidateNested()
  @Type(() => LuApplicationGroup)
  @IsOptional()
  luApplicationGroups?: Array<LuApplicationGroup>;

  @ApiProperty({
    required: false,
    type: () => [LuApplicationProgram],
  })
  @ValidateNested()
  @Type(() => LuApplicationProgram)
  @IsOptional()
  luApplicationPrograms?: Array<LuApplicationProgram>;

  @ApiProperty({
    required: false,
    type: () => LuApplicationStartSemester,
  })
  @ValidateNested()
  @Type(() => LuApplicationStartSemester)
  @IsOptional()
  luApplicationStartSemester?: LuApplicationStartSemester | null;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  mastersReviewWaiver!: boolean;

  @ApiProperty({
    required: false,
    type: () => [MhciPrereq],
  })
  @ValidateNested()
  @Type(() => MhciPrereq)
  @IsOptional()
  mhciPrereqs?: Array<MhciPrereq>;

  @ApiProperty({
    required: false,
    type: () => [MhciPrereqsCourse],
  })
  @ValidateNested()
  @Type(() => MhciPrereqsCourse)
  @IsOptional()
  mhciPrereqsCourses?: Array<MhciPrereqsCourse>;

  @ApiProperty({
    required: false,
    type: () => [MlArea],
  })
  @ValidateNested()
  @Type(() => MlArea)
  @IsOptional()
  mlArea?: Array<MlArea>;

  @ApiProperty({
    required: false,
    type: () => [MlSupportingCoursework],
  })
  @ValidateNested()
  @Type(() => MlSupportingCoursework)
  @IsOptional()
  mlSupportingCoursework?: Array<MlSupportingCoursework>;

  @ApiProperty({
    required: false,
    type: () => [MseAqa],
  })
  @ValidateNested()
  @Type(() => MseAqa)
  @IsOptional()
  mseAqa?: Array<MseAqa>;

  @ApiProperty({
    required: false,
    type: () => MseCodility,
  })
  @ValidateNested()
  @Type(() => MseCodility)
  @IsOptional()
  mseCodility?: MseCodility | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  notificationsent!: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  otherInst!: string | null;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  paid!: boolean;

  @ApiProperty({
    required: false,
    type: () => [Payment],
  })
  @ValidateNested()
  @Type(() => Payment)
  @IsOptional()
  payment?: Array<Payment>;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  paymentamount!: Decimal | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  paymentdate!: Date | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  paymenttype!: number | null;

  @ApiProperty({
    required: false,
    type: () => [PeriodApplication],
  })
  @ValidateNested()
  @Type(() => PeriodApplication)
  @IsOptional()
  periodApplication?: Array<PeriodApplication>;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  pier!: boolean;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  portfolioLink!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  portfolioPassword!: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  portfoliosubmitted!: boolean | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  previousCoursework!: number | null;

  @ApiProperty({
    required: false,
    type: () => [PromotionHistory],
  })
  @ValidateNested()
  @Type(() => PromotionHistory)
  @IsOptional()
  promotionHistory?: Array<PromotionHistory>;

  @ApiProperty({
    required: false,
    type: () => [Publication],
  })
  @ValidateNested()
  @Type(() => Publication)
  @IsOptional()
  publication?: Array<Publication>;

  @ApiProperty({
    required: false,
    type: () => [Recommend],
  })
  @ValidateNested()
  @Type(() => Recommend)
  @IsOptional()
  recommend?: Array<Recommend>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  recordsPermission!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  recruitingEvent!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  referralToProgram!: string | null;

  @ApiProperty({
    required: false,
    type: () => [RegistrationFeePayment],
  })
  @ValidateNested()
  @Type(() => RegistrationFeePayment)
  @IsOptional()
  registrationFeePayment?: Array<RegistrationFeePayment>;

  @ApiProperty({
    required: false,
    type: () => [RegistrationFeeStatus],
  })
  @ValidateNested()
  @Type(() => RegistrationFeeStatus)
  @IsOptional()
  registrationFeeStatus?: Array<RegistrationFeeStatus>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  rejectionSent!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Review],
  })
  @ValidateNested()
  @Type(() => Review)
  @IsOptional()
  review?: Array<Review>;

  @ApiProperty({
    required: false,
    type: () => [RissFunding],
  })
  @ValidateNested()
  @Type(() => RissFunding)
  @IsOptional()
  rissFunding?: Array<RissFunding>;

  @ApiProperty({
    required: false,
    type: () => [RissMcnair],
  })
  @ValidateNested()
  @Type(() => RissMcnair)
  @IsOptional()
  rissMcnair?: Array<RissMcnair>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  round2!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  round3!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  sentToProgram!: string;

  @ApiProperty({
    required: false,
    type: () => [SpecialConsideration],
  })
  @ValidateNested()
  @Type(() => SpecialConsideration)
  @IsOptional()
  specialConsideration?: Array<SpecialConsideration>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  statementofpurpose!: string | null;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  studentCommit!: boolean;

  @ApiProperty({
    required: false,
    type: () => [StudentDecision],
  })
  @ValidateNested()
  @Type(() => StudentDecision)
  @IsOptional()
  studentDecision?: Array<StudentDecision>;

  @ApiProperty({
    required: false,
    type: () => [StudentDecisionHistory],
  })
  @ValidateNested()
  @Type(() => StudentDecisionHistory)
  @IsOptional()
  studentDecisionHistory?: Array<StudentDecisionHistory>;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  submitted!: boolean;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  submittedDate!: Date | null;

  @ApiProperty({
    required: false,
    type: () => [TagMember],
  })
  @ValidateNested()
  @Type(() => TagMember)
  @IsOptional()
  tagMembers?: Array<TagMember>;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  userId!: number;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  waitlistSent!: string | null;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  waive!: boolean;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  waivedate!: Date | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  waiveHigherFee!: number;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  waiveToefl!: number | null;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  womenfellowship!: boolean;
}

export { Application as Application };
