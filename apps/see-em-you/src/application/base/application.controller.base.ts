/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ApplicationService } from "../application.service";
import { ApplicationCreateInput } from "./ApplicationCreateInput";
import { Application } from "./Application";
import { ApplicationFindManyArgs } from "./ApplicationFindManyArgs";
import { ApplicationWhereUniqueInput } from "./ApplicationWhereUniqueInput";
import { ApplicationUpdateInput } from "./ApplicationUpdateInput";
import { ApplicationAdminNoteFindManyArgs } from "../../applicationAdminNote/base/ApplicationAdminNoteFindManyArgs";
import { ApplicationAdminNote } from "../../applicationAdminNote/base/ApplicationAdminNote";
import { ApplicationAdminNoteWhereUniqueInput } from "../../applicationAdminNote/base/ApplicationAdminNoteWhereUniqueInput";
import { AttendanceFindManyArgs } from "../../attendance/base/AttendanceFindManyArgs";
import { Attendance } from "../../attendance/base/Attendance";
import { AttendanceWhereUniqueInput } from "../../attendance/base/AttendanceWhereUniqueInput";
import { CashnetPaymentFindManyArgs } from "../../cashnetPayment/base/CashnetPaymentFindManyArgs";
import { CashnetPayment } from "../../cashnetPayment/base/CashnetPayment";
import { CashnetPaymentWhereUniqueInput } from "../../cashnetPayment/base/CashnetPaymentWhereUniqueInput";
import { ExperienceFindManyArgs } from "../../experience/base/ExperienceFindManyArgs";
import { Experience } from "../../experience/base/Experience";
import { ExperienceWhereUniqueInput } from "../../experience/base/ExperienceWhereUniqueInput";
import { FellowshipFindManyArgs } from "../../fellowship/base/FellowshipFindManyArgs";
import { Fellowship } from "../../fellowship/base/Fellowship";
import { FellowshipWhereUniqueInput } from "../../fellowship/base/FellowshipWhereUniqueInput";
import { GmatscoreFindManyArgs } from "../../gmatscore/base/GmatscoreFindManyArgs";
import { Gmatscore } from "../../gmatscore/base/Gmatscore";
import { GmatscoreWhereUniqueInput } from "../../gmatscore/base/GmatscoreWhereUniqueInput";
import { GresubjectscoreFindManyArgs } from "../../gresubjectscore/base/GresubjectscoreFindManyArgs";
import { Gresubjectscore } from "../../gresubjectscore/base/Gresubjectscore";
import { GresubjectscoreWhereUniqueInput } from "../../gresubjectscore/base/GresubjectscoreWhereUniqueInput";
import { IeltsscoreFindManyArgs } from "../../ieltsscore/base/IeltsscoreFindManyArgs";
import { Ieltsscore } from "../../ieltsscore/base/Ieltsscore";
import { IeltsscoreWhereUniqueInput } from "../../ieltsscore/base/IeltsscoreWhereUniqueInput";
import { LuApplicationAdvisorFindManyArgs } from "../../luApplicationAdvisor/base/LuApplicationAdvisorFindManyArgs";
import { LuApplicationAdvisor } from "../../luApplicationAdvisor/base/LuApplicationAdvisor";
import { LuApplicationAdvisorWhereUniqueInput } from "../../luApplicationAdvisor/base/LuApplicationAdvisorWhereUniqueInput";
import { LuApplicationAppreqFindManyArgs } from "../../luApplicationAppreq/base/LuApplicationAppreqFindManyArgs";
import { LuApplicationAppreq } from "../../luApplicationAppreq/base/LuApplicationAppreq";
import { LuApplicationAppreqWhereUniqueInput } from "../../luApplicationAppreq/base/LuApplicationAppreqWhereUniqueInput";
import { LuApplicationGroupFindManyArgs } from "../../luApplicationGroup/base/LuApplicationGroupFindManyArgs";
import { LuApplicationGroup } from "../../luApplicationGroup/base/LuApplicationGroup";
import { LuApplicationGroupWhereUniqueInput } from "../../luApplicationGroup/base/LuApplicationGroupWhereUniqueInput";
import { LuApplicationProgramFindManyArgs } from "../../luApplicationProgram/base/LuApplicationProgramFindManyArgs";
import { LuApplicationProgram } from "../../luApplicationProgram/base/LuApplicationProgram";
import { LuApplicationProgramWhereUniqueInput } from "../../luApplicationProgram/base/LuApplicationProgramWhereUniqueInput";
import { MhciPrereqFindManyArgs } from "../../mhciPrereq/base/MhciPrereqFindManyArgs";
import { MhciPrereq } from "../../mhciPrereq/base/MhciPrereq";
import { MhciPrereqWhereUniqueInput } from "../../mhciPrereq/base/MhciPrereqWhereUniqueInput";
import { MhciPrereqsCourseFindManyArgs } from "../../mhciPrereqsCourse/base/MhciPrereqsCourseFindManyArgs";
import { MhciPrereqsCourse } from "../../mhciPrereqsCourse/base/MhciPrereqsCourse";
import { MhciPrereqsCourseWhereUniqueInput } from "../../mhciPrereqsCourse/base/MhciPrereqsCourseWhereUniqueInput";
import { MlAreaFindManyArgs } from "../../mlArea/base/MlAreaFindManyArgs";
import { MlArea } from "../../mlArea/base/MlArea";
import { MlAreaWhereUniqueInput } from "../../mlArea/base/MlAreaWhereUniqueInput";
import { MlSupportingCourseworkFindManyArgs } from "../../mlSupportingCoursework/base/MlSupportingCourseworkFindManyArgs";
import { MlSupportingCoursework } from "../../mlSupportingCoursework/base/MlSupportingCoursework";
import { MlSupportingCourseworkWhereUniqueInput } from "../../mlSupportingCoursework/base/MlSupportingCourseworkWhereUniqueInput";
import { MseAqaFindManyArgs } from "../../mseAqa/base/MseAqaFindManyArgs";
import { MseAqa } from "../../mseAqa/base/MseAqa";
import { MseAqaWhereUniqueInput } from "../../mseAqa/base/MseAqaWhereUniqueInput";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { PaymentWhereUniqueInput } from "../../payment/base/PaymentWhereUniqueInput";
import { PeriodApplicationFindManyArgs } from "../../periodApplication/base/PeriodApplicationFindManyArgs";
import { PeriodApplication } from "../../periodApplication/base/PeriodApplication";
import { PeriodApplicationWhereUniqueInput } from "../../periodApplication/base/PeriodApplicationWhereUniqueInput";
import { PromotionHistoryFindManyArgs } from "../../promotionHistory/base/PromotionHistoryFindManyArgs";
import { PromotionHistory } from "../../promotionHistory/base/PromotionHistory";
import { PromotionHistoryWhereUniqueInput } from "../../promotionHistory/base/PromotionHistoryWhereUniqueInput";
import { PublicationFindManyArgs } from "../../publication/base/PublicationFindManyArgs";
import { Publication } from "../../publication/base/Publication";
import { PublicationWhereUniqueInput } from "../../publication/base/PublicationWhereUniqueInput";
import { RecommendFindManyArgs } from "../../recommend/base/RecommendFindManyArgs";
import { Recommend } from "../../recommend/base/Recommend";
import { RecommendWhereUniqueInput } from "../../recommend/base/RecommendWhereUniqueInput";
import { RegistrationFeePaymentFindManyArgs } from "../../registrationFeePayment/base/RegistrationFeePaymentFindManyArgs";
import { RegistrationFeePayment } from "../../registrationFeePayment/base/RegistrationFeePayment";
import { RegistrationFeePaymentWhereUniqueInput } from "../../registrationFeePayment/base/RegistrationFeePaymentWhereUniqueInput";
import { RegistrationFeeStatusFindManyArgs } from "../../registrationFeeStatus/base/RegistrationFeeStatusFindManyArgs";
import { RegistrationFeeStatus } from "../../registrationFeeStatus/base/RegistrationFeeStatus";
import { RegistrationFeeStatusWhereUniqueInput } from "../../registrationFeeStatus/base/RegistrationFeeStatusWhereUniqueInput";
import { ReviewFindManyArgs } from "../../review/base/ReviewFindManyArgs";
import { Review } from "../../review/base/Review";
import { ReviewWhereUniqueInput } from "../../review/base/ReviewWhereUniqueInput";
import { RissFundingFindManyArgs } from "../../rissFunding/base/RissFundingFindManyArgs";
import { RissFunding } from "../../rissFunding/base/RissFunding";
import { RissFundingWhereUniqueInput } from "../../rissFunding/base/RissFundingWhereUniqueInput";
import { RissMcnairFindManyArgs } from "../../rissMcnair/base/RissMcnairFindManyArgs";
import { RissMcnair } from "../../rissMcnair/base/RissMcnair";
import { RissMcnairWhereUniqueInput } from "../../rissMcnair/base/RissMcnairWhereUniqueInput";
import { SpecialConsiderationFindManyArgs } from "../../specialConsideration/base/SpecialConsiderationFindManyArgs";
import { SpecialConsideration } from "../../specialConsideration/base/SpecialConsideration";
import { SpecialConsiderationWhereUniqueInput } from "../../specialConsideration/base/SpecialConsiderationWhereUniqueInput";
import { StudentDecisionFindManyArgs } from "../../studentDecision/base/StudentDecisionFindManyArgs";
import { StudentDecision } from "../../studentDecision/base/StudentDecision";
import { StudentDecisionWhereUniqueInput } from "../../studentDecision/base/StudentDecisionWhereUniqueInput";
import { StudentDecisionHistoryFindManyArgs } from "../../studentDecisionHistory/base/StudentDecisionHistoryFindManyArgs";
import { StudentDecisionHistory } from "../../studentDecisionHistory/base/StudentDecisionHistory";
import { StudentDecisionHistoryWhereUniqueInput } from "../../studentDecisionHistory/base/StudentDecisionHistoryWhereUniqueInput";
import { TagMemberFindManyArgs } from "../../tagMember/base/TagMemberFindManyArgs";
import { TagMember } from "../../tagMember/base/TagMember";
import { TagMemberWhereUniqueInput } from "../../tagMember/base/TagMemberWhereUniqueInput";

export class ApplicationControllerBase {
  constructor(protected readonly service: ApplicationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Application })
  async createApplication(
    @common.Body() data: ApplicationCreateInput
  ): Promise<Application> {
    return await this.service.createApplication({
      data: {
        ...data,

        acoPal: data.acoPal
          ? {
              connect: data.acoPal,
            }
          : undefined,

        luApplicationCohort: data.luApplicationCohort
          ? {
              connect: data.luApplicationCohort,
            }
          : undefined,

        luApplicationStartSemester: data.luApplicationStartSemester
          ? {
              connect: data.luApplicationStartSemester,
            }
          : undefined,

        mseCodility: data.mseCodility
          ? {
              connect: data.mseCodility,
            }
          : undefined,
      },
      select: {
        userId: true,
        name: true,
        submittedDate: true,
        submitted: true,
        createdDate: true,
        paid: true,
        paymentdate: true,
        paymentamount: true,
        paymenttype: true,
        waive: true,
        waivedate: true,
        complete: true,
        statementofpurpose: true,
        notificationsent: true,
        studentCommit: true,
        cups: true,
        womenfellowship: true,
        pier: true,
        cnbc: true,
        portfoliosubmitted: true,
        portfolioLink: true,
        portfolioPassword: true,
        area1: true,
        area2: true,
        area3: true,
        buckleywaive: true,
        referralToProgram: true,
        recruitingEvent: true,
        otherInst: true,
        crossDeptProgs: true,
        crossDeptProgsOther: true,
        recordsPermission: true,
        mastersReviewWaiver: true,
        sentToProgram: true,
        curEnrolled: true,
        honors: true,
        round2: true,
        round3: true,
        rejectionSent: true,
        waitlistSent: true,
        previousCoursework: true,
        hide: true,
        waiveHigherFee: true,
        invitationEmailSent: true,
        waiveToefl: true,

        acoPal: {
          select: {
            id: true,
          },
        },

        luApplicationCohort: {
          select: {
            id: true,
          },
        },

        luApplicationStartSemester: {
          select: {
            id: true,
          },
        },

        mseCodility: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Application] })
  @ApiNestedQuery(ApplicationFindManyArgs)
  async applications(@common.Req() request: Request): Promise<Application[]> {
    const args = plainToClass(ApplicationFindManyArgs, request.query);
    return this.service.applications({
      ...args,
      select: {
        userId: true,
        name: true,
        submittedDate: true,
        submitted: true,
        createdDate: true,
        paid: true,
        paymentdate: true,
        paymentamount: true,
        paymenttype: true,
        waive: true,
        waivedate: true,
        complete: true,
        statementofpurpose: true,
        notificationsent: true,
        studentCommit: true,
        cups: true,
        womenfellowship: true,
        pier: true,
        cnbc: true,
        portfoliosubmitted: true,
        portfolioLink: true,
        portfolioPassword: true,
        area1: true,
        area2: true,
        area3: true,
        buckleywaive: true,
        referralToProgram: true,
        recruitingEvent: true,
        otherInst: true,
        crossDeptProgs: true,
        crossDeptProgsOther: true,
        recordsPermission: true,
        mastersReviewWaiver: true,
        sentToProgram: true,
        curEnrolled: true,
        honors: true,
        round2: true,
        round3: true,
        rejectionSent: true,
        waitlistSent: true,
        previousCoursework: true,
        hide: true,
        waiveHigherFee: true,
        invitationEmailSent: true,
        waiveToefl: true,

        acoPal: {
          select: {
            id: true,
          },
        },

        luApplicationCohort: {
          select: {
            id: true,
          },
        },

        luApplicationStartSemester: {
          select: {
            id: true,
          },
        },

        mseCodility: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Application })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async application(
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<Application | null> {
    const result = await this.service.application({
      where: params,
      select: {
        userId: true,
        name: true,
        submittedDate: true,
        submitted: true,
        createdDate: true,
        paid: true,
        paymentdate: true,
        paymentamount: true,
        paymenttype: true,
        waive: true,
        waivedate: true,
        complete: true,
        statementofpurpose: true,
        notificationsent: true,
        studentCommit: true,
        cups: true,
        womenfellowship: true,
        pier: true,
        cnbc: true,
        portfoliosubmitted: true,
        portfolioLink: true,
        portfolioPassword: true,
        area1: true,
        area2: true,
        area3: true,
        buckleywaive: true,
        referralToProgram: true,
        recruitingEvent: true,
        otherInst: true,
        crossDeptProgs: true,
        crossDeptProgsOther: true,
        recordsPermission: true,
        mastersReviewWaiver: true,
        sentToProgram: true,
        curEnrolled: true,
        honors: true,
        round2: true,
        round3: true,
        rejectionSent: true,
        waitlistSent: true,
        previousCoursework: true,
        hide: true,
        waiveHigherFee: true,
        invitationEmailSent: true,
        waiveToefl: true,

        acoPal: {
          select: {
            id: true,
          },
        },

        luApplicationCohort: {
          select: {
            id: true,
          },
        },

        luApplicationStartSemester: {
          select: {
            id: true,
          },
        },

        mseCodility: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Application })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateApplication(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() data: ApplicationUpdateInput
  ): Promise<Application | null> {
    try {
      return await this.service.updateApplication({
        where: params,
        data: {
          ...data,

          acoPal: data.acoPal
            ? {
                connect: data.acoPal,
              }
            : undefined,

          luApplicationCohort: data.luApplicationCohort
            ? {
                connect: data.luApplicationCohort,
              }
            : undefined,

          luApplicationStartSemester: data.luApplicationStartSemester
            ? {
                connect: data.luApplicationStartSemester,
              }
            : undefined,

          mseCodility: data.mseCodility
            ? {
                connect: data.mseCodility,
              }
            : undefined,
        },
        select: {
          userId: true,
          name: true,
          submittedDate: true,
          submitted: true,
          createdDate: true,
          paid: true,
          paymentdate: true,
          paymentamount: true,
          paymenttype: true,
          waive: true,
          waivedate: true,
          complete: true,
          statementofpurpose: true,
          notificationsent: true,
          studentCommit: true,
          cups: true,
          womenfellowship: true,
          pier: true,
          cnbc: true,
          portfoliosubmitted: true,
          portfolioLink: true,
          portfolioPassword: true,
          area1: true,
          area2: true,
          area3: true,
          buckleywaive: true,
          referralToProgram: true,
          recruitingEvent: true,
          otherInst: true,
          crossDeptProgs: true,
          crossDeptProgsOther: true,
          recordsPermission: true,
          mastersReviewWaiver: true,
          sentToProgram: true,
          curEnrolled: true,
          honors: true,
          round2: true,
          round3: true,
          rejectionSent: true,
          waitlistSent: true,
          previousCoursework: true,
          hide: true,
          waiveHigherFee: true,
          invitationEmailSent: true,
          waiveToefl: true,

          acoPal: {
            select: {
              id: true,
            },
          },

          luApplicationCohort: {
            select: {
              id: true,
            },
          },

          luApplicationStartSemester: {
            select: {
              id: true,
            },
          },

          mseCodility: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Application })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteApplication(
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<Application | null> {
    try {
      return await this.service.deleteApplication({
        where: params,
        select: {
          userId: true,
          name: true,
          submittedDate: true,
          submitted: true,
          createdDate: true,
          paid: true,
          paymentdate: true,
          paymentamount: true,
          paymenttype: true,
          waive: true,
          waivedate: true,
          complete: true,
          statementofpurpose: true,
          notificationsent: true,
          studentCommit: true,
          cups: true,
          womenfellowship: true,
          pier: true,
          cnbc: true,
          portfoliosubmitted: true,
          portfolioLink: true,
          portfolioPassword: true,
          area1: true,
          area2: true,
          area3: true,
          buckleywaive: true,
          referralToProgram: true,
          recruitingEvent: true,
          otherInst: true,
          crossDeptProgs: true,
          crossDeptProgsOther: true,
          recordsPermission: true,
          mastersReviewWaiver: true,
          sentToProgram: true,
          curEnrolled: true,
          honors: true,
          round2: true,
          round3: true,
          rejectionSent: true,
          waitlistSent: true,
          previousCoursework: true,
          hide: true,
          waiveHigherFee: true,
          invitationEmailSent: true,
          waiveToefl: true,

          acoPal: {
            select: {
              id: true,
            },
          },

          luApplicationCohort: {
            select: {
              id: true,
            },
          },

          luApplicationStartSemester: {
            select: {
              id: true,
            },
          },

          mseCodility: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/applicationAdminNote")
  @ApiNestedQuery(ApplicationAdminNoteFindManyArgs)
  async findApplicationAdminNote(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<ApplicationAdminNote[]> {
    const query = plainToClass(ApplicationAdminNoteFindManyArgs, request.query);
    const results = await this.service.findApplicationAdminNote(params.id, {
      ...query,
      select: {
        insertTime: true,
        note: true,

        application: {
          select: {
            id: true,
          },
        },

        users: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/applicationAdminNote")
  async connectApplicationAdminNote(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ApplicationAdminNoteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicationAdminNote: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/applicationAdminNote")
  async updateApplicationAdminNote(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ApplicationAdminNoteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicationAdminNote: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/applicationAdminNote")
  async disconnectApplicationAdminNote(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ApplicationAdminNoteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicationAdminNote: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/attendance")
  @ApiNestedQuery(AttendanceFindManyArgs)
  async findAttendance(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<Attendance[]> {
    const query = plainToClass(AttendanceFindManyArgs, request.query);
    const results = await this.service.findAttendance(params.id, {
      ...query,
      select: {
        status: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/attendance")
  async connectAttendance(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: AttendanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attendance: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/attendance")
  async updateAttendance(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: AttendanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attendance: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/attendance")
  async disconnectAttendance(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: AttendanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attendance: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/cashnetPayment")
  @ApiNestedQuery(CashnetPaymentFindManyArgs)
  async findCashnetPayment(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<CashnetPayment[]> {
    const query = plainToClass(CashnetPaymentFindManyArgs, request.query);
    const results = await this.service.findCashnetPayment(params.id, {
      ...query,
      select: {
        transactionId: true,
        applicantName: true,
        applicantEmail: true,
        merchant: true,
        status: true,
        transactionTime: true,
        transactionType: true,
        amount: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/cashnetPayment")
  async connectCashnetPayment(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: CashnetPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cashnetPayment: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/cashnetPayment")
  async updateCashnetPayment(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: CashnetPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cashnetPayment: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/cashnetPayment")
  async disconnectCashnetPayment(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: CashnetPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cashnetPayment: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/experience")
  @ApiNestedQuery(ExperienceFindManyArgs)
  async findExperience(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<Experience[]> {
    const query = plainToClass(ExperienceFindManyArgs, request.query);
    const results = await this.service.findExperience(params.id, {
      ...query,
      select: {
        datafileId: true,
        experiencetype: true,
        orderEntered: true,
        company: true,
        startDate: true,
        endDate: true,
        yearsExp: true,
        address: true,
        jobTitle: true,
        jobDescription: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/experience")
  async connectExperience(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ExperienceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      experience: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/experience")
  async updateExperience(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ExperienceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      experience: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/experience")
  async disconnectExperience(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ExperienceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      experience: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/fellowships")
  @ApiNestedQuery(FellowshipFindManyArgs)
  async findFellowships(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<Fellowship[]> {
    const query = plainToClass(FellowshipFindManyArgs, request.query);
    const results = await this.service.findFellowships(params.id, {
      ...query,
      select: {
        name: true,
        amount: true,
        status: true,
        appliedDate: true,
        awardDate: true,
        duration: true,
        datafileId: true,
        short: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/fellowships")
  async connectFellowships(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: FellowshipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fellowships: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/fellowships")
  async updateFellowships(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: FellowshipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fellowships: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/fellowships")
  async disconnectFellowships(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: FellowshipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fellowships: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/gmatscore")
  @ApiNestedQuery(GmatscoreFindManyArgs)
  async findGmatscore(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<Gmatscore[]> {
    const query = plainToClass(GmatscoreFindManyArgs, request.query);
    const results = await this.service.findGmatscore(params.id, {
      ...query,
      select: {
        scorereceived: true,
        testdate: true,
        verbalscore: true,
        verbalpercentile: true,
        quantitativescore: true,
        quantitativepercentile: true,
        totalscore: true,
        totalpercentile: true,
        analyticalwritingscore: true,
        analyticalwritingpercentile: true,
        datafileId: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/gmatscore")
  async connectGmatscore(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: GmatscoreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gmatscore: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/gmatscore")
  async updateGmatscore(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: GmatscoreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gmatscore: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/gmatscore")
  async disconnectGmatscore(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: GmatscoreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gmatscore: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/gresubjectscore")
  @ApiNestedQuery(GresubjectscoreFindManyArgs)
  async findGresubjectscore(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<Gresubjectscore[]> {
    const query = plainToClass(GresubjectscoreFindManyArgs, request.query);
    const results = await this.service.findGresubjectscore(params.id, {
      ...query,
      select: {
        testdate: true,
        name: true,
        score: true,
        percentile: true,
        datafileId: true,
        greSubEmail: true,
        scorereceived: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/gresubjectscore")
  async connectGresubjectscore(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: GresubjectscoreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gresubjectscore: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/gresubjectscore")
  async updateGresubjectscore(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: GresubjectscoreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gresubjectscore: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/gresubjectscore")
  async disconnectGresubjectscore(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: GresubjectscoreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gresubjectscore: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/ieltsscore")
  @ApiNestedQuery(IeltsscoreFindManyArgs)
  async findIeltsscore(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<Ieltsscore[]> {
    const query = plainToClass(IeltsscoreFindManyArgs, request.query);
    const results = await this.service.findIeltsscore(params.id, {
      ...query,
      select: {
        testdate: true,
        listeningscore: true,
        readingscore: true,
        writingscore: true,
        speakingscore: true,
        overallscore: true,
        scorereceived: true,
        datafileId: true,
        testEmail: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ieltsscore")
  async connectIeltsscore(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: IeltsscoreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ieltsscore: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ieltsscore")
  async updateIeltsscore(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: IeltsscoreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ieltsscore: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ieltsscore")
  async disconnectIeltsscore(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: IeltsscoreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ieltsscore: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/luApplicationAdvisor")
  @ApiNestedQuery(LuApplicationAdvisorFindManyArgs)
  async findLuApplicationAdvisor(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<LuApplicationAdvisor[]> {
    const query = plainToClass(LuApplicationAdvisorFindManyArgs, request.query);
    const results = await this.service.findLuApplicationAdvisor(params.id, {
      ...query,
      select: {
        advisorUserId: true,
        advisorType: true,
        name: true,
        programId: true,
        choice: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/luApplicationAdvisor")
  async connectLuApplicationAdvisor(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: LuApplicationAdvisorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      luApplicationAdvisor: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/luApplicationAdvisor")
  async updateLuApplicationAdvisor(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: LuApplicationAdvisorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      luApplicationAdvisor: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/luApplicationAdvisor")
  async disconnectLuApplicationAdvisor(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: LuApplicationAdvisorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      luApplicationAdvisor: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/luApplicationAppreqs")
  @ApiNestedQuery(LuApplicationAppreqFindManyArgs)
  async findLuApplicationAppreqs(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<LuApplicationAppreq[]> {
    const query = plainToClass(LuApplicationAppreqFindManyArgs, request.query);
    const results = await this.service.findLuApplicationAppreqs(params.id, {
      ...query,
      select: {
        reqId: true,
        lastModified: true,
        completed: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/luApplicationAppreqs")
  async connectLuApplicationAppreqs(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: LuApplicationAppreqWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      luApplicationAppreqs: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/luApplicationAppreqs")
  async updateLuApplicationAppreqs(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: LuApplicationAppreqWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      luApplicationAppreqs: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/luApplicationAppreqs")
  async disconnectLuApplicationAppreqs(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: LuApplicationAppreqWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      luApplicationAppreqs: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/luApplicationGroups")
  @ApiNestedQuery(LuApplicationGroupFindManyArgs)
  async findLuApplicationGroups(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<LuApplicationGroup[]> {
    const query = plainToClass(LuApplicationGroupFindManyArgs, request.query);
    const results = await this.service.findLuApplicationGroups(params.id, {
      ...query,
      select: {
        groupId: true,
        round: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/luApplicationGroups")
  async connectLuApplicationGroups(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: LuApplicationGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      luApplicationGroups: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/luApplicationGroups")
  async updateLuApplicationGroups(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: LuApplicationGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      luApplicationGroups: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/luApplicationGroups")
  async disconnectLuApplicationGroups(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: LuApplicationGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      luApplicationGroups: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/luApplicationPrograms")
  @ApiNestedQuery(LuApplicationProgramFindManyArgs)
  async findLuApplicationPrograms(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<LuApplicationProgram[]> {
    const query = plainToClass(LuApplicationProgramFindManyArgs, request.query);
    const results = await this.service.findLuApplicationPrograms(params.id, {
      ...query,
      select: {
        choice: true,
        round2: true,
        decision: true,
        admissionStatus: true,
        admit: true,
        admitComments: true,
        faccontact: true,
        stucontact: true,
        scholarshipAmt: true,
        scholarshipComments: true,
        ltichoice: true,
        msecertchoice: true,

        application: {
          select: {
            id: true,
          },
        },

        programs: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/luApplicationPrograms")
  async connectLuApplicationPrograms(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: LuApplicationProgramWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      luApplicationPrograms: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/luApplicationPrograms")
  async updateLuApplicationPrograms(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: LuApplicationProgramWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      luApplicationPrograms: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/luApplicationPrograms")
  async disconnectLuApplicationPrograms(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: LuApplicationProgramWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      luApplicationPrograms: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/mhciPrereqs")
  @ApiNestedQuery(MhciPrereqFindManyArgs)
  async findMhciPrereqs(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<MhciPrereq[]> {
    const query = plainToClass(MhciPrereqFindManyArgs, request.query);
    const results = await this.service.findMhciPrereqs(params.id, {
      ...query,
      select: {
        studentLuUsersUsertypesId: true,
        prereq_type: true,
        periodId: true,
        student_assessment: true,
        status2: true,
        timestamp: true,

        application: {
          select: {
            id: true,
          },
        },

        mhciPrereqsStatus: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/mhciPrereqs")
  async connectMhciPrereqs(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: MhciPrereqWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mhciPrereqs: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/mhciPrereqs")
  async updateMhciPrereqs(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: MhciPrereqWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mhciPrereqs: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/mhciPrereqs")
  async disconnectMhciPrereqs(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: MhciPrereqWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mhciPrereqs: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/mhciPrereqsCourses")
  @ApiNestedQuery(MhciPrereqsCourseFindManyArgs)
  async findMhciPrereqsCourses(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<MhciPrereqsCourse[]> {
    const query = plainToClass(MhciPrereqsCourseFindManyArgs, request.query);
    const results = await this.service.findMhciPrereqsCourses(params.id, {
      ...query,
      select: {
        course_type: true,
        studentCourseName: true,
        studentCourseTime: true,
        studentCourseInstitution: true,
        studentCourseGrade: true,
        submittedToReviewer: true,
        periodId: true,
        programId: true,

        application: {
          select: {
            id: true,
          },
        },

        luUsersUsertypes: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/mhciPrereqsCourses")
  async connectMhciPrereqsCourses(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: MhciPrereqsCourseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mhciPrereqsCourses: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/mhciPrereqsCourses")
  async updateMhciPrereqsCourses(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: MhciPrereqsCourseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mhciPrereqsCourses: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/mhciPrereqsCourses")
  async disconnectMhciPrereqsCourses(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: MhciPrereqsCourseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mhciPrereqsCourses: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/mlArea")
  @ApiNestedQuery(MlAreaFindManyArgs)
  async findMlArea(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<MlArea[]> {
    const query = plainToClass(MlAreaFindManyArgs, request.query);
    const results = await this.service.findMlArea(params.id, {
      ...query,
      select: {
        area: true,

        application: {
          select: {
            id: true,
          },
        },

        programs: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/mlArea")
  async connectMlArea(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: MlAreaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mlArea: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/mlArea")
  async updateMlArea(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: MlAreaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mlArea: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/mlArea")
  async disconnectMlArea(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: MlAreaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mlArea: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/mlSupportingCoursework")
  @ApiNestedQuery(MlSupportingCourseworkFindManyArgs)
  async findMlSupportingCoursework(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<MlSupportingCoursework[]> {
    const query = plainToClass(
      MlSupportingCourseworkFindManyArgs,
      request.query
    );
    const results = await this.service.findMlSupportingCoursework(params.id, {
      ...query,
      select: {
        introCourseNum: true,
        introCourseSemester: true,
        introCourseGrade: true,
        introCourse2Num: true,
        introCourse2Semester: true,
        introCourse2Grade: true,
        ml1CourseNum: true,
        ml1CourseSemester: true,
        ml1CourseGrade: true,
        ml2CourseNum: true,
        ml2CourseSemester: true,
        ml2CourseGrade: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/mlSupportingCoursework")
  async connectMlSupportingCoursework(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: MlSupportingCourseworkWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mlSupportingCoursework: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/mlSupportingCoursework")
  async updateMlSupportingCoursework(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: MlSupportingCourseworkWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mlSupportingCoursework: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/mlSupportingCoursework")
  async disconnectMlSupportingCoursework(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: MlSupportingCourseworkWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mlSupportingCoursework: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/mseAqa")
  @ApiNestedQuery(MseAqaFindManyArgs)
  async findMseAqa(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<MseAqa[]> {
    const query = plainToClass(MseAqaFindManyArgs, request.query);
    const results = await this.service.findMseAqa(params.id, {
      ...query,
      select: {
        reviewerId: true,
        englishComments: true,
        programmingComments: true,
        foundationalComments: true,
        maturityComments: true,
        understandingComments: true,
        experienceComments: true,
        englishRating: true,
        programmingRating: true,
        foundationalRating: true,
        maturityRating: true,
        understandingRating: true,
        experienceRating: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/mseAqa")
  async connectMseAqa(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: MseAqaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mseAqa: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/mseAqa")
  async updateMseAqa(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: MseAqaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mseAqa: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/mseAqa")
  async disconnectMseAqa(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: MseAqaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mseAqa: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/payment")
  @ApiNestedQuery(PaymentFindManyArgs)
  async findPayment(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<Payment[]> {
    const query = plainToClass(PaymentFindManyArgs, request.query);
    const results = await this.service.findPayment(params.id, {
      ...query,
      select: {
        paymentId: true,
        paymentType: true,
        paymentAmount: true,
        paymentIntentDate: true,
        payment_status: true,
        lastModTime: true,
        lastModUserId: true,

        application: {
          select: {
            id: true,
          },
        },

        paymentVoucher: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/payment")
  async connectPayment(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payment: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/payment")
  async updatePayment(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payment: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/payment")
  async disconnectPayment(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payment: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/periodApplication")
  @ApiNestedQuery(PeriodApplicationFindManyArgs)
  async findPeriodApplication(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<PeriodApplication[]> {
    const query = plainToClass(PeriodApplicationFindManyArgs, request.query);
    const results = await this.service.findPeriodApplication(params.id, {
      ...query,
      select: {
        application: {
          select: {
            id: true,
          },
        },

        period: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/periodApplication")
  async connectPeriodApplication(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: PeriodApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      periodApplication: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/periodApplication")
  async updatePeriodApplication(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: PeriodApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      periodApplication: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/periodApplication")
  async disconnectPeriodApplication(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: PeriodApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      periodApplication: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/promotionHistory")
  @ApiNestedQuery(PromotionHistoryFindManyArgs)
  async findPromotionHistory(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<PromotionHistory[]> {
    const query = plainToClass(PromotionHistoryFindManyArgs, request.query);
    const results = await this.service.findPromotionHistory(params.id, {
      ...query,
      select: {
        programId: true,
        statusTime: true,
        round: true,
        promotion_method: true,
        usersId: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/promotionHistory")
  async connectPromotionHistory(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: PromotionHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      promotionHistory: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/promotionHistory")
  async updatePromotionHistory(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: PromotionHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      promotionHistory: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/promotionHistory")
  async disconnectPromotionHistory(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: PromotionHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      promotionHistory: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/publication")
  @ApiNestedQuery(PublicationFindManyArgs)
  async findPublication(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<Publication[]> {
    const query = plainToClass(PublicationFindManyArgs, request.query);
    const results = await this.service.findPublication(params.id, {
      ...query,
      select: {
        title: true,
        author: true,
        forum: true,
        citation: true,
        url: true,
        status: true,
        typeField: true,
        typeOther: true,
        datafileId: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/publication")
  async connectPublication(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: PublicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      publication: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/publication")
  async updatePublication(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: PublicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      publication: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/publication")
  async disconnectPublication(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: PublicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      publication: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/recommend")
  @ApiNestedQuery(RecommendFindManyArgs)
  async findRecommend(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<Recommend[]> {
    const query = plainToClass(RecommendFindManyArgs, request.query);
    const results = await this.service.findRecommend(params.id, {
      ...query,
      select: {
        recUserId: true,
        recommendtype: true,
        content: true,
        datafileId: true,
        submitted: true,
        reminderSentCount: true,
        lastReminderSent: true,
        cmuAffiliation: true,
        buckleyatupload: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/recommend")
  async connectRecommend(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: RecommendWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recommend: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/recommend")
  async updateRecommend(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: RecommendWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recommend: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/recommend")
  async disconnectRecommend(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: RecommendWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recommend: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/registrationFeePayment")
  @ApiNestedQuery(RegistrationFeePaymentFindManyArgs)
  async findRegistrationFeePayment(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<RegistrationFeePayment[]> {
    const query = plainToClass(
      RegistrationFeePaymentFindManyArgs,
      request.query
    );
    const results = await this.service.findRegistrationFeePayment(params.id, {
      ...query,
      select: {
        departmentId: true,
        paymentType: true,
        paymentAmount: true,
        paymentIntentDate: true,
        payment_status: true,
        lastModTime: true,
        lastModUserId: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/registrationFeePayment")
  async connectRegistrationFeePayment(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: RegistrationFeePaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      registrationFeePayment: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/registrationFeePayment")
  async updateRegistrationFeePayment(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: RegistrationFeePaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      registrationFeePayment: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/registrationFeePayment")
  async disconnectRegistrationFeePayment(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: RegistrationFeePaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      registrationFeePayment: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/registrationFeeStatus")
  @ApiNestedQuery(RegistrationFeeStatusFindManyArgs)
  async findRegistrationFeeStatus(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<RegistrationFeeStatus[]> {
    const query = plainToClass(
      RegistrationFeeStatusFindManyArgs,
      request.query
    );
    const results = await this.service.findRegistrationFeeStatus(params.id, {
      ...query,
      select: {
        departmentId: true,
        amount: true,
        paid: true,
        waived: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/registrationFeeStatus")
  async connectRegistrationFeeStatus(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: RegistrationFeeStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      registrationFeeStatus: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/registrationFeeStatus")
  async updateRegistrationFeeStatus(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: RegistrationFeeStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      registrationFeeStatus: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/registrationFeeStatus")
  async disconnectRegistrationFeeStatus(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: RegistrationFeeStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      registrationFeeStatus: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/review")
  @ApiNestedQuery(ReviewFindManyArgs)
  async findReview(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<Review[]> {
    const query = plainToClass(ReviewFindManyArgs, request.query);
    const results = await this.service.findReview(params.id, {
      ...query,
      select: {
        reviewerId: true,
        background: true,
        grades: true,
        statement: true,
        comments: true,
        point: true,
        pointCertainty: true,
        point2: true,
        point2Certainty: true,
        privateComments: true,
        round2: true,
        round3: true,
        touched: true,
        admitVote: true,
        recruited: true,
        gradName: true,
        pertinentInfo: true,
        adviseTime: true,
        commitMoney: true,
        fundSource: true,
        round: true,
        interview: true,
        recommendations: true,
        publications: true,
        brilliance: true,
        otherInterest: true,
        supplementalReview: true,
        facVote: true,
        committeeVote: true,
        rrank: true,
        departmentId: true,
        mseExperienceLen: true,
        impressed: true,
        updated: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/review")
  async connectReview(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      review: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/review")
  async updateReview(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      review: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/review")
  async disconnectReview(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      review: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/rissFunding")
  @ApiNestedQuery(RissFundingFindManyArgs)
  async findRissFunding(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<RissFunding[]> {
    const query = plainToClass(RissFundingFindManyArgs, request.query);
    const results = await this.service.findRissFunding(params.id, {
      ...query,
      select: {
        externalFunding: true,
        externalSource: true,
        externalAmount: true,
        reuScholarship: true,
        directFunding: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/rissFunding")
  async connectRissFunding(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: RissFundingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rissFunding: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/rissFunding")
  async updateRissFunding(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: RissFundingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rissFunding: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/rissFunding")
  async disconnectRissFunding(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: RissFundingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rissFunding: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/rissMcnair")
  @ApiNestedQuery(RissMcnairFindManyArgs)
  async findRissMcnair(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<RissMcnair[]> {
    const query = plainToClass(RissMcnairFindManyArgs, request.query);
    const results = await this.service.findRissMcnair(params.id, {
      ...query,
      select: {
        site: true,
        contact: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/rissMcnair")
  async connectRissMcnair(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: RissMcnairWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rissMcnair: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/rissMcnair")
  async updateRissMcnair(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: RissMcnairWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rissMcnair: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/rissMcnair")
  async disconnectRissMcnair(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: RissMcnairWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rissMcnair: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/specialConsideration")
  @ApiNestedQuery(SpecialConsiderationFindManyArgs)
  async findSpecialConsideration(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<SpecialConsideration[]> {
    const query = plainToClass(SpecialConsiderationFindManyArgs, request.query);
    const results = await this.service.findSpecialConsideration(params.id, {
      ...query,
      select: {
        reviewerId: true,
        specialConsideration: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/specialConsideration")
  async connectSpecialConsideration(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: SpecialConsiderationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      specialConsideration: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/specialConsideration")
  async updateSpecialConsideration(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: SpecialConsiderationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      specialConsideration: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/specialConsideration")
  async disconnectSpecialConsideration(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: SpecialConsiderationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      specialConsideration: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/studentDecision")
  @ApiNestedQuery(StudentDecisionFindManyArgs)
  async findStudentDecision(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<StudentDecision[]> {
    const query = plainToClass(StudentDecisionFindManyArgs, request.query);
    const results = await this.service.findStudentDecision(params.id, {
      ...query,
      select: {
        programId: true,
        decision: true,
        acceptReasons: true,
        otherChoice: true,
        otherChoiceLocation: true,
        decisionReasons: true,
        visit: true,
        visitComments: true,
        otherSchoolsApplied: true,
        otherSchoolsAccepted: true,
        submitted: true,
        submittedDate: true,
        visitHelpful: true,
        maritalStatus: true,
        maritalOther: true,
        affiliatedCmu: true,
        progLength: true,
        attendAcc: true,
        legalName: true,
        prefName: true,
        prefEmail: true,
        dob: true,
        gender: true,
        genderOther: true,
        telMobile: true,
        streetP1: true,
        streetP2: true,
        streetP3: true,
        streetP4: true,
        cityP: true,
        stateP: true,
        postalP: true,
        countryP: true,
        citCountry: true,
        hispanic: true,
        natAm: true,
        black: true,
        asian: true,
        hpi: true,
        cau: true,
        doneDiff: true,
        admin: true,
        optComm: true,
        errors: true,
        deferralReasons: true,
        deferralSemester: true,
        deferralYear: true,
        pronoun: true,
        pronounOther: true,
        affiliatedCmutxt: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/studentDecision")
  async connectStudentDecision(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: StudentDecisionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentDecision: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/studentDecision")
  async updateStudentDecision(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: StudentDecisionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentDecision: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/studentDecision")
  async disconnectStudentDecision(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: StudentDecisionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentDecision: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/studentDecisionHistory")
  @ApiNestedQuery(StudentDecisionHistoryFindManyArgs)
  async findStudentDecisionHistory(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<StudentDecisionHistory[]> {
    const query = plainToClass(
      StudentDecisionHistoryFindManyArgs,
      request.query
    );
    const results = await this.service.findStudentDecisionHistory(params.id, {
      ...query,
      select: {
        programId: true,
        decision: true,
        deferralSemester: true,
        deferralYear: true,
        insertDate: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/studentDecisionHistory")
  async connectStudentDecisionHistory(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: StudentDecisionHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentDecisionHistory: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/studentDecisionHistory")
  async updateStudentDecisionHistory(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: StudentDecisionHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentDecisionHistory: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/studentDecisionHistory")
  async disconnectStudentDecisionHistory(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: StudentDecisionHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentDecisionHistory: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/tagMembers")
  @ApiNestedQuery(TagMemberFindManyArgs)
  async findTagMembers(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<TagMember[]> {
    const query = plainToClass(TagMemberFindManyArgs, request.query);
    const results = await this.service.findTagMembers(params.id, {
      ...query,
      select: {
        tagInstanceId: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tagMembers")
  async connectTagMembers(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: TagMemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagMembers: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tagMembers")
  async updateTagMembers(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: TagMemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagMembers: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tagMembers")
  async disconnectTagMembers(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: TagMemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tagMembers: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }
}
