/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateMitsSlateGreArgs } from "./CreateMitsSlateGreArgs";
import { UpdateMitsSlateGreArgs } from "./UpdateMitsSlateGreArgs";
import { DeleteMitsSlateGreArgs } from "./DeleteMitsSlateGreArgs";
import { MitsSlateGreCountArgs } from "./MitsSlateGreCountArgs";
import { MitsSlateGreFindManyArgs } from "./MitsSlateGreFindManyArgs";
import { MitsSlateGreFindUniqueArgs } from "./MitsSlateGreFindUniqueArgs";
import { MitsSlateGre } from "./MitsSlateGre";
import { MitsSlateGreService } from "../mitsSlateGre.service";
@graphql.Resolver(() => MitsSlateGre)
export class MitsSlateGreResolverBase {
  constructor(protected readonly service: MitsSlateGreService) {}

  async _mitsSlateGresMeta(
    @graphql.Args() args: MitsSlateGreCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MitsSlateGre])
  async mitsSlateGres(
    @graphql.Args() args: MitsSlateGreFindManyArgs
  ): Promise<MitsSlateGre[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => MitsSlateGre, { nullable: true })
  async mitsSlateGre(
    @graphql.Args() args: MitsSlateGreFindUniqueArgs
  ): Promise<MitsSlateGre | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MitsSlateGre)
  async createMitsSlateGre(
    @graphql.Args() args: CreateMitsSlateGreArgs
  ): Promise<MitsSlateGre> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MitsSlateGre)
  async updateMitsSlateGre(
    @graphql.Args() args: UpdateMitsSlateGreArgs
  ): Promise<MitsSlateGre | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MitsSlateGre)
  async deleteMitsSlateGre(
    @graphql.Args() args: DeleteMitsSlateGreArgs
  ): Promise<MitsSlateGre | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
