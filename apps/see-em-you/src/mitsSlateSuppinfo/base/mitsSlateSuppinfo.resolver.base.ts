/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateMitsSlateSuppinfoArgs } from "./CreateMitsSlateSuppinfoArgs";
import { UpdateMitsSlateSuppinfoArgs } from "./UpdateMitsSlateSuppinfoArgs";
import { DeleteMitsSlateSuppinfoArgs } from "./DeleteMitsSlateSuppinfoArgs";
import { MitsSlateSuppinfoCountArgs } from "./MitsSlateSuppinfoCountArgs";
import { MitsSlateSuppinfoFindManyArgs } from "./MitsSlateSuppinfoFindManyArgs";
import { MitsSlateSuppinfoFindUniqueArgs } from "./MitsSlateSuppinfoFindUniqueArgs";
import { MitsSlateSuppinfo } from "./MitsSlateSuppinfo";
import { MitsSlateSuppinfoService } from "../mitsSlateSuppinfo.service";
@graphql.Resolver(() => MitsSlateSuppinfo)
export class MitsSlateSuppinfoResolverBase {
  constructor(protected readonly service: MitsSlateSuppinfoService) {}

  async _mitsSlateSuppinfosMeta(
    @graphql.Args() args: MitsSlateSuppinfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MitsSlateSuppinfo])
  async mitsSlateSuppinfos(
    @graphql.Args() args: MitsSlateSuppinfoFindManyArgs
  ): Promise<MitsSlateSuppinfo[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => MitsSlateSuppinfo, { nullable: true })
  async mitsSlateSuppinfo(
    @graphql.Args() args: MitsSlateSuppinfoFindUniqueArgs
  ): Promise<MitsSlateSuppinfo | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MitsSlateSuppinfo)
  async createMitsSlateSuppinfo(
    @graphql.Args() args: CreateMitsSlateSuppinfoArgs
  ): Promise<MitsSlateSuppinfo> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MitsSlateSuppinfo)
  async updateMitsSlateSuppinfo(
    @graphql.Args() args: UpdateMitsSlateSuppinfoArgs
  ): Promise<MitsSlateSuppinfo | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MitsSlateSuppinfo)
  async deleteMitsSlateSuppinfo(
    @graphql.Args() args: DeleteMitsSlateSuppinfoArgs
  ): Promise<MitsSlateSuppinfo | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
