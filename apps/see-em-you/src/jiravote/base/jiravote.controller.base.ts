/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { JiravoteService } from "../jiravote.service";
import { JiravoteCreateInput } from "./JiravoteCreateInput";
import { Jiravote } from "./Jiravote";
import { JiravoteFindManyArgs } from "./JiravoteFindManyArgs";
import { JiravoteWhereUniqueInput } from "./JiravoteWhereUniqueInput";
import { JiravoteUpdateInput } from "./JiravoteUpdateInput";

export class JiravoteControllerBase {
  constructor(protected readonly service: JiravoteService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Jiravote })
  async createJiravote(
    @common.Body() data: JiravoteCreateInput
  ): Promise<Jiravote> {
    return await this.service.createJiravote({
      data: data,
      select: {
        created: true,
        updatedAt: true,
        jiraName: true,
        user: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Jiravote] })
  @ApiNestedQuery(JiravoteFindManyArgs)
  async jiravotes(@common.Req() request: Request): Promise<Jiravote[]> {
    const args = plainToClass(JiravoteFindManyArgs, request.query);
    return this.service.jiravotes({
      ...args,
      select: {
        created: true,
        updatedAt: true,
        jiraName: true,
        user: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Jiravote })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async jiravote(
    @common.Param() params: JiravoteWhereUniqueInput
  ): Promise<Jiravote | null> {
    const result = await this.service.jiravote({
      where: params,
      select: {
        created: true,
        updatedAt: true,
        jiraName: true,
        user: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Jiravote })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateJiravote(
    @common.Param() params: JiravoteWhereUniqueInput,
    @common.Body() data: JiravoteUpdateInput
  ): Promise<Jiravote | null> {
    try {
      return await this.service.updateJiravote({
        where: params,
        data: data,
        select: {
          created: true,
          updatedAt: true,
          jiraName: true,
          user: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Jiravote })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteJiravote(
    @common.Param() params: JiravoteWhereUniqueInput
  ): Promise<Jiravote | null> {
    try {
      return await this.service.deleteJiravote({
        where: params,
        select: {
          created: true,
          updatedAt: true,
          jiraName: true,
          user: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
