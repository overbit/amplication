/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateJiravoteArgs } from "./CreateJiravoteArgs";
import { UpdateJiravoteArgs } from "./UpdateJiravoteArgs";
import { DeleteJiravoteArgs } from "./DeleteJiravoteArgs";
import { JiravoteCountArgs } from "./JiravoteCountArgs";
import { JiravoteFindManyArgs } from "./JiravoteFindManyArgs";
import { JiravoteFindUniqueArgs } from "./JiravoteFindUniqueArgs";
import { Jiravote } from "./Jiravote";
import { JiravoteService } from "../jiravote.service";
@graphql.Resolver(() => Jiravote)
export class JiravoteResolverBase {
  constructor(protected readonly service: JiravoteService) {}

  async _jiravotesMeta(
    @graphql.Args() args: JiravoteCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Jiravote])
  async jiravotes(
    @graphql.Args() args: JiravoteFindManyArgs
  ): Promise<Jiravote[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Jiravote, { nullable: true })
  async jiravote(
    @graphql.Args() args: JiravoteFindUniqueArgs
  ): Promise<Jiravote | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Jiravote)
  async createJiravote(
    @graphql.Args() args: CreateJiravoteArgs
  ): Promise<Jiravote> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Jiravote)
  async updateJiravote(
    @graphql.Args() args: UpdateJiravoteArgs
  ): Promise<Jiravote | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Jiravote)
  async deleteJiravote(
    @graphql.Args() args: DeleteJiravoteArgs
  ): Promise<Jiravote | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
