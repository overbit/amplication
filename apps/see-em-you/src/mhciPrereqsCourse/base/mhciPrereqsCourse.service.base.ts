/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MhciPrereqsCourse as PrismaMhciPrereqsCourse,
  MhciPrereqsCourseDatafile as PrismaMhciPrereqsCourseDatafile,
  Application as PrismaApplication,
  LuUsersUsertype as PrismaLuUsersUsertype,
} from "@prisma/client";

export class MhciPrereqsCourseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.MhciPrereqsCourseCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.MhciPrereqsCourseCountArgs>
  ): Promise<number> {
    return this.prisma.mhciPrereqsCourse.count(args);
  }

  async mhciPrereqsCourses<T extends Prisma.MhciPrereqsCourseFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MhciPrereqsCourseFindManyArgs>
  ): Promise<PrismaMhciPrereqsCourse[]> {
    return this.prisma.mhciPrereqsCourse.findMany(args);
  }
  async mhciPrereqsCourse<T extends Prisma.MhciPrereqsCourseFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MhciPrereqsCourseFindUniqueArgs>
  ): Promise<PrismaMhciPrereqsCourse | null> {
    return this.prisma.mhciPrereqsCourse.findUnique(args);
  }
  async createMhciPrereqsCourse<T extends Prisma.MhciPrereqsCourseCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MhciPrereqsCourseCreateArgs>
  ): Promise<PrismaMhciPrereqsCourse> {
    return this.prisma.mhciPrereqsCourse.create<T>(args);
  }
  async updateMhciPrereqsCourse<T extends Prisma.MhciPrereqsCourseUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MhciPrereqsCourseUpdateArgs>
  ): Promise<PrismaMhciPrereqsCourse> {
    return this.prisma.mhciPrereqsCourse.update<T>(args);
  }
  async deleteMhciPrereqsCourse<T extends Prisma.MhciPrereqsCourseDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MhciPrereqsCourseDeleteArgs>
  ): Promise<PrismaMhciPrereqsCourse> {
    return this.prisma.mhciPrereqsCourse.delete(args);
  }

  async findMhciPrereqsCourseDatafiles(
    parentId: number,
    args: Prisma.MhciPrereqsCourseDatafileFindManyArgs
  ): Promise<PrismaMhciPrereqsCourseDatafile[]> {
    return this.prisma.mhciPrereqsCourse
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .mhciPrereqsCourseDatafiles(args);
  }

  async getApplication(parentId: number): Promise<PrismaApplication | null> {
    return this.prisma.mhciPrereqsCourse
      .findUnique({
        where: { id: parentId },
      })
      .application();
  }

  async getLuUsersUsertypes(
    parentId: number
  ): Promise<PrismaLuUsersUsertype | null> {
    return this.prisma.mhciPrereqsCourse
      .findUnique({
        where: { id: parentId },
      })
      .luUsersUsertypes();
  }
}
