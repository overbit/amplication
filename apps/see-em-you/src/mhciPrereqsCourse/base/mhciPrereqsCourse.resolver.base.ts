/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateMhciPrereqsCourseArgs } from "./CreateMhciPrereqsCourseArgs";
import { UpdateMhciPrereqsCourseArgs } from "./UpdateMhciPrereqsCourseArgs";
import { DeleteMhciPrereqsCourseArgs } from "./DeleteMhciPrereqsCourseArgs";
import { MhciPrereqsCourseCountArgs } from "./MhciPrereqsCourseCountArgs";
import { MhciPrereqsCourseFindManyArgs } from "./MhciPrereqsCourseFindManyArgs";
import { MhciPrereqsCourseFindUniqueArgs } from "./MhciPrereqsCourseFindUniqueArgs";
import { MhciPrereqsCourse } from "./MhciPrereqsCourse";
import { MhciPrereqsCourseDatafileFindManyArgs } from "../../mhciPrereqsCourseDatafile/base/MhciPrereqsCourseDatafileFindManyArgs";
import { MhciPrereqsCourseDatafile } from "../../mhciPrereqsCourseDatafile/base/MhciPrereqsCourseDatafile";
import { Application } from "../../application/base/Application";
import { LuUsersUsertype } from "../../luUsersUsertype/base/LuUsersUsertype";
import { MhciPrereqsCourseService } from "../mhciPrereqsCourse.service";
@graphql.Resolver(() => MhciPrereqsCourse)
export class MhciPrereqsCourseResolverBase {
  constructor(protected readonly service: MhciPrereqsCourseService) {}

  async _mhciPrereqsCoursesMeta(
    @graphql.Args() args: MhciPrereqsCourseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MhciPrereqsCourse])
  async mhciPrereqsCourses(
    @graphql.Args() args: MhciPrereqsCourseFindManyArgs
  ): Promise<MhciPrereqsCourse[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => MhciPrereqsCourse, { nullable: true })
  async mhciPrereqsCourse(
    @graphql.Args() args: MhciPrereqsCourseFindUniqueArgs
  ): Promise<MhciPrereqsCourse | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MhciPrereqsCourse)
  async createMhciPrereqsCourse(
    @graphql.Args() args: CreateMhciPrereqsCourseArgs
  ): Promise<MhciPrereqsCourse> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        application: {
          connect: args.data.application,
        },

        luUsersUsertypes: {
          connect: args.data.luUsersUsertypes,
        },
      },
    });
  }

  @graphql.Mutation(() => MhciPrereqsCourse)
  async updateMhciPrereqsCourse(
    @graphql.Args() args: UpdateMhciPrereqsCourseArgs
  ): Promise<MhciPrereqsCourse | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          application: {
            connect: args.data.application,
          },

          luUsersUsertypes: {
            connect: args.data.luUsersUsertypes,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MhciPrereqsCourse)
  async deleteMhciPrereqsCourse(
    @graphql.Args() args: DeleteMhciPrereqsCourseArgs
  ): Promise<MhciPrereqsCourse | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [MhciPrereqsCourseDatafile], {
    name: "mhciPrereqsCourseDatafiles",
  })
  async resolveFieldMhciPrereqsCourseDatafiles(
    @graphql.Parent() parent: MhciPrereqsCourse,
    @graphql.Args() args: MhciPrereqsCourseDatafileFindManyArgs
  ): Promise<MhciPrereqsCourseDatafile[]> {
    const results = await this.service.findMhciPrereqsCourseDatafiles(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Application, {
    nullable: true,
    name: "application",
  })
  async resolveFieldApplication(
    @graphql.Parent() parent: MhciPrereqsCourse
  ): Promise<Application | null> {
    const result = await this.service.getApplication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => LuUsersUsertype, {
    nullable: true,
    name: "luUsersUsertypes",
  })
  async resolveFieldLuUsersUsertypes(
    @graphql.Parent() parent: MhciPrereqsCourse
  ): Promise<LuUsersUsertype | null> {
    const result = await this.service.getLuUsersUsertypes(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
