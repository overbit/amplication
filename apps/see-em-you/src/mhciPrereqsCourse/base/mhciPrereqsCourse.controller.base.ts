/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MhciPrereqsCourseService } from "../mhciPrereqsCourse.service";
import { MhciPrereqsCourseCreateInput } from "./MhciPrereqsCourseCreateInput";
import { MhciPrereqsCourse } from "./MhciPrereqsCourse";
import { MhciPrereqsCourseFindManyArgs } from "./MhciPrereqsCourseFindManyArgs";
import { MhciPrereqsCourseWhereUniqueInput } from "./MhciPrereqsCourseWhereUniqueInput";
import { MhciPrereqsCourseUpdateInput } from "./MhciPrereqsCourseUpdateInput";
import { MhciPrereqsCourseDatafileFindManyArgs } from "../../mhciPrereqsCourseDatafile/base/MhciPrereqsCourseDatafileFindManyArgs";
import { MhciPrereqsCourseDatafile } from "../../mhciPrereqsCourseDatafile/base/MhciPrereqsCourseDatafile";
import { MhciPrereqsCourseDatafileWhereUniqueInput } from "../../mhciPrereqsCourseDatafile/base/MhciPrereqsCourseDatafileWhereUniqueInput";

export class MhciPrereqsCourseControllerBase {
  constructor(protected readonly service: MhciPrereqsCourseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MhciPrereqsCourse })
  async createMhciPrereqsCourse(
    @common.Body() data: MhciPrereqsCourseCreateInput
  ): Promise<MhciPrereqsCourse> {
    return await this.service.createMhciPrereqsCourse({
      data: {
        ...data,

        application: {
          connect: data.application,
        },

        luUsersUsertypes: {
          connect: data.luUsersUsertypes,
        },
      },
      select: {
        course_type: true,
        studentCourseName: true,
        studentCourseTime: true,
        studentCourseInstitution: true,
        studentCourseGrade: true,
        submittedToReviewer: true,
        periodId: true,
        programId: true,

        application: {
          select: {
            id: true,
          },
        },

        luUsersUsertypes: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MhciPrereqsCourse] })
  @ApiNestedQuery(MhciPrereqsCourseFindManyArgs)
  async mhciPrereqsCourses(
    @common.Req() request: Request
  ): Promise<MhciPrereqsCourse[]> {
    const args = plainToClass(MhciPrereqsCourseFindManyArgs, request.query);
    return this.service.mhciPrereqsCourses({
      ...args,
      select: {
        course_type: true,
        studentCourseName: true,
        studentCourseTime: true,
        studentCourseInstitution: true,
        studentCourseGrade: true,
        submittedToReviewer: true,
        periodId: true,
        programId: true,

        application: {
          select: {
            id: true,
          },
        },

        luUsersUsertypes: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MhciPrereqsCourse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mhciPrereqsCourse(
    @common.Param() params: MhciPrereqsCourseWhereUniqueInput
  ): Promise<MhciPrereqsCourse | null> {
    const result = await this.service.mhciPrereqsCourse({
      where: params,
      select: {
        course_type: true,
        studentCourseName: true,
        studentCourseTime: true,
        studentCourseInstitution: true,
        studentCourseGrade: true,
        submittedToReviewer: true,
        periodId: true,
        programId: true,

        application: {
          select: {
            id: true,
          },
        },

        luUsersUsertypes: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MhciPrereqsCourse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMhciPrereqsCourse(
    @common.Param() params: MhciPrereqsCourseWhereUniqueInput,
    @common.Body() data: MhciPrereqsCourseUpdateInput
  ): Promise<MhciPrereqsCourse | null> {
    try {
      return await this.service.updateMhciPrereqsCourse({
        where: params,
        data: {
          ...data,

          application: {
            connect: data.application,
          },

          luUsersUsertypes: {
            connect: data.luUsersUsertypes,
          },
        },
        select: {
          course_type: true,
          studentCourseName: true,
          studentCourseTime: true,
          studentCourseInstitution: true,
          studentCourseGrade: true,
          submittedToReviewer: true,
          periodId: true,
          programId: true,

          application: {
            select: {
              id: true,
            },
          },

          luUsersUsertypes: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MhciPrereqsCourse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMhciPrereqsCourse(
    @common.Param() params: MhciPrereqsCourseWhereUniqueInput
  ): Promise<MhciPrereqsCourse | null> {
    try {
      return await this.service.deleteMhciPrereqsCourse({
        where: params,
        select: {
          course_type: true,
          studentCourseName: true,
          studentCourseTime: true,
          studentCourseInstitution: true,
          studentCourseGrade: true,
          submittedToReviewer: true,
          periodId: true,
          programId: true,

          application: {
            select: {
              id: true,
            },
          },

          luUsersUsertypes: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/mhciPrereqsCourseDatafiles")
  @ApiNestedQuery(MhciPrereqsCourseDatafileFindManyArgs)
  async findMhciPrereqsCourseDatafiles(
    @common.Req() request: Request,
    @common.Param() params: MhciPrereqsCourseWhereUniqueInput
  ): Promise<MhciPrereqsCourseDatafile[]> {
    const query = plainToClass(
      MhciPrereqsCourseDatafileFindManyArgs,
      request.query
    );
    const results = await this.service.findMhciPrereqsCourseDatafiles(
      params.id,
      {
        ...query,
        select: {
          datafileinfoId: true,
          note: true,
          submittedToReviewer: true,
          newFileUploaded: true,

          mhciPrereqsCourses: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/mhciPrereqsCourseDatafiles")
  async connectMhciPrereqsCourseDatafiles(
    @common.Param() params: MhciPrereqsCourseWhereUniqueInput,
    @common.Body() body: MhciPrereqsCourseDatafileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mhciPrereqsCourseDatafiles: {
        connect: body,
      },
    };
    await this.service.updateMhciPrereqsCourse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/mhciPrereqsCourseDatafiles")
  async updateMhciPrereqsCourseDatafiles(
    @common.Param() params: MhciPrereqsCourseWhereUniqueInput,
    @common.Body() body: MhciPrereqsCourseDatafileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mhciPrereqsCourseDatafiles: {
        set: body,
      },
    };
    await this.service.updateMhciPrereqsCourse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/mhciPrereqsCourseDatafiles")
  async disconnectMhciPrereqsCourseDatafiles(
    @common.Param() params: MhciPrereqsCourseWhereUniqueInput,
    @common.Body() body: MhciPrereqsCourseDatafileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mhciPrereqsCourseDatafiles: {
        disconnect: body,
      },
    };
    await this.service.updateMhciPrereqsCourse({
      where: params,
      data,
      select: { id: true },
    });
  }
}
