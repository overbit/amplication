/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateSelfGenderArgs } from "./CreateSelfGenderArgs";
import { UpdateSelfGenderArgs } from "./UpdateSelfGenderArgs";
import { DeleteSelfGenderArgs } from "./DeleteSelfGenderArgs";
import { SelfGenderCountArgs } from "./SelfGenderCountArgs";
import { SelfGenderFindManyArgs } from "./SelfGenderFindManyArgs";
import { SelfGenderFindUniqueArgs } from "./SelfGenderFindUniqueArgs";
import { SelfGender } from "./SelfGender";
import { SelfGenderService } from "../selfGender.service";
@graphql.Resolver(() => SelfGender)
export class SelfGenderResolverBase {
  constructor(protected readonly service: SelfGenderService) {}

  async _selfGendersMeta(
    @graphql.Args() args: SelfGenderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SelfGender])
  async selfGenders(
    @graphql.Args() args: SelfGenderFindManyArgs
  ): Promise<SelfGender[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => SelfGender, { nullable: true })
  async selfGender(
    @graphql.Args() args: SelfGenderFindUniqueArgs
  ): Promise<SelfGender | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SelfGender)
  async createSelfGender(
    @graphql.Args() args: CreateSelfGenderArgs
  ): Promise<SelfGender> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SelfGender)
  async updateSelfGender(
    @graphql.Args() args: UpdateSelfGenderArgs
  ): Promise<SelfGender | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SelfGender)
  async deleteSelfGender(
    @graphql.Args() args: DeleteSelfGenderArgs
  ): Promise<SelfGender | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
