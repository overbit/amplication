/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EtsConfigService } from "../etsConfig.service";
import { EtsConfigCreateInput } from "./EtsConfigCreateInput";
import { EtsConfig } from "./EtsConfig";
import { EtsConfigFindManyArgs } from "./EtsConfigFindManyArgs";
import { EtsConfigWhereUniqueInput } from "./EtsConfigWhereUniqueInput";
import { EtsConfigUpdateInput } from "./EtsConfigUpdateInput";

export class EtsConfigControllerBase {
  constructor(protected readonly service: EtsConfigService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EtsConfig })
  async createEtsConfig(
    @common.Body() data: EtsConfigCreateInput
  ): Promise<EtsConfig> {
    return await this.service.createEtsConfig({
      data: data,
      select: {
        id: true,
        login: true,
        password: true,
        testName: true,
        wsdl: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EtsConfig] })
  @ApiNestedQuery(EtsConfigFindManyArgs)
  async etsConfigs(@common.Req() request: Request): Promise<EtsConfig[]> {
    const args = plainToClass(EtsConfigFindManyArgs, request.query);
    return this.service.etsConfigs({
      ...args,
      select: {
        id: true,
        login: true,
        password: true,
        testName: true,
        wsdl: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EtsConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async etsConfig(
    @common.Param() params: EtsConfigWhereUniqueInput
  ): Promise<EtsConfig | null> {
    const result = await this.service.etsConfig({
      where: params,
      select: {
        id: true,
        login: true,
        password: true,
        testName: true,
        wsdl: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EtsConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEtsConfig(
    @common.Param() params: EtsConfigWhereUniqueInput,
    @common.Body() data: EtsConfigUpdateInput
  ): Promise<EtsConfig | null> {
    try {
      return await this.service.updateEtsConfig({
        where: params,
        data: data,
        select: {
          id: true,
          login: true,
          password: true,
          testName: true,
          wsdl: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EtsConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEtsConfig(
    @common.Param() params: EtsConfigWhereUniqueInput
  ): Promise<EtsConfig | null> {
    try {
      return await this.service.deleteEtsConfig({
        where: params,
        select: {
          id: true,
          login: true,
          password: true,
          testName: true,
          wsdl: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
