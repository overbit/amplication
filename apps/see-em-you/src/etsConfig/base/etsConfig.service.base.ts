/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, EtsConfig as PrismaEtsConfig } from "@prisma/client";

export class EtsConfigServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.EtsConfigCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.EtsConfigCountArgs>
  ): Promise<number> {
    return this.prisma.etsConfig.count(args);
  }

  async etsConfigs<T extends Prisma.EtsConfigFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EtsConfigFindManyArgs>
  ): Promise<PrismaEtsConfig[]> {
    return this.prisma.etsConfig.findMany(args);
  }
  async etsConfig<T extends Prisma.EtsConfigFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.EtsConfigFindUniqueArgs>
  ): Promise<PrismaEtsConfig | null> {
    return this.prisma.etsConfig.findUnique(args);
  }
  async createEtsConfig<T extends Prisma.EtsConfigCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EtsConfigCreateArgs>
  ): Promise<PrismaEtsConfig> {
    return this.prisma.etsConfig.create<T>(args);
  }
  async updateEtsConfig<T extends Prisma.EtsConfigUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EtsConfigUpdateArgs>
  ): Promise<PrismaEtsConfig> {
    return this.prisma.etsConfig.update<T>(args);
  }
  async deleteEtsConfig<T extends Prisma.EtsConfigDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.EtsConfigDeleteArgs>
  ): Promise<PrismaEtsConfig> {
    return this.prisma.etsConfig.delete(args);
  }
}
