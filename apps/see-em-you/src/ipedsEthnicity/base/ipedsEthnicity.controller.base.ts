/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { IpedsEthnicityService } from "../ipedsEthnicity.service";
import { IpedsEthnicityCreateInput } from "./IpedsEthnicityCreateInput";
import { IpedsEthnicity } from "./IpedsEthnicity";
import { IpedsEthnicityFindManyArgs } from "./IpedsEthnicityFindManyArgs";
import { IpedsEthnicityWhereUniqueInput } from "./IpedsEthnicityWhereUniqueInput";
import { IpedsEthnicityUpdateInput } from "./IpedsEthnicityUpdateInput";

export class IpedsEthnicityControllerBase {
  constructor(protected readonly service: IpedsEthnicityService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: IpedsEthnicity })
  async createIpedsEthnicity(
    @common.Body() data: IpedsEthnicityCreateInput
  ): Promise<IpedsEthnicity> {
    return await this.service.createIpedsEthnicity({
      data: data,
      select: {
        ethnicityId: true,
        id: true,
        ipedsEthnicity: true,
        sortOrder: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [IpedsEthnicity] })
  @ApiNestedQuery(IpedsEthnicityFindManyArgs)
  async ipedsEthnicities(
    @common.Req() request: Request
  ): Promise<IpedsEthnicity[]> {
    const args = plainToClass(IpedsEthnicityFindManyArgs, request.query);
    return this.service.ipedsEthnicities({
      ...args,
      select: {
        ethnicityId: true,
        id: true,
        ipedsEthnicity: true,
        sortOrder: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: IpedsEthnicity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ipedsEthnicity(
    @common.Param() params: IpedsEthnicityWhereUniqueInput
  ): Promise<IpedsEthnicity | null> {
    const result = await this.service.ipedsEthnicity({
      where: params,
      select: {
        ethnicityId: true,
        id: true,
        ipedsEthnicity: true,
        sortOrder: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: IpedsEthnicity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateIpedsEthnicity(
    @common.Param() params: IpedsEthnicityWhereUniqueInput,
    @common.Body() data: IpedsEthnicityUpdateInput
  ): Promise<IpedsEthnicity | null> {
    try {
      return await this.service.updateIpedsEthnicity({
        where: params,
        data: data,
        select: {
          ethnicityId: true,
          id: true,
          ipedsEthnicity: true,
          sortOrder: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: IpedsEthnicity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteIpedsEthnicity(
    @common.Param() params: IpedsEthnicityWhereUniqueInput
  ): Promise<IpedsEthnicity | null> {
    try {
      return await this.service.deleteIpedsEthnicity({
        where: params,
        select: {
          ethnicityId: true,
          id: true,
          ipedsEthnicity: true,
          sortOrder: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
