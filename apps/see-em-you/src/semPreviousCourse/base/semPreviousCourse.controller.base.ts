/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SemPreviousCourseService } from "../semPreviousCourse.service";
import { SemPreviousCourseCreateInput } from "./SemPreviousCourseCreateInput";
import { SemPreviousCourse } from "./SemPreviousCourse";
import { SemPreviousCourseFindManyArgs } from "./SemPreviousCourseFindManyArgs";
import { SemPreviousCourseWhereUniqueInput } from "./SemPreviousCourseWhereUniqueInput";
import { SemPreviousCourseUpdateInput } from "./SemPreviousCourseUpdateInput";

export class SemPreviousCourseControllerBase {
  constructor(protected readonly service: SemPreviousCourseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SemPreviousCourse })
  async createSemPreviousCourse(
    @common.Body() data: SemPreviousCourseCreateInput
  ): Promise<SemPreviousCourse> {
    return await this.service.createSemPreviousCourse({
      data: data,
      select: {
        applicationId: true,
        courseName: true,
        courseYear: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SemPreviousCourse] })
  @ApiNestedQuery(SemPreviousCourseFindManyArgs)
  async semPreviousCourses(
    @common.Req() request: Request
  ): Promise<SemPreviousCourse[]> {
    const args = plainToClass(SemPreviousCourseFindManyArgs, request.query);
    return this.service.semPreviousCourses({
      ...args,
      select: {
        applicationId: true,
        courseName: true,
        courseYear: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SemPreviousCourse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async semPreviousCourse(
    @common.Param() params: SemPreviousCourseWhereUniqueInput
  ): Promise<SemPreviousCourse | null> {
    const result = await this.service.semPreviousCourse({
      where: params,
      select: {
        applicationId: true,
        courseName: true,
        courseYear: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SemPreviousCourse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSemPreviousCourse(
    @common.Param() params: SemPreviousCourseWhereUniqueInput,
    @common.Body() data: SemPreviousCourseUpdateInput
  ): Promise<SemPreviousCourse | null> {
    try {
      return await this.service.updateSemPreviousCourse({
        where: params,
        data: data,
        select: {
          applicationId: true,
          courseName: true,
          courseYear: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SemPreviousCourse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSemPreviousCourse(
    @common.Param() params: SemPreviousCourseWhereUniqueInput
  ): Promise<SemPreviousCourse | null> {
    try {
      return await this.service.deleteSemPreviousCourse({
        where: params,
        select: {
          applicationId: true,
          courseName: true,
          courseYear: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
