/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SemPreviousCourse as PrismaSemPreviousCourse,
} from "@prisma/client";

export class SemPreviousCourseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.SemPreviousCourseCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.SemPreviousCourseCountArgs>
  ): Promise<number> {
    return this.prisma.semPreviousCourse.count(args);
  }

  async semPreviousCourses<T extends Prisma.SemPreviousCourseFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SemPreviousCourseFindManyArgs>
  ): Promise<PrismaSemPreviousCourse[]> {
    return this.prisma.semPreviousCourse.findMany(args);
  }
  async semPreviousCourse<T extends Prisma.SemPreviousCourseFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SemPreviousCourseFindUniqueArgs>
  ): Promise<PrismaSemPreviousCourse | null> {
    return this.prisma.semPreviousCourse.findUnique(args);
  }
  async createSemPreviousCourse<T extends Prisma.SemPreviousCourseCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SemPreviousCourseCreateArgs>
  ): Promise<PrismaSemPreviousCourse> {
    return this.prisma.semPreviousCourse.create<T>(args);
  }
  async updateSemPreviousCourse<T extends Prisma.SemPreviousCourseUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SemPreviousCourseUpdateArgs>
  ): Promise<PrismaSemPreviousCourse> {
    return this.prisma.semPreviousCourse.update<T>(args);
  }
  async deleteSemPreviousCourse<T extends Prisma.SemPreviousCourseDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SemPreviousCourseDeleteArgs>
  ): Promise<PrismaSemPreviousCourse> {
    return this.prisma.semPreviousCourse.delete(args);
  }
}
