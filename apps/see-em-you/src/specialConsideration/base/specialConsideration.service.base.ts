/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SpecialConsideration as PrismaSpecialConsideration,
  Application as PrismaApplication,
} from "@prisma/client";

export class SpecialConsiderationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.SpecialConsiderationCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.SpecialConsiderationCountArgs>
  ): Promise<number> {
    return this.prisma.specialConsideration.count(args);
  }

  async specialConsiderations<
    T extends Prisma.SpecialConsiderationFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.SpecialConsiderationFindManyArgs>
  ): Promise<PrismaSpecialConsideration[]> {
    return this.prisma.specialConsideration.findMany(args);
  }
  async specialConsideration<
    T extends Prisma.SpecialConsiderationFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.SpecialConsiderationFindUniqueArgs>
  ): Promise<PrismaSpecialConsideration | null> {
    return this.prisma.specialConsideration.findUnique(args);
  }
  async createSpecialConsideration<
    T extends Prisma.SpecialConsiderationCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.SpecialConsiderationCreateArgs>
  ): Promise<PrismaSpecialConsideration> {
    return this.prisma.specialConsideration.create<T>(args);
  }
  async updateSpecialConsideration<
    T extends Prisma.SpecialConsiderationUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.SpecialConsiderationUpdateArgs>
  ): Promise<PrismaSpecialConsideration> {
    return this.prisma.specialConsideration.update<T>(args);
  }
  async deleteSpecialConsideration<
    T extends Prisma.SpecialConsiderationDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.SpecialConsiderationDeleteArgs>
  ): Promise<PrismaSpecialConsideration> {
    return this.prisma.specialConsideration.delete(args);
  }

  async getApplication(parentId: string): Promise<PrismaApplication | null> {
    return this.prisma.specialConsideration
      .findUnique({
        where: { id: parentId },
      })
      .application();
  }
}
