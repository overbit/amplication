/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateLuUserDepartmentArgs } from "./CreateLuUserDepartmentArgs";
import { UpdateLuUserDepartmentArgs } from "./UpdateLuUserDepartmentArgs";
import { DeleteLuUserDepartmentArgs } from "./DeleteLuUserDepartmentArgs";
import { LuUserDepartmentCountArgs } from "./LuUserDepartmentCountArgs";
import { LuUserDepartmentFindManyArgs } from "./LuUserDepartmentFindManyArgs";
import { LuUserDepartmentFindUniqueArgs } from "./LuUserDepartmentFindUniqueArgs";
import { LuUserDepartment } from "./LuUserDepartment";
import { LuUserDepartmentService } from "../luUserDepartment.service";
@graphql.Resolver(() => LuUserDepartment)
export class LuUserDepartmentResolverBase {
  constructor(protected readonly service: LuUserDepartmentService) {}

  async _luUserDepartmentsMeta(
    @graphql.Args() args: LuUserDepartmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LuUserDepartment])
  async luUserDepartments(
    @graphql.Args() args: LuUserDepartmentFindManyArgs
  ): Promise<LuUserDepartment[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => LuUserDepartment, { nullable: true })
  async luUserDepartment(
    @graphql.Args() args: LuUserDepartmentFindUniqueArgs
  ): Promise<LuUserDepartment | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LuUserDepartment)
  async createLuUserDepartment(
    @graphql.Args() args: CreateLuUserDepartmentArgs
  ): Promise<LuUserDepartment> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LuUserDepartment)
  async updateLuUserDepartment(
    @graphql.Args() args: UpdateLuUserDepartmentArgs
  ): Promise<LuUserDepartment | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LuUserDepartment)
  async deleteLuUserDepartment(
    @graphql.Args() args: DeleteLuUserDepartmentArgs
  ): Promise<LuUserDepartment | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
