/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateReviewIniExperienceScaleArgs } from "./CreateReviewIniExperienceScaleArgs";
import { UpdateReviewIniExperienceScaleArgs } from "./UpdateReviewIniExperienceScaleArgs";
import { DeleteReviewIniExperienceScaleArgs } from "./DeleteReviewIniExperienceScaleArgs";
import { ReviewIniExperienceScaleCountArgs } from "./ReviewIniExperienceScaleCountArgs";
import { ReviewIniExperienceScaleFindManyArgs } from "./ReviewIniExperienceScaleFindManyArgs";
import { ReviewIniExperienceScaleFindUniqueArgs } from "./ReviewIniExperienceScaleFindUniqueArgs";
import { ReviewIniExperienceScale } from "./ReviewIniExperienceScale";
import { ReviewIniExperienceScaleService } from "../reviewIniExperienceScale.service";
@graphql.Resolver(() => ReviewIniExperienceScale)
export class ReviewIniExperienceScaleResolverBase {
  constructor(protected readonly service: ReviewIniExperienceScaleService) {}

  async _reviewIniExperienceScalesMeta(
    @graphql.Args() args: ReviewIniExperienceScaleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ReviewIniExperienceScale])
  async reviewIniExperienceScales(
    @graphql.Args() args: ReviewIniExperienceScaleFindManyArgs
  ): Promise<ReviewIniExperienceScale[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ReviewIniExperienceScale, { nullable: true })
  async reviewIniExperienceScale(
    @graphql.Args() args: ReviewIniExperienceScaleFindUniqueArgs
  ): Promise<ReviewIniExperienceScale | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ReviewIniExperienceScale)
  async createReviewIniExperienceScale(
    @graphql.Args() args: CreateReviewIniExperienceScaleArgs
  ): Promise<ReviewIniExperienceScale> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ReviewIniExperienceScale)
  async updateReviewIniExperienceScale(
    @graphql.Args() args: UpdateReviewIniExperienceScaleArgs
  ): Promise<ReviewIniExperienceScale | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReviewIniExperienceScale)
  async deleteReviewIniExperienceScale(
    @graphql.Args() args: DeleteReviewIniExperienceScaleArgs
  ): Promise<ReviewIniExperienceScale | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
