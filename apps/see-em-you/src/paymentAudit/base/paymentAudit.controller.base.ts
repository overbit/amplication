/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PaymentAuditService } from "../paymentAudit.service";
import { PaymentAuditCreateInput } from "./PaymentAuditCreateInput";
import { PaymentAudit } from "./PaymentAudit";
import { PaymentAuditFindManyArgs } from "./PaymentAuditFindManyArgs";
import { PaymentAuditWhereUniqueInput } from "./PaymentAuditWhereUniqueInput";
import { PaymentAuditUpdateInput } from "./PaymentAuditUpdateInput";

export class PaymentAuditControllerBase {
  constructor(protected readonly service: PaymentAuditService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PaymentAudit })
  async createPaymentAudit(
    @common.Body() data: PaymentAuditCreateInput
  ): Promise<PaymentAudit> {
    return await this.service.createPaymentAudit({
      data: data,
      select: {
        applicationId: true,
        id: true,
        lastModTime: true,
        lastModUserId: true,
        paymentAmount: true,
        paymentId: true,
        paymentIntentDate: true,
        payment_status: true,
        paymentType: true,
        timeDeleted: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PaymentAudit] })
  @ApiNestedQuery(PaymentAuditFindManyArgs)
  async paymentAudits(@common.Req() request: Request): Promise<PaymentAudit[]> {
    const args = plainToClass(PaymentAuditFindManyArgs, request.query);
    return this.service.paymentAudits({
      ...args,
      select: {
        applicationId: true,
        id: true,
        lastModTime: true,
        lastModUserId: true,
        paymentAmount: true,
        paymentId: true,
        paymentIntentDate: true,
        payment_status: true,
        paymentType: true,
        timeDeleted: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PaymentAudit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async paymentAudit(
    @common.Param() params: PaymentAuditWhereUniqueInput
  ): Promise<PaymentAudit | null> {
    const result = await this.service.paymentAudit({
      where: params,
      select: {
        applicationId: true,
        id: true,
        lastModTime: true,
        lastModUserId: true,
        paymentAmount: true,
        paymentId: true,
        paymentIntentDate: true,
        payment_status: true,
        paymentType: true,
        timeDeleted: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PaymentAudit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePaymentAudit(
    @common.Param() params: PaymentAuditWhereUniqueInput,
    @common.Body() data: PaymentAuditUpdateInput
  ): Promise<PaymentAudit | null> {
    try {
      return await this.service.updatePaymentAudit({
        where: params,
        data: data,
        select: {
          applicationId: true,
          id: true,
          lastModTime: true,
          lastModUserId: true,
          paymentAmount: true,
          paymentId: true,
          paymentIntentDate: true,
          payment_status: true,
          paymentType: true,
          timeDeleted: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PaymentAudit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePaymentAudit(
    @common.Param() params: PaymentAuditWhereUniqueInput
  ): Promise<PaymentAudit | null> {
    try {
      return await this.service.deletePaymentAudit({
        where: params,
        select: {
          applicationId: true,
          id: true,
          lastModTime: true,
          lastModUserId: true,
          paymentAmount: true,
          paymentId: true,
          paymentIntentDate: true,
          payment_status: true,
          paymentType: true,
          timeDeleted: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
