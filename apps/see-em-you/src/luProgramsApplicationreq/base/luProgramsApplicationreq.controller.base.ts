/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LuProgramsApplicationreqService } from "../luProgramsApplicationreq.service";
import { LuProgramsApplicationreqCreateInput } from "./LuProgramsApplicationreqCreateInput";
import { LuProgramsApplicationreq } from "./LuProgramsApplicationreq";
import { LuProgramsApplicationreqFindManyArgs } from "./LuProgramsApplicationreqFindManyArgs";
import { LuProgramsApplicationreqWhereUniqueInput } from "./LuProgramsApplicationreqWhereUniqueInput";
import { LuProgramsApplicationreqUpdateInput } from "./LuProgramsApplicationreqUpdateInput";

export class LuProgramsApplicationreqControllerBase {
  constructor(protected readonly service: LuProgramsApplicationreqService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LuProgramsApplicationreq })
  async createLuProgramsApplicationreq(
    @common.Body() data: LuProgramsApplicationreqCreateInput
  ): Promise<LuProgramsApplicationreq> {
    return await this.service.createLuProgramsApplicationreq({
      data: data,
      select: {
        degreeId: true,
        appreqId: true,
        programId: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LuProgramsApplicationreq] })
  @ApiNestedQuery(LuProgramsApplicationreqFindManyArgs)
  async luProgramsApplicationreqs(
    @common.Req() request: Request
  ): Promise<LuProgramsApplicationreq[]> {
    const args = plainToClass(
      LuProgramsApplicationreqFindManyArgs,
      request.query
    );
    return this.service.luProgramsApplicationreqs({
      ...args,
      select: {
        degreeId: true,
        appreqId: true,
        programId: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LuProgramsApplicationreq })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async luProgramsApplicationreq(
    @common.Param() params: LuProgramsApplicationreqWhereUniqueInput
  ): Promise<LuProgramsApplicationreq | null> {
    const result = await this.service.luProgramsApplicationreq({
      where: params,
      select: {
        degreeId: true,
        appreqId: true,
        programId: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LuProgramsApplicationreq })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLuProgramsApplicationreq(
    @common.Param() params: LuProgramsApplicationreqWhereUniqueInput,
    @common.Body() data: LuProgramsApplicationreqUpdateInput
  ): Promise<LuProgramsApplicationreq | null> {
    try {
      return await this.service.updateLuProgramsApplicationreq({
        where: params,
        data: data,
        select: {
          degreeId: true,
          appreqId: true,
          programId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LuProgramsApplicationreq })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLuProgramsApplicationreq(
    @common.Param() params: LuProgramsApplicationreqWhereUniqueInput
  ): Promise<LuProgramsApplicationreq | null> {
    try {
      return await this.service.deleteLuProgramsApplicationreq({
        where: params,
        select: {
          degreeId: true,
          appreqId: true,
          programId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
