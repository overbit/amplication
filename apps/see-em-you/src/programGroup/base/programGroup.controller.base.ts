/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProgramGroupService } from "../programGroup.service";
import { ProgramGroupCreateInput } from "./ProgramGroupCreateInput";
import { ProgramGroup } from "./ProgramGroup";
import { ProgramGroupFindManyArgs } from "./ProgramGroupFindManyArgs";
import { ProgramGroupWhereUniqueInput } from "./ProgramGroupWhereUniqueInput";
import { ProgramGroupUpdateInput } from "./ProgramGroupUpdateInput";

export class ProgramGroupControllerBase {
  constructor(protected readonly service: ProgramGroupService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProgramGroup })
  async createProgramGroup(
    @common.Body() data: ProgramGroupCreateInput
  ): Promise<ProgramGroup> {
    return await this.service.createProgramGroup({
      data: data,
      select: {
        id: true,
        periodId: true,
        programGroupDescription: true,
        programGroupName: true,
        programGroupNameShort: true,
        unitId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProgramGroup] })
  @ApiNestedQuery(ProgramGroupFindManyArgs)
  async programGroups(@common.Req() request: Request): Promise<ProgramGroup[]> {
    const args = plainToClass(ProgramGroupFindManyArgs, request.query);
    return this.service.programGroups({
      ...args,
      select: {
        id: true,
        periodId: true,
        programGroupDescription: true,
        programGroupName: true,
        programGroupNameShort: true,
        unitId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProgramGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async programGroup(
    @common.Param() params: ProgramGroupWhereUniqueInput
  ): Promise<ProgramGroup | null> {
    const result = await this.service.programGroup({
      where: params,
      select: {
        id: true,
        periodId: true,
        programGroupDescription: true,
        programGroupName: true,
        programGroupNameShort: true,
        unitId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProgramGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProgramGroup(
    @common.Param() params: ProgramGroupWhereUniqueInput,
    @common.Body() data: ProgramGroupUpdateInput
  ): Promise<ProgramGroup | null> {
    try {
      return await this.service.updateProgramGroup({
        where: params,
        data: data,
        select: {
          id: true,
          periodId: true,
          programGroupDescription: true,
          programGroupName: true,
          programGroupNameShort: true,
          unitId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProgramGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProgramGroup(
    @common.Param() params: ProgramGroupWhereUniqueInput
  ): Promise<ProgramGroup | null> {
    try {
      return await this.service.deleteProgramGroup({
        where: params,
        select: {
          id: true,
          periodId: true,
          programGroupDescription: true,
          programGroupName: true,
          programGroupNameShort: true,
          unitId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
