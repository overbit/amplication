/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateProgramGroupArgs } from "./CreateProgramGroupArgs";
import { UpdateProgramGroupArgs } from "./UpdateProgramGroupArgs";
import { DeleteProgramGroupArgs } from "./DeleteProgramGroupArgs";
import { ProgramGroupCountArgs } from "./ProgramGroupCountArgs";
import { ProgramGroupFindManyArgs } from "./ProgramGroupFindManyArgs";
import { ProgramGroupFindUniqueArgs } from "./ProgramGroupFindUniqueArgs";
import { ProgramGroup } from "./ProgramGroup";
import { ProgramGroupService } from "../programGroup.service";
@graphql.Resolver(() => ProgramGroup)
export class ProgramGroupResolverBase {
  constructor(protected readonly service: ProgramGroupService) {}

  async _programGroupsMeta(
    @graphql.Args() args: ProgramGroupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProgramGroup])
  async programGroups(
    @graphql.Args() args: ProgramGroupFindManyArgs
  ): Promise<ProgramGroup[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ProgramGroup, { nullable: true })
  async programGroup(
    @graphql.Args() args: ProgramGroupFindUniqueArgs
  ): Promise<ProgramGroup | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProgramGroup)
  async createProgramGroup(
    @graphql.Args() args: CreateProgramGroupArgs
  ): Promise<ProgramGroup> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ProgramGroup)
  async updateProgramGroup(
    @graphql.Args() args: UpdateProgramGroupArgs
  ): Promise<ProgramGroup | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProgramGroup)
  async deleteProgramGroup(
    @graphql.Args() args: DeleteProgramGroupArgs
  ): Promise<ProgramGroup | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
