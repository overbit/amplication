/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateUsersRemoteAuthStringArgs } from "./CreateUsersRemoteAuthStringArgs";
import { UpdateUsersRemoteAuthStringArgs } from "./UpdateUsersRemoteAuthStringArgs";
import { DeleteUsersRemoteAuthStringArgs } from "./DeleteUsersRemoteAuthStringArgs";
import { UsersRemoteAuthStringCountArgs } from "./UsersRemoteAuthStringCountArgs";
import { UsersRemoteAuthStringFindManyArgs } from "./UsersRemoteAuthStringFindManyArgs";
import { UsersRemoteAuthStringFindUniqueArgs } from "./UsersRemoteAuthStringFindUniqueArgs";
import { UsersRemoteAuthString } from "./UsersRemoteAuthString";
import { UsersRemoteAuthStringService } from "../usersRemoteAuthString.service";
@graphql.Resolver(() => UsersRemoteAuthString)
export class UsersRemoteAuthStringResolverBase {
  constructor(protected readonly service: UsersRemoteAuthStringService) {}

  async _usersRemoteAuthStringsMeta(
    @graphql.Args() args: UsersRemoteAuthStringCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UsersRemoteAuthString])
  async usersRemoteAuthStrings(
    @graphql.Args() args: UsersRemoteAuthStringFindManyArgs
  ): Promise<UsersRemoteAuthString[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => UsersRemoteAuthString, { nullable: true })
  async usersRemoteAuthString(
    @graphql.Args() args: UsersRemoteAuthStringFindUniqueArgs
  ): Promise<UsersRemoteAuthString | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UsersRemoteAuthString)
  async createUsersRemoteAuthString(
    @graphql.Args() args: CreateUsersRemoteAuthStringArgs
  ): Promise<UsersRemoteAuthString> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UsersRemoteAuthString)
  async updateUsersRemoteAuthString(
    @graphql.Args() args: UpdateUsersRemoteAuthStringArgs
  ): Promise<UsersRemoteAuthString | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UsersRemoteAuthString)
  async deleteUsersRemoteAuthString(
    @graphql.Args() args: DeleteUsersRemoteAuthStringArgs
  ): Promise<UsersRemoteAuthString | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
