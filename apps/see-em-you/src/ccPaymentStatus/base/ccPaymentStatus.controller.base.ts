/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CcPaymentStatusService } from "../ccPaymentStatus.service";
import { CcPaymentStatusCreateInput } from "./CcPaymentStatusCreateInput";
import { CcPaymentStatus } from "./CcPaymentStatus";
import { CcPaymentStatusFindManyArgs } from "./CcPaymentStatusFindManyArgs";
import { CcPaymentStatusWhereUniqueInput } from "./CcPaymentStatusWhereUniqueInput";
import { CcPaymentStatusUpdateInput } from "./CcPaymentStatusUpdateInput";

export class CcPaymentStatusControllerBase {
  constructor(protected readonly service: CcPaymentStatusService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CcPaymentStatus })
  async createCcPaymentStatus(
    @common.Body() data: CcPaymentStatusCreateInput
  ): Promise<CcPaymentStatus> {
    return await this.service.createCcPaymentStatus({
      data: data,
      select: {
        statusDate: true,
        authTotal: true,
        settleTotal: true,
        creditTotal: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CcPaymentStatus] })
  @ApiNestedQuery(CcPaymentStatusFindManyArgs)
  async ccPaymentStatuses(
    @common.Req() request: Request
  ): Promise<CcPaymentStatus[]> {
    const args = plainToClass(CcPaymentStatusFindManyArgs, request.query);
    return this.service.ccPaymentStatuses({
      ...args,
      select: {
        statusDate: true,
        authTotal: true,
        settleTotal: true,
        creditTotal: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CcPaymentStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ccPaymentStatus(
    @common.Param() params: CcPaymentStatusWhereUniqueInput
  ): Promise<CcPaymentStatus | null> {
    const result = await this.service.ccPaymentStatus({
      where: params,
      select: {
        statusDate: true,
        authTotal: true,
        settleTotal: true,
        creditTotal: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CcPaymentStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCcPaymentStatus(
    @common.Param() params: CcPaymentStatusWhereUniqueInput,
    @common.Body() data: CcPaymentStatusUpdateInput
  ): Promise<CcPaymentStatus | null> {
    try {
      return await this.service.updateCcPaymentStatus({
        where: params,
        data: data,
        select: {
          statusDate: true,
          authTotal: true,
          settleTotal: true,
          creditTotal: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CcPaymentStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCcPaymentStatus(
    @common.Param() params: CcPaymentStatusWhereUniqueInput
  ): Promise<CcPaymentStatus | null> {
    try {
      return await this.service.deleteCcPaymentStatus({
        where: params,
        select: {
          statusDate: true,
          authTotal: true,
          settleTotal: true,
          creditTotal: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
