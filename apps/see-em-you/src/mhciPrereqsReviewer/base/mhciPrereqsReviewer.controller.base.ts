/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MhciPrereqsReviewerService } from "../mhciPrereqsReviewer.service";
import { MhciPrereqsReviewerCreateInput } from "./MhciPrereqsReviewerCreateInput";
import { MhciPrereqsReviewer } from "./MhciPrereqsReviewer";
import { MhciPrereqsReviewerFindManyArgs } from "./MhciPrereqsReviewerFindManyArgs";
import { MhciPrereqsReviewerWhereUniqueInput } from "./MhciPrereqsReviewerWhereUniqueInput";
import { MhciPrereqsReviewerUpdateInput } from "./MhciPrereqsReviewerUpdateInput";

export class MhciPrereqsReviewerControllerBase {
  constructor(protected readonly service: MhciPrereqsReviewerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MhciPrereqsReviewer })
  async createMhciPrereqsReviewer(
    @common.Body() data: MhciPrereqsReviewerCreateInput
  ): Promise<MhciPrereqsReviewer> {
    return await this.service.createMhciPrereqsReviewer({
      data: data,
      select: {
        reviewerLuuId: true,
        prereqType: true,
        placeoutPeriodId: true,
        emailNotification: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MhciPrereqsReviewer] })
  @ApiNestedQuery(MhciPrereqsReviewerFindManyArgs)
  async mhciPrereqsReviewers(
    @common.Req() request: Request
  ): Promise<MhciPrereqsReviewer[]> {
    const args = plainToClass(MhciPrereqsReviewerFindManyArgs, request.query);
    return this.service.mhciPrereqsReviewers({
      ...args,
      select: {
        reviewerLuuId: true,
        prereqType: true,
        placeoutPeriodId: true,
        emailNotification: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MhciPrereqsReviewer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mhciPrereqsReviewer(
    @common.Param() params: MhciPrereqsReviewerWhereUniqueInput
  ): Promise<MhciPrereqsReviewer | null> {
    const result = await this.service.mhciPrereqsReviewer({
      where: params,
      select: {
        reviewerLuuId: true,
        prereqType: true,
        placeoutPeriodId: true,
        emailNotification: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MhciPrereqsReviewer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMhciPrereqsReviewer(
    @common.Param() params: MhciPrereqsReviewerWhereUniqueInput,
    @common.Body() data: MhciPrereqsReviewerUpdateInput
  ): Promise<MhciPrereqsReviewer | null> {
    try {
      return await this.service.updateMhciPrereqsReviewer({
        where: params,
        data: data,
        select: {
          reviewerLuuId: true,
          prereqType: true,
          placeoutPeriodId: true,
          emailNotification: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MhciPrereqsReviewer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMhciPrereqsReviewer(
    @common.Param() params: MhciPrereqsReviewerWhereUniqueInput
  ): Promise<MhciPrereqsReviewer | null> {
    try {
      return await this.service.deleteMhciPrereqsReviewer({
        where: params,
        select: {
          reviewerLuuId: true,
          prereqType: true,
          placeoutPeriodId: true,
          emailNotification: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
