/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LuApplicationEtsgreService } from "../luApplicationEtsgre.service";
import { LuApplicationEtsgreCreateInput } from "./LuApplicationEtsgreCreateInput";
import { LuApplicationEtsgre } from "./LuApplicationEtsgre";
import { LuApplicationEtsgreFindManyArgs } from "./LuApplicationEtsgreFindManyArgs";
import { LuApplicationEtsgreWhereUniqueInput } from "./LuApplicationEtsgreWhereUniqueInput";
import { LuApplicationEtsgreUpdateInput } from "./LuApplicationEtsgreUpdateInput";

export class LuApplicationEtsgreControllerBase {
  constructor(protected readonly service: LuApplicationEtsgreService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LuApplicationEtsgre })
  async createLuApplicationEtsgre(
    @common.Body() data: LuApplicationEtsgreCreateInput
  ): Promise<LuApplicationEtsgre> {
    return await this.service.createLuApplicationEtsgre({
      data: data,
      select: {
        appId: true,
        greId: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LuApplicationEtsgre] })
  @ApiNestedQuery(LuApplicationEtsgreFindManyArgs)
  async luApplicationEtsgres(
    @common.Req() request: Request
  ): Promise<LuApplicationEtsgre[]> {
    const args = plainToClass(LuApplicationEtsgreFindManyArgs, request.query);
    return this.service.luApplicationEtsgres({
      ...args,
      select: {
        appId: true,
        greId: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LuApplicationEtsgre })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async luApplicationEtsgre(
    @common.Param() params: LuApplicationEtsgreWhereUniqueInput
  ): Promise<LuApplicationEtsgre | null> {
    const result = await this.service.luApplicationEtsgre({
      where: params,
      select: {
        appId: true,
        greId: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LuApplicationEtsgre })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLuApplicationEtsgre(
    @common.Param() params: LuApplicationEtsgreWhereUniqueInput,
    @common.Body() data: LuApplicationEtsgreUpdateInput
  ): Promise<LuApplicationEtsgre | null> {
    try {
      return await this.service.updateLuApplicationEtsgre({
        where: params,
        data: data,
        select: {
          appId: true,
          greId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LuApplicationEtsgre })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLuApplicationEtsgre(
    @common.Param() params: LuApplicationEtsgreWhereUniqueInput
  ): Promise<LuApplicationEtsgre | null> {
    try {
      return await this.service.deleteLuApplicationEtsgre({
        where: params,
        select: {
          appId: true,
          greId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
