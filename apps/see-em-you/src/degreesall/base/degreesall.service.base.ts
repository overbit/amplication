/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Degreesall as PrismaDegreesall } from "@prisma/client";

export class DegreesallServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.DegreesallCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.DegreesallCountArgs>
  ): Promise<number> {
    return this.prisma.degreesall.count(args);
  }

  async degreesalls<T extends Prisma.DegreesallFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DegreesallFindManyArgs>
  ): Promise<PrismaDegreesall[]> {
    return this.prisma.degreesall.findMany(args);
  }
  async degreesall<T extends Prisma.DegreesallFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DegreesallFindUniqueArgs>
  ): Promise<PrismaDegreesall | null> {
    return this.prisma.degreesall.findUnique(args);
  }
  async createDegreesall<T extends Prisma.DegreesallCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DegreesallCreateArgs>
  ): Promise<PrismaDegreesall> {
    return this.prisma.degreesall.create<T>(args);
  }
  async updateDegreesall<T extends Prisma.DegreesallUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DegreesallUpdateArgs>
  ): Promise<PrismaDegreesall> {
    return this.prisma.degreesall.update<T>(args);
  }
  async deleteDegreesall<T extends Prisma.DegreesallDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DegreesallDeleteArgs>
  ): Promise<PrismaDegreesall> {
    return this.prisma.degreesall.delete(args);
  }
}
