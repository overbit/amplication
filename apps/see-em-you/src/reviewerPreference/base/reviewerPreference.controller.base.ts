/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReviewerPreferenceService } from "../reviewerPreference.service";
import { ReviewerPreferenceCreateInput } from "./ReviewerPreferenceCreateInput";
import { ReviewerPreference } from "./ReviewerPreference";
import { ReviewerPreferenceFindManyArgs } from "./ReviewerPreferenceFindManyArgs";
import { ReviewerPreferenceWhereUniqueInput } from "./ReviewerPreferenceWhereUniqueInput";
import { ReviewerPreferenceUpdateInput } from "./ReviewerPreferenceUpdateInput";

export class ReviewerPreferenceControllerBase {
  constructor(protected readonly service: ReviewerPreferenceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ReviewerPreference })
  async createReviewerPreference(
    @common.Body() data: ReviewerPreferenceCreateInput
  ): Promise<ReviewerPreference> {
    return await this.service.createReviewerPreference({
      data: data,
      select: {
        viewMode: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ReviewerPreference] })
  @ApiNestedQuery(ReviewerPreferenceFindManyArgs)
  async reviewerPreferences(
    @common.Req() request: Request
  ): Promise<ReviewerPreference[]> {
    const args = plainToClass(ReviewerPreferenceFindManyArgs, request.query);
    return this.service.reviewerPreferences({
      ...args,
      select: {
        viewMode: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ReviewerPreference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async reviewerPreference(
    @common.Param() params: ReviewerPreferenceWhereUniqueInput
  ): Promise<ReviewerPreference | null> {
    const result = await this.service.reviewerPreference({
      where: params,
      select: {
        viewMode: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ReviewerPreference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReviewerPreference(
    @common.Param() params: ReviewerPreferenceWhereUniqueInput,
    @common.Body() data: ReviewerPreferenceUpdateInput
  ): Promise<ReviewerPreference | null> {
    try {
      return await this.service.updateReviewerPreference({
        where: params,
        data: data,
        select: {
          viewMode: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ReviewerPreference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReviewerPreference(
    @common.Param() params: ReviewerPreferenceWhereUniqueInput
  ): Promise<ReviewerPreference | null> {
    try {
      return await this.service.deleteReviewerPreference({
        where: params,
        select: {
          viewMode: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
