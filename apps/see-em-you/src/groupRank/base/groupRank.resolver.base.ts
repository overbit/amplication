/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateGroupRankArgs } from "./CreateGroupRankArgs";
import { UpdateGroupRankArgs } from "./UpdateGroupRankArgs";
import { DeleteGroupRankArgs } from "./DeleteGroupRankArgs";
import { GroupRankCountArgs } from "./GroupRankCountArgs";
import { GroupRankFindManyArgs } from "./GroupRankFindManyArgs";
import { GroupRankFindUniqueArgs } from "./GroupRankFindUniqueArgs";
import { GroupRank } from "./GroupRank";
import { GroupRankService } from "../groupRank.service";
@graphql.Resolver(() => GroupRank)
export class GroupRankResolverBase {
  constructor(protected readonly service: GroupRankService) {}

  async _groupRanksMeta(
    @graphql.Args() args: GroupRankCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GroupRank])
  async groupRanks(
    @graphql.Args() args: GroupRankFindManyArgs
  ): Promise<GroupRank[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => GroupRank, { nullable: true })
  async groupRank(
    @graphql.Args() args: GroupRankFindUniqueArgs
  ): Promise<GroupRank | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GroupRank)
  async createGroupRank(
    @graphql.Args() args: CreateGroupRankArgs
  ): Promise<GroupRank> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => GroupRank)
  async updateGroupRank(
    @graphql.Args() args: UpdateGroupRankArgs
  ): Promise<GroupRank | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GroupRank)
  async deleteGroupRank(
    @graphql.Args() args: DeleteGroupRankArgs
  ): Promise<GroupRank | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
