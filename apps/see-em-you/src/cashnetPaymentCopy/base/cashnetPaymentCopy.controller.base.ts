/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CashnetPaymentCopyService } from "../cashnetPaymentCopy.service";
import { CashnetPaymentCopyCreateInput } from "./CashnetPaymentCopyCreateInput";
import { CashnetPaymentCopy } from "./CashnetPaymentCopy";
import { CashnetPaymentCopyFindManyArgs } from "./CashnetPaymentCopyFindManyArgs";
import { CashnetPaymentCopyWhereUniqueInput } from "./CashnetPaymentCopyWhereUniqueInput";
import { CashnetPaymentCopyUpdateInput } from "./CashnetPaymentCopyUpdateInput";

export class CashnetPaymentCopyControllerBase {
  constructor(protected readonly service: CashnetPaymentCopyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CashnetPaymentCopy })
  async createCashnetPaymentCopy(
    @common.Body() data: CashnetPaymentCopyCreateInput
  ): Promise<CashnetPaymentCopy> {
    return await this.service.createCashnetPaymentCopy({
      data: data,
      select: {
        amount: true,
        appId: true,
        applicantEmail: true,
        applicantName: true,
        id: true,
        merchant: true,
        status: true,
        transactionId: true,
        transactionTime: true,
        transactionType: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CashnetPaymentCopy] })
  @ApiNestedQuery(CashnetPaymentCopyFindManyArgs)
  async cashnetPaymentCopies(
    @common.Req() request: Request
  ): Promise<CashnetPaymentCopy[]> {
    const args = plainToClass(CashnetPaymentCopyFindManyArgs, request.query);
    return this.service.cashnetPaymentCopies({
      ...args,
      select: {
        amount: true,
        appId: true,
        applicantEmail: true,
        applicantName: true,
        id: true,
        merchant: true,
        status: true,
        transactionId: true,
        transactionTime: true,
        transactionType: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CashnetPaymentCopy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cashnetPaymentCopy(
    @common.Param() params: CashnetPaymentCopyWhereUniqueInput
  ): Promise<CashnetPaymentCopy | null> {
    const result = await this.service.cashnetPaymentCopy({
      where: params,
      select: {
        amount: true,
        appId: true,
        applicantEmail: true,
        applicantName: true,
        id: true,
        merchant: true,
        status: true,
        transactionId: true,
        transactionTime: true,
        transactionType: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CashnetPaymentCopy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCashnetPaymentCopy(
    @common.Param() params: CashnetPaymentCopyWhereUniqueInput,
    @common.Body() data: CashnetPaymentCopyUpdateInput
  ): Promise<CashnetPaymentCopy | null> {
    try {
      return await this.service.updateCashnetPaymentCopy({
        where: params,
        data: data,
        select: {
          amount: true,
          appId: true,
          applicantEmail: true,
          applicantName: true,
          id: true,
          merchant: true,
          status: true,
          transactionId: true,
          transactionTime: true,
          transactionType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CashnetPaymentCopy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCashnetPaymentCopy(
    @common.Param() params: CashnetPaymentCopyWhereUniqueInput
  ): Promise<CashnetPaymentCopy | null> {
    try {
      return await this.service.deleteCashnetPaymentCopy({
        where: params,
        select: {
          amount: true,
          appId: true,
          applicantEmail: true,
          applicantName: true,
          id: true,
          merchant: true,
          status: true,
          transactionId: true,
          transactionTime: true,
          transactionType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
