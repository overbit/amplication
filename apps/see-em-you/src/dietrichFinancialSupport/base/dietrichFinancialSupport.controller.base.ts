/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DietrichFinancialSupportService } from "../dietrichFinancialSupport.service";
import { DietrichFinancialSupportCreateInput } from "./DietrichFinancialSupportCreateInput";
import { DietrichFinancialSupport } from "./DietrichFinancialSupport";
import { DietrichFinancialSupportFindManyArgs } from "./DietrichFinancialSupportFindManyArgs";
import { DietrichFinancialSupportWhereUniqueInput } from "./DietrichFinancialSupportWhereUniqueInput";
import { DietrichFinancialSupportUpdateInput } from "./DietrichFinancialSupportUpdateInput";

export class DietrichFinancialSupportControllerBase {
  constructor(protected readonly service: DietrichFinancialSupportService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DietrichFinancialSupport })
  async createDietrichFinancialSupport(
    @common.Body() data: DietrichFinancialSupportCreateInput
  ): Promise<DietrichFinancialSupport> {
    return await this.service.createDietrichFinancialSupport({
      data: data,
      select: {
        applicationId: true,
        id: true,
        interestedB2Training: true,
        qualifiedAssistance: true,
        receivedLoans: true,
        receivedScholarships: true,
        supportSources: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DietrichFinancialSupport] })
  @ApiNestedQuery(DietrichFinancialSupportFindManyArgs)
  async dietrichFinancialSupports(
    @common.Req() request: Request
  ): Promise<DietrichFinancialSupport[]> {
    const args = plainToClass(
      DietrichFinancialSupportFindManyArgs,
      request.query
    );
    return this.service.dietrichFinancialSupports({
      ...args,
      select: {
        applicationId: true,
        id: true,
        interestedB2Training: true,
        qualifiedAssistance: true,
        receivedLoans: true,
        receivedScholarships: true,
        supportSources: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DietrichFinancialSupport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dietrichFinancialSupport(
    @common.Param() params: DietrichFinancialSupportWhereUniqueInput
  ): Promise<DietrichFinancialSupport | null> {
    const result = await this.service.dietrichFinancialSupport({
      where: params,
      select: {
        applicationId: true,
        id: true,
        interestedB2Training: true,
        qualifiedAssistance: true,
        receivedLoans: true,
        receivedScholarships: true,
        supportSources: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DietrichFinancialSupport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDietrichFinancialSupport(
    @common.Param() params: DietrichFinancialSupportWhereUniqueInput,
    @common.Body() data: DietrichFinancialSupportUpdateInput
  ): Promise<DietrichFinancialSupport | null> {
    try {
      return await this.service.updateDietrichFinancialSupport({
        where: params,
        data: data,
        select: {
          applicationId: true,
          id: true,
          interestedB2Training: true,
          qualifiedAssistance: true,
          receivedLoans: true,
          receivedScholarships: true,
          supportSources: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DietrichFinancialSupport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDietrichFinancialSupport(
    @common.Param() params: DietrichFinancialSupportWhereUniqueInput
  ): Promise<DietrichFinancialSupport | null> {
    try {
      return await this.service.deleteDietrichFinancialSupport({
        where: params,
        select: {
          applicationId: true,
          id: true,
          interestedB2Training: true,
          qualifiedAssistance: true,
          receivedLoans: true,
          receivedScholarships: true,
          supportSources: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
