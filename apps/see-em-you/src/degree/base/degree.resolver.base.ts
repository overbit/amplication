/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateDegreeArgs } from "./CreateDegreeArgs";
import { UpdateDegreeArgs } from "./UpdateDegreeArgs";
import { DeleteDegreeArgs } from "./DeleteDegreeArgs";
import { DegreeCountArgs } from "./DegreeCountArgs";
import { DegreeFindManyArgs } from "./DegreeFindManyArgs";
import { DegreeFindUniqueArgs } from "./DegreeFindUniqueArgs";
import { Degree } from "./Degree";
import { ProgramModelFindManyArgs } from "../../programModel/base/ProgramModelFindManyArgs";
import { ProgramModel } from "../../programModel/base/ProgramModel";
import { DegreeService } from "../degree.service";
@graphql.Resolver(() => Degree)
export class DegreeResolverBase {
  constructor(protected readonly service: DegreeService) {}

  async _degreesMeta(
    @graphql.Args() args: DegreeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Degree])
  async degrees(@graphql.Args() args: DegreeFindManyArgs): Promise<Degree[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Degree, { nullable: true })
  async degree(
    @graphql.Args() args: DegreeFindUniqueArgs
  ): Promise<Degree | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Degree)
  async createDegree(@graphql.Args() args: CreateDegreeArgs): Promise<Degree> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Degree)
  async updateDegree(
    @graphql.Args() args: UpdateDegreeArgs
  ): Promise<Degree | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Degree)
  async deleteDegree(
    @graphql.Args() args: DeleteDegreeArgs
  ): Promise<Degree | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [ProgramModel], { name: "programs" })
  async resolveFieldPrograms(
    @graphql.Parent() parent: Degree,
    @graphql.Args() args: ProgramModelFindManyArgs
  ): Promise<ProgramModel[]> {
    const results = await this.service.findPrograms(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
