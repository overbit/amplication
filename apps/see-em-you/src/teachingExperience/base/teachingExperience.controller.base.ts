/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TeachingExperienceService } from "../teachingExperience.service";
import { TeachingExperienceCreateInput } from "./TeachingExperienceCreateInput";
import { TeachingExperience } from "./TeachingExperience";
import { TeachingExperienceFindManyArgs } from "./TeachingExperienceFindManyArgs";
import { TeachingExperienceWhereUniqueInput } from "./TeachingExperienceWhereUniqueInput";
import { TeachingExperienceUpdateInput } from "./TeachingExperienceUpdateInput";

export class TeachingExperienceControllerBase {
  constructor(protected readonly service: TeachingExperienceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TeachingExperience })
  async createTeachingExperience(
    @common.Body() data: TeachingExperienceCreateInput
  ): Promise<TeachingExperience> {
    return await this.service.createTeachingExperience({
      data: data,
      select: {
        applicationId: true,
        orderEntered: true,
        institution: true,
        address: true,
        coursesTaught: true,
        startDate: true,
        endDate: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TeachingExperience] })
  @ApiNestedQuery(TeachingExperienceFindManyArgs)
  async teachingExperiences(
    @common.Req() request: Request
  ): Promise<TeachingExperience[]> {
    const args = plainToClass(TeachingExperienceFindManyArgs, request.query);
    return this.service.teachingExperiences({
      ...args,
      select: {
        applicationId: true,
        orderEntered: true,
        institution: true,
        address: true,
        coursesTaught: true,
        startDate: true,
        endDate: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TeachingExperience })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async teachingExperience(
    @common.Param() params: TeachingExperienceWhereUniqueInput
  ): Promise<TeachingExperience | null> {
    const result = await this.service.teachingExperience({
      where: params,
      select: {
        applicationId: true,
        orderEntered: true,
        institution: true,
        address: true,
        coursesTaught: true,
        startDate: true,
        endDate: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TeachingExperience })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTeachingExperience(
    @common.Param() params: TeachingExperienceWhereUniqueInput,
    @common.Body() data: TeachingExperienceUpdateInput
  ): Promise<TeachingExperience | null> {
    try {
      return await this.service.updateTeachingExperience({
        where: params,
        data: data,
        select: {
          applicationId: true,
          orderEntered: true,
          institution: true,
          address: true,
          coursesTaught: true,
          startDate: true,
          endDate: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TeachingExperience })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTeachingExperience(
    @common.Param() params: TeachingExperienceWhereUniqueInput
  ): Promise<TeachingExperience | null> {
    try {
      return await this.service.deleteTeachingExperience({
        where: params,
        select: {
          applicationId: true,
          orderEntered: true,
          institution: true,
          address: true,
          coursesTaught: true,
          startDate: true,
          endDate: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
