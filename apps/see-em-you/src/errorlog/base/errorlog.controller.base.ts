/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ErrorlogService } from "../errorlog.service";
import { ErrorlogCreateInput } from "./ErrorlogCreateInput";
import { Errorlog } from "./Errorlog";
import { ErrorlogFindManyArgs } from "./ErrorlogFindManyArgs";
import { ErrorlogWhereUniqueInput } from "./ErrorlogWhereUniqueInput";
import { ErrorlogUpdateInput } from "./ErrorlogUpdateInput";

export class ErrorlogControllerBase {
  constructor(protected readonly service: ErrorlogService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Errorlog })
  async createErrorlog(
    @common.Body() data: ErrorlogCreateInput
  ): Promise<Errorlog> {
    return await this.service.createErrorlog({
      data: data,
      select: {
        usersId: true,
        luUsersUsertypesId: true,
        usertypeId: true,
        applicationId: true,
        client: true,
        timestamp: true,
        message: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Errorlog] })
  @ApiNestedQuery(ErrorlogFindManyArgs)
  async errorlogs(@common.Req() request: Request): Promise<Errorlog[]> {
    const args = plainToClass(ErrorlogFindManyArgs, request.query);
    return this.service.errorlogs({
      ...args,
      select: {
        usersId: true,
        luUsersUsertypesId: true,
        usertypeId: true,
        applicationId: true,
        client: true,
        timestamp: true,
        message: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Errorlog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async errorlog(
    @common.Param() params: ErrorlogWhereUniqueInput
  ): Promise<Errorlog | null> {
    const result = await this.service.errorlog({
      where: params,
      select: {
        usersId: true,
        luUsersUsertypesId: true,
        usertypeId: true,
        applicationId: true,
        client: true,
        timestamp: true,
        message: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Errorlog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateErrorlog(
    @common.Param() params: ErrorlogWhereUniqueInput,
    @common.Body() data: ErrorlogUpdateInput
  ): Promise<Errorlog | null> {
    try {
      return await this.service.updateErrorlog({
        where: params,
        data: data,
        select: {
          usersId: true,
          luUsersUsertypesId: true,
          usertypeId: true,
          applicationId: true,
          client: true,
          timestamp: true,
          message: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Errorlog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteErrorlog(
    @common.Param() params: ErrorlogWhereUniqueInput
  ): Promise<Errorlog | null> {
    try {
      return await this.service.deleteErrorlog({
        where: params,
        select: {
          usersId: true,
          luUsersUsertypesId: true,
          usertypeId: true,
          applicationId: true,
          client: true,
          timestamp: true,
          message: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
