/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateErrorlogArgs } from "./CreateErrorlogArgs";
import { UpdateErrorlogArgs } from "./UpdateErrorlogArgs";
import { DeleteErrorlogArgs } from "./DeleteErrorlogArgs";
import { ErrorlogCountArgs } from "./ErrorlogCountArgs";
import { ErrorlogFindManyArgs } from "./ErrorlogFindManyArgs";
import { ErrorlogFindUniqueArgs } from "./ErrorlogFindUniqueArgs";
import { Errorlog } from "./Errorlog";
import { ErrorlogService } from "../errorlog.service";
@graphql.Resolver(() => Errorlog)
export class ErrorlogResolverBase {
  constructor(protected readonly service: ErrorlogService) {}

  async _errorlogsMeta(
    @graphql.Args() args: ErrorlogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Errorlog])
  async errorlogs(
    @graphql.Args() args: ErrorlogFindManyArgs
  ): Promise<Errorlog[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Errorlog, { nullable: true })
  async errorlog(
    @graphql.Args() args: ErrorlogFindUniqueArgs
  ): Promise<Errorlog | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Errorlog)
  async createErrorlog(
    @graphql.Args() args: CreateErrorlogArgs
  ): Promise<Errorlog> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Errorlog)
  async updateErrorlog(
    @graphql.Args() args: UpdateErrorlogArgs
  ): Promise<Errorlog | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Errorlog)
  async deleteErrorlog(
    @graphql.Args() args: DeleteErrorlogArgs
  ): Promise<Errorlog | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
