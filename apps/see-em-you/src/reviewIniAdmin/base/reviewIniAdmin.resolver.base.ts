/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ReviewIniAdmin } from "./ReviewIniAdmin";
import { ReviewIniAdminCountArgs } from "./ReviewIniAdminCountArgs";
import { ReviewIniAdminFindManyArgs } from "./ReviewIniAdminFindManyArgs";
import { ReviewIniAdminFindUniqueArgs } from "./ReviewIniAdminFindUniqueArgs";
import { CreateReviewIniAdminArgs } from "./CreateReviewIniAdminArgs";
import { UpdateReviewIniAdminArgs } from "./UpdateReviewIniAdminArgs";
import { DeleteReviewIniAdminArgs } from "./DeleteReviewIniAdminArgs";
import { ReviewIniAdminService } from "../reviewIniAdmin.service";
@graphql.Resolver(() => ReviewIniAdmin)
export class ReviewIniAdminResolverBase {
  constructor(protected readonly service: ReviewIniAdminService) {}

  async _reviewIniAdminsMeta(
    @graphql.Args() args: ReviewIniAdminCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ReviewIniAdmin])
  async reviewIniAdmins(
    @graphql.Args() args: ReviewIniAdminFindManyArgs
  ): Promise<ReviewIniAdmin[]> {
    return this.service.reviewIniAdmins(args);
  }

  @graphql.Query(() => ReviewIniAdmin, { nullable: true })
  async reviewIniAdmin(
    @graphql.Args() args: ReviewIniAdminFindUniqueArgs
  ): Promise<ReviewIniAdmin | null> {
    const result = await this.service.reviewIniAdmin(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ReviewIniAdmin)
  async createReviewIniAdmin(
    @graphql.Args() args: CreateReviewIniAdminArgs
  ): Promise<ReviewIniAdmin> {
    return await this.service.createReviewIniAdmin({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ReviewIniAdmin)
  async updateReviewIniAdmin(
    @graphql.Args() args: UpdateReviewIniAdminArgs
  ): Promise<ReviewIniAdmin | null> {
    try {
      return await this.service.updateReviewIniAdmin({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReviewIniAdmin)
  async deleteReviewIniAdmin(
    @graphql.Args() args: DeleteReviewIniAdminArgs
  ): Promise<ReviewIniAdmin | null> {
    try {
      return await this.service.deleteReviewIniAdmin(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
