/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LuUsersUsertypesHistoryService } from "../luUsersUsertypesHistory.service";
import { LuUsersUsertypesHistoryCreateInput } from "./LuUsersUsertypesHistoryCreateInput";
import { LuUsersUsertypesHistory } from "./LuUsersUsertypesHistory";
import { LuUsersUsertypesHistoryFindManyArgs } from "./LuUsersUsertypesHistoryFindManyArgs";
import { LuUsersUsertypesHistoryWhereUniqueInput } from "./LuUsersUsertypesHistoryWhereUniqueInput";
import { LuUsersUsertypesHistoryUpdateInput } from "./LuUsersUsertypesHistoryUpdateInput";

export class LuUsersUsertypesHistoryControllerBase {
  constructor(protected readonly service: LuUsersUsertypesHistoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LuUsersUsertypesHistory })
  async createLuUsersUsertypesHistory(
    @common.Body() data: LuUsersUsertypesHistoryCreateInput
  ): Promise<LuUsersUsertypesHistory> {
    return await this.service.createLuUsersUsertypesHistory({
      data: data,
      select: {
        deleteTimestamp: true,
        deleteUsersId: true,
        id: true,
        userId: true,
        usertypeId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LuUsersUsertypesHistory] })
  @ApiNestedQuery(LuUsersUsertypesHistoryFindManyArgs)
  async luUsersUsertypesHistories(
    @common.Req() request: Request
  ): Promise<LuUsersUsertypesHistory[]> {
    const args = plainToClass(
      LuUsersUsertypesHistoryFindManyArgs,
      request.query
    );
    return this.service.luUsersUsertypesHistories({
      ...args,
      select: {
        deleteTimestamp: true,
        deleteUsersId: true,
        id: true,
        userId: true,
        usertypeId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LuUsersUsertypesHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async luUsersUsertypesHistory(
    @common.Param() params: LuUsersUsertypesHistoryWhereUniqueInput
  ): Promise<LuUsersUsertypesHistory | null> {
    const result = await this.service.luUsersUsertypesHistory({
      where: params,
      select: {
        deleteTimestamp: true,
        deleteUsersId: true,
        id: true,
        userId: true,
        usertypeId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LuUsersUsertypesHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLuUsersUsertypesHistory(
    @common.Param() params: LuUsersUsertypesHistoryWhereUniqueInput,
    @common.Body() data: LuUsersUsertypesHistoryUpdateInput
  ): Promise<LuUsersUsertypesHistory | null> {
    try {
      return await this.service.updateLuUsersUsertypesHistory({
        where: params,
        data: data,
        select: {
          deleteTimestamp: true,
          deleteUsersId: true,
          id: true,
          userId: true,
          usertypeId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LuUsersUsertypesHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLuUsersUsertypesHistory(
    @common.Param() params: LuUsersUsertypesHistoryWhereUniqueInput
  ): Promise<LuUsersUsertypesHistory | null> {
    try {
      return await this.service.deleteLuUsersUsertypesHistory({
        where: params,
        select: {
          deleteTimestamp: true,
          deleteUsersId: true,
          id: true,
          userId: true,
          usertypeId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
