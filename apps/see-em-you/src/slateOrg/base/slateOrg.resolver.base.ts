/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SlateOrg } from "./SlateOrg";
import { SlateOrgCountArgs } from "./SlateOrgCountArgs";
import { SlateOrgFindManyArgs } from "./SlateOrgFindManyArgs";
import { SlateOrgFindUniqueArgs } from "./SlateOrgFindUniqueArgs";
import { CreateSlateOrgArgs } from "./CreateSlateOrgArgs";
import { UpdateSlateOrgArgs } from "./UpdateSlateOrgArgs";
import { DeleteSlateOrgArgs } from "./DeleteSlateOrgArgs";
import { SlateOrgService } from "../slateOrg.service";
@graphql.Resolver(() => SlateOrg)
export class SlateOrgResolverBase {
  constructor(protected readonly service: SlateOrgService) {}

  async _slateOrgsMeta(
    @graphql.Args() args: SlateOrgCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SlateOrg])
  async slateOrgs(
    @graphql.Args() args: SlateOrgFindManyArgs
  ): Promise<SlateOrg[]> {
    return this.service.slateOrgs(args);
  }

  @graphql.Query(() => SlateOrg, { nullable: true })
  async slateOrg(
    @graphql.Args() args: SlateOrgFindUniqueArgs
  ): Promise<SlateOrg | null> {
    const result = await this.service.slateOrg(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SlateOrg)
  async createSlateOrg(
    @graphql.Args() args: CreateSlateOrgArgs
  ): Promise<SlateOrg> {
    return await this.service.createSlateOrg({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SlateOrg)
  async updateSlateOrg(
    @graphql.Args() args: UpdateSlateOrgArgs
  ): Promise<SlateOrg | null> {
    try {
      return await this.service.updateSlateOrg({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SlateOrg)
  async deleteSlateOrg(
    @graphql.Args() args: DeleteSlateOrgArgs
  ): Promise<SlateOrg | null> {
    try {
      return await this.service.deleteSlateOrg(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
