/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SlateOrgService } from "../slateOrg.service";
import { SlateOrgCreateInput } from "./SlateOrgCreateInput";
import { SlateOrg } from "./SlateOrg";
import { SlateOrgFindManyArgs } from "./SlateOrgFindManyArgs";
import { SlateOrgWhereUniqueInput } from "./SlateOrgWhereUniqueInput";
import { SlateOrgUpdateInput } from "./SlateOrgUpdateInput";

export class SlateOrgControllerBase {
  constructor(protected readonly service: SlateOrgService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SlateOrg })
  async createSlateOrg(
    @common.Body() data: SlateOrgCreateInput
  ): Promise<SlateOrg> {
    return await this.service.createSlateOrg({
      data: data,
      select: {
        category: true,
        city: true,
        country: true,
        id: true,
        localName: true,
        numActiveApplicationsWithSchoolKeyInDatabase: true,
        numRecordsWithSchoolKeyInDatabase: true,
        orgType: true,
        postal: true,
        region: true,
        sharedName: true,
        status: true,
        street: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SlateOrg] })
  @ApiNestedQuery(SlateOrgFindManyArgs)
  async slateOrgs(@common.Req() request: Request): Promise<SlateOrg[]> {
    const args = plainToClass(SlateOrgFindManyArgs, request.query);
    return this.service.slateOrgs({
      ...args,
      select: {
        category: true,
        city: true,
        country: true,
        id: true,
        localName: true,
        numActiveApplicationsWithSchoolKeyInDatabase: true,
        numRecordsWithSchoolKeyInDatabase: true,
        orgType: true,
        postal: true,
        region: true,
        sharedName: true,
        status: true,
        street: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SlateOrg })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async slateOrg(
    @common.Param() params: SlateOrgWhereUniqueInput
  ): Promise<SlateOrg | null> {
    const result = await this.service.slateOrg({
      where: params,
      select: {
        category: true,
        city: true,
        country: true,
        id: true,
        localName: true,
        numActiveApplicationsWithSchoolKeyInDatabase: true,
        numRecordsWithSchoolKeyInDatabase: true,
        orgType: true,
        postal: true,
        region: true,
        sharedName: true,
        status: true,
        street: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SlateOrg })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSlateOrg(
    @common.Param() params: SlateOrgWhereUniqueInput,
    @common.Body() data: SlateOrgUpdateInput
  ): Promise<SlateOrg | null> {
    try {
      return await this.service.updateSlateOrg({
        where: params,
        data: data,
        select: {
          category: true,
          city: true,
          country: true,
          id: true,
          localName: true,
          numActiveApplicationsWithSchoolKeyInDatabase: true,
          numRecordsWithSchoolKeyInDatabase: true,
          orgType: true,
          postal: true,
          region: true,
          sharedName: true,
          status: true,
          street: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SlateOrg })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSlateOrg(
    @common.Param() params: SlateOrgWhereUniqueInput
  ): Promise<SlateOrg | null> {
    try {
      return await this.service.deleteSlateOrg({
        where: params,
        select: {
          category: true,
          city: true,
          country: true,
          id: true,
          localName: true,
          numActiveApplicationsWithSchoolKeyInDatabase: true,
          numRecordsWithSchoolKeyInDatabase: true,
          orgType: true,
          postal: true,
          region: true,
          sharedName: true,
          status: true,
          street: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
