/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CcTransaction as PrismaCcTransaction } from "@prisma/client";

export class CcTransactionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.CcTransactionCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.CcTransactionCountArgs>
  ): Promise<number> {
    return this.prisma.ccTransaction.count(args);
  }

  async ccTransactions<T extends Prisma.CcTransactionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CcTransactionFindManyArgs>
  ): Promise<PrismaCcTransaction[]> {
    return this.prisma.ccTransaction.findMany(args);
  }
  async ccTransaction<T extends Prisma.CcTransactionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CcTransactionFindUniqueArgs>
  ): Promise<PrismaCcTransaction | null> {
    return this.prisma.ccTransaction.findUnique(args);
  }
  async createCcTransaction<T extends Prisma.CcTransactionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CcTransactionCreateArgs>
  ): Promise<PrismaCcTransaction> {
    return this.prisma.ccTransaction.create<T>(args);
  }
  async updateCcTransaction<T extends Prisma.CcTransactionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CcTransactionUpdateArgs>
  ): Promise<PrismaCcTransaction> {
    return this.prisma.ccTransaction.update<T>(args);
  }
  async deleteCcTransaction<T extends Prisma.CcTransactionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CcTransactionDeleteArgs>
  ): Promise<PrismaCcTransaction> {
    return this.prisma.ccTransaction.delete(args);
  }
}
