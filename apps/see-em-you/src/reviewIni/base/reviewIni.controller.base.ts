/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReviewIniService } from "../reviewIni.service";
import { ReviewIniCreateInput } from "./ReviewIniCreateInput";
import { ReviewIniWhereInput } from "./ReviewIniWhereInput";
import { ReviewIniWhereUniqueInput } from "./ReviewIniWhereUniqueInput";
import { ReviewIniFindManyArgs } from "./ReviewIniFindManyArgs";
import { ReviewIniUpdateInput } from "./ReviewIniUpdateInput";
import { ReviewIni } from "./ReviewIni";

export class ReviewIniControllerBase {
  constructor(protected readonly service: ReviewIniService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ReviewIni })
  async create(@common.Body() data: ReviewIniCreateInput): Promise<ReviewIni> {
    return await this.service.create({
      data: data,
      select: {
        academicComments: true,
        academicProgramComments: true,
        academicRating: true,
        additionalComments: true,
        alternativeProgram: true,
        applicationId: true,
        departmentId: true,
        id: true,
        leadershipComments: true,
        leadershipRating: true,
        overallRating: true,
        researchComments: true,
        researchRating: true,
        reviewerId: true,
        round: true,
        technicalComments: true,
        technicalRating: true,
        ugProgramComments: true,
        workExperienceComments: true,
        workExperienceRating: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ReviewIni] })
  @ApiNestedQuery(ReviewIniFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<ReviewIni[]> {
    const args = plainToClass(ReviewIniFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        academicComments: true,
        academicProgramComments: true,
        academicRating: true,
        additionalComments: true,
        alternativeProgram: true,
        applicationId: true,
        departmentId: true,
        id: true,
        leadershipComments: true,
        leadershipRating: true,
        overallRating: true,
        researchComments: true,
        researchRating: true,
        reviewerId: true,
        round: true,
        technicalComments: true,
        technicalRating: true,
        ugProgramComments: true,
        workExperienceComments: true,
        workExperienceRating: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ReviewIni })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: ReviewIniWhereUniqueInput
  ): Promise<ReviewIni | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        academicComments: true,
        academicProgramComments: true,
        academicRating: true,
        additionalComments: true,
        alternativeProgram: true,
        applicationId: true,
        departmentId: true,
        id: true,
        leadershipComments: true,
        leadershipRating: true,
        overallRating: true,
        researchComments: true,
        researchRating: true,
        reviewerId: true,
        round: true,
        technicalComments: true,
        technicalRating: true,
        ugProgramComments: true,
        workExperienceComments: true,
        workExperienceRating: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ReviewIni })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: ReviewIniWhereUniqueInput,
    @common.Body() data: ReviewIniUpdateInput
  ): Promise<ReviewIni | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          academicComments: true,
          academicProgramComments: true,
          academicRating: true,
          additionalComments: true,
          alternativeProgram: true,
          applicationId: true,
          departmentId: true,
          id: true,
          leadershipComments: true,
          leadershipRating: true,
          overallRating: true,
          researchComments: true,
          researchRating: true,
          reviewerId: true,
          round: true,
          technicalComments: true,
          technicalRating: true,
          ugProgramComments: true,
          workExperienceComments: true,
          workExperienceRating: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ReviewIni })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: ReviewIniWhereUniqueInput
  ): Promise<ReviewIni | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          academicComments: true,
          academicProgramComments: true,
          academicRating: true,
          additionalComments: true,
          alternativeProgram: true,
          applicationId: true,
          departmentId: true,
          id: true,
          leadershipComments: true,
          leadershipRating: true,
          overallRating: true,
          researchComments: true,
          researchRating: true,
          reviewerId: true,
          round: true,
          technicalComments: true,
          technicalRating: true,
          ugProgramComments: true,
          workExperienceComments: true,
          workExperienceRating: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
