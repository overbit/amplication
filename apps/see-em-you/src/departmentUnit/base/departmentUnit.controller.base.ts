/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DepartmentUnitService } from "../departmentUnit.service";
import { DepartmentUnitCreateInput } from "./DepartmentUnitCreateInput";
import { DepartmentUnit } from "./DepartmentUnit";
import { DepartmentUnitFindManyArgs } from "./DepartmentUnitFindManyArgs";
import { DepartmentUnitWhereUniqueInput } from "./DepartmentUnitWhereUniqueInput";
import { DepartmentUnitUpdateInput } from "./DepartmentUnitUpdateInput";

export class DepartmentUnitControllerBase {
  constructor(protected readonly service: DepartmentUnitService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DepartmentUnit })
  async createDepartmentUnit(
    @common.Body() data: DepartmentUnitCreateInput
  ): Promise<DepartmentUnit> {
    return await this.service.createDepartmentUnit({
      data: data,
      select: {
        departmentId: true,
        unitId: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DepartmentUnit] })
  @ApiNestedQuery(DepartmentUnitFindManyArgs)
  async departmentUnits(
    @common.Req() request: Request
  ): Promise<DepartmentUnit[]> {
    const args = plainToClass(DepartmentUnitFindManyArgs, request.query);
    return this.service.departmentUnits({
      ...args,
      select: {
        departmentId: true,
        unitId: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DepartmentUnit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async departmentUnit(
    @common.Param() params: DepartmentUnitWhereUniqueInput
  ): Promise<DepartmentUnit | null> {
    const result = await this.service.departmentUnit({
      where: params,
      select: {
        departmentId: true,
        unitId: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DepartmentUnit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDepartmentUnit(
    @common.Param() params: DepartmentUnitWhereUniqueInput,
    @common.Body() data: DepartmentUnitUpdateInput
  ): Promise<DepartmentUnit | null> {
    try {
      return await this.service.updateDepartmentUnit({
        where: params,
        data: data,
        select: {
          departmentId: true,
          unitId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DepartmentUnit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDepartmentUnit(
    @common.Param() params: DepartmentUnitWhereUniqueInput
  ): Promise<DepartmentUnit | null> {
    try {
      return await this.service.deleteDepartmentUnit({
        where: params,
        select: {
          departmentId: true,
          unitId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
