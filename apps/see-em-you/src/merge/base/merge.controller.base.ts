/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MergeService } from "../merge.service";
import { MergeCreateInput } from "./MergeCreateInput";
import { Merge } from "./Merge";
import { MergeFindManyArgs } from "./MergeFindManyArgs";
import { MergeWhereUniqueInput } from "./MergeWhereUniqueInput";
import { MergeUpdateInput } from "./MergeUpdateInput";

export class MergeControllerBase {
  constructor(protected readonly service: MergeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Merge })
  async createMerge(@common.Body() data: MergeCreateInput): Promise<Merge> {
    return await this.service.createMerge({
      data: data,
      select: {
        mergeDate: true,
        applicationId: true,
        merged: true,
        errorField: true,
        message: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Merge] })
  @ApiNestedQuery(MergeFindManyArgs)
  async merges(@common.Req() request: Request): Promise<Merge[]> {
    const args = plainToClass(MergeFindManyArgs, request.query);
    return this.service.merges({
      ...args,
      select: {
        mergeDate: true,
        applicationId: true,
        merged: true,
        errorField: true,
        message: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Merge })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async merge(
    @common.Param() params: MergeWhereUniqueInput
  ): Promise<Merge | null> {
    const result = await this.service.merge({
      where: params,
      select: {
        mergeDate: true,
        applicationId: true,
        merged: true,
        errorField: true,
        message: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Merge })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMerge(
    @common.Param() params: MergeWhereUniqueInput,
    @common.Body() data: MergeUpdateInput
  ): Promise<Merge | null> {
    try {
      return await this.service.updateMerge({
        where: params,
        data: data,
        select: {
          mergeDate: true,
          applicationId: true,
          merged: true,
          errorField: true,
          message: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Merge })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMerge(
    @common.Param() params: MergeWhereUniqueInput
  ): Promise<Merge | null> {
    try {
      return await this.service.deleteMerge({
        where: params,
        select: {
          mergeDate: true,
          applicationId: true,
          merged: true,
          errorField: true,
          message: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
