/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RecommenderInfo } from "./RecommenderInfo";
import { RecommenderInfoCountArgs } from "./RecommenderInfoCountArgs";
import { RecommenderInfoFindManyArgs } from "./RecommenderInfoFindManyArgs";
import { RecommenderInfoFindUniqueArgs } from "./RecommenderInfoFindUniqueArgs";
import { CreateRecommenderInfoArgs } from "./CreateRecommenderInfoArgs";
import { UpdateRecommenderInfoArgs } from "./UpdateRecommenderInfoArgs";
import { DeleteRecommenderInfoArgs } from "./DeleteRecommenderInfoArgs";
import { RecommenderInfoService } from "../recommenderInfo.service";
@graphql.Resolver(() => RecommenderInfo)
export class RecommenderInfoResolverBase {
  constructor(protected readonly service: RecommenderInfoService) {}

  async _recommenderInfosMeta(
    @graphql.Args() args: RecommenderInfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RecommenderInfo])
  async recommenderInfos(
    @graphql.Args() args: RecommenderInfoFindManyArgs
  ): Promise<RecommenderInfo[]> {
    return this.service.recommenderInfos(args);
  }

  @graphql.Query(() => RecommenderInfo, { nullable: true })
  async recommenderInfo(
    @graphql.Args() args: RecommenderInfoFindUniqueArgs
  ): Promise<RecommenderInfo | null> {
    const result = await this.service.recommenderInfo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RecommenderInfo)
  async createRecommenderInfo(
    @graphql.Args() args: CreateRecommenderInfoArgs
  ): Promise<RecommenderInfo> {
    return await this.service.createRecommenderInfo({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => RecommenderInfo)
  async updateRecommenderInfo(
    @graphql.Args() args: UpdateRecommenderInfoArgs
  ): Promise<RecommenderInfo | null> {
    try {
      return await this.service.updateRecommenderInfo({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RecommenderInfo)
  async deleteRecommenderInfo(
    @graphql.Args() args: DeleteRecommenderInfoArgs
  ): Promise<RecommenderInfo | null> {
    try {
      return await this.service.deleteRecommenderInfo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
