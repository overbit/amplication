/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateLuProgramsDepartmentArgs } from "./CreateLuProgramsDepartmentArgs";
import { UpdateLuProgramsDepartmentArgs } from "./UpdateLuProgramsDepartmentArgs";
import { DeleteLuProgramsDepartmentArgs } from "./DeleteLuProgramsDepartmentArgs";
import { LuProgramsDepartmentCountArgs } from "./LuProgramsDepartmentCountArgs";
import { LuProgramsDepartmentFindManyArgs } from "./LuProgramsDepartmentFindManyArgs";
import { LuProgramsDepartmentFindUniqueArgs } from "./LuProgramsDepartmentFindUniqueArgs";
import { LuProgramsDepartment } from "./LuProgramsDepartment";
import { LuProgramsDepartmentService } from "../luProgramsDepartment.service";
@graphql.Resolver(() => LuProgramsDepartment)
export class LuProgramsDepartmentResolverBase {
  constructor(protected readonly service: LuProgramsDepartmentService) {}

  async _luProgramsDepartmentsMeta(
    @graphql.Args() args: LuProgramsDepartmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LuProgramsDepartment])
  async luProgramsDepartments(
    @graphql.Args() args: LuProgramsDepartmentFindManyArgs
  ): Promise<LuProgramsDepartment[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => LuProgramsDepartment, { nullable: true })
  async luProgramsDepartment(
    @graphql.Args() args: LuProgramsDepartmentFindUniqueArgs
  ): Promise<LuProgramsDepartment | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LuProgramsDepartment)
  async createLuProgramsDepartment(
    @graphql.Args() args: CreateLuProgramsDepartmentArgs
  ): Promise<LuProgramsDepartment> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LuProgramsDepartment)
  async updateLuProgramsDepartment(
    @graphql.Args() args: UpdateLuProgramsDepartmentArgs
  ): Promise<LuProgramsDepartment | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LuProgramsDepartment)
  async deleteLuProgramsDepartment(
    @graphql.Args() args: DeleteLuProgramsDepartmentArgs
  ): Promise<LuProgramsDepartment | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
