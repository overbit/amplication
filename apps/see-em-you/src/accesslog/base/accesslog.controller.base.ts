/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AccesslogService } from "../accesslog.service";
import { AccesslogCreateInput } from "./AccesslogCreateInput";
import { Accesslog } from "./Accesslog";
import { AccesslogFindManyArgs } from "./AccesslogFindManyArgs";
import { AccesslogWhereUniqueInput } from "./AccesslogWhereUniqueInput";
import { AccesslogUpdateInput } from "./AccesslogUpdateInput";

export class AccesslogControllerBase {
  constructor(protected readonly service: AccesslogService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Accesslog })
  async createAccesslog(
    @common.Body() data: AccesslogCreateInput
  ): Promise<Accesslog> {
    return await this.service.createAccesslog({
      data: data,
      select: {
        id: true,
        usersId: true,
        luUsersUsertypesId: true,
        usertypeId: true,
        applicationId: true,
        client: true,
        eventtime: true,
        activity: true,
        domain: true,
        referer: true,
        xforward: true,
        sa: true,
        ra: true,
        lastsrv: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Accesslog] })
  @ApiNestedQuery(AccesslogFindManyArgs)
  async accesslogs(@common.Req() request: Request): Promise<Accesslog[]> {
    const args = plainToClass(AccesslogFindManyArgs, request.query);
    return this.service.accesslogs({
      ...args,
      select: {
        id: true,
        usersId: true,
        luUsersUsertypesId: true,
        usertypeId: true,
        applicationId: true,
        client: true,
        eventtime: true,
        activity: true,
        domain: true,
        referer: true,
        xforward: true,
        sa: true,
        ra: true,
        lastsrv: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Accesslog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async accesslog(
    @common.Param() params: AccesslogWhereUniqueInput
  ): Promise<Accesslog | null> {
    const result = await this.service.accesslog({
      where: params,
      select: {
        id: true,
        usersId: true,
        luUsersUsertypesId: true,
        usertypeId: true,
        applicationId: true,
        client: true,
        eventtime: true,
        activity: true,
        domain: true,
        referer: true,
        xforward: true,
        sa: true,
        ra: true,
        lastsrv: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Accesslog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAccesslog(
    @common.Param() params: AccesslogWhereUniqueInput,
    @common.Body() data: AccesslogUpdateInput
  ): Promise<Accesslog | null> {
    try {
      return await this.service.updateAccesslog({
        where: params,
        data: data,
        select: {
          id: true,
          usersId: true,
          luUsersUsertypesId: true,
          usertypeId: true,
          applicationId: true,
          client: true,
          eventtime: true,
          activity: true,
          domain: true,
          referer: true,
          xforward: true,
          sa: true,
          ra: true,
          lastsrv: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Accesslog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAccesslog(
    @common.Param() params: AccesslogWhereUniqueInput
  ): Promise<Accesslog | null> {
    try {
      return await this.service.deleteAccesslog({
        where: params,
        select: {
          id: true,
          usersId: true,
          luUsersUsertypesId: true,
          usertypeId: true,
          applicationId: true,
          client: true,
          eventtime: true,
          activity: true,
          domain: true,
          referer: true,
          xforward: true,
          sa: true,
          ra: true,
          lastsrv: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
