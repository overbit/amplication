/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DietrichSharingService } from "../dietrichSharing.service";
import { DietrichSharingCreateInput } from "./DietrichSharingCreateInput";
import { DietrichSharing } from "./DietrichSharing";
import { DietrichSharingFindManyArgs } from "./DietrichSharingFindManyArgs";
import { DietrichSharingWhereUniqueInput } from "./DietrichSharingWhereUniqueInput";
import { DietrichSharingUpdateInput } from "./DietrichSharingUpdateInput";

export class DietrichSharingControllerBase {
  constructor(protected readonly service: DietrichSharingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DietrichSharing })
  async createDietrichSharing(
    @common.Body() data: DietrichSharingCreateInput
  ): Promise<DietrichSharing> {
    return await this.service.createDietrichSharing({
      data: data,
      select: {
        applicationId: true,
        id: true,
        sds: true,
        tepper: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DietrichSharing] })
  @ApiNestedQuery(DietrichSharingFindManyArgs)
  async dietrichSharings(
    @common.Req() request: Request
  ): Promise<DietrichSharing[]> {
    const args = plainToClass(DietrichSharingFindManyArgs, request.query);
    return this.service.dietrichSharings({
      ...args,
      select: {
        applicationId: true,
        id: true,
        sds: true,
        tepper: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DietrichSharing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dietrichSharing(
    @common.Param() params: DietrichSharingWhereUniqueInput
  ): Promise<DietrichSharing | null> {
    const result = await this.service.dietrichSharing({
      where: params,
      select: {
        applicationId: true,
        id: true,
        sds: true,
        tepper: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DietrichSharing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDietrichSharing(
    @common.Param() params: DietrichSharingWhereUniqueInput,
    @common.Body() data: DietrichSharingUpdateInput
  ): Promise<DietrichSharing | null> {
    try {
      return await this.service.updateDietrichSharing({
        where: params,
        data: data,
        select: {
          applicationId: true,
          id: true,
          sds: true,
          tepper: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DietrichSharing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDietrichSharing(
    @common.Param() params: DietrichSharingWhereUniqueInput
  ): Promise<DietrichSharing | null> {
    try {
      return await this.service.deleteDietrichSharing({
        where: params,
        select: {
          applicationId: true,
          id: true,
          sds: true,
          tepper: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
