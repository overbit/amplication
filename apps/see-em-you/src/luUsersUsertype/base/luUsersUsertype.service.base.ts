/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  LuUsersUsertype as PrismaLuUsersUsertype,
  MhciPrereqsConversationComment as PrismaMhciPrereqsConversationComment,
  MhciPrereqsCourse as PrismaMhciPrereqsCourse,
  MhciPrereqsDesignPortfolio as PrismaMhciPrereqsDesignPortfolio,
  MhciPrereqsProgrammingTest as PrismaMhciPrereqsProgrammingTest,
  User as PrismaUser,
  MhciPrereqsProgrammingSample as PrismaMhciPrereqsProgrammingSample,
} from "@prisma/client";

export class LuUsersUsertypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.LuUsersUsertypeCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.LuUsersUsertypeCountArgs>
  ): Promise<number> {
    return this.prisma.luUsersUsertype.count(args);
  }

  async luUsersUsertypes<T extends Prisma.LuUsersUsertypeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LuUsersUsertypeFindManyArgs>
  ): Promise<PrismaLuUsersUsertype[]> {
    return this.prisma.luUsersUsertype.findMany(args);
  }
  async luUsersUsertype<T extends Prisma.LuUsersUsertypeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LuUsersUsertypeFindUniqueArgs>
  ): Promise<PrismaLuUsersUsertype | null> {
    return this.prisma.luUsersUsertype.findUnique(args);
  }
  async createLuUsersUsertype<T extends Prisma.LuUsersUsertypeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LuUsersUsertypeCreateArgs>
  ): Promise<PrismaLuUsersUsertype> {
    return this.prisma.luUsersUsertype.create<T>(args);
  }
  async updateLuUsersUsertype<T extends Prisma.LuUsersUsertypeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LuUsersUsertypeUpdateArgs>
  ): Promise<PrismaLuUsersUsertype> {
    return this.prisma.luUsersUsertype.update<T>(args);
  }
  async deleteLuUsersUsertype<T extends Prisma.LuUsersUsertypeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LuUsersUsertypeDeleteArgs>
  ): Promise<PrismaLuUsersUsertype> {
    return this.prisma.luUsersUsertype.delete(args);
  }

  async findMhciPrereqsConversationComments(
    parentId: number,
    args: Prisma.MhciPrereqsConversationCommentFindManyArgs
  ): Promise<PrismaMhciPrereqsConversationComment[]> {
    return this.prisma.luUsersUsertype
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .mhciPrereqsConversationComments(args);
  }

  async findMhciPrereqsCourses(
    parentId: number,
    args: Prisma.MhciPrereqsCourseFindManyArgs
  ): Promise<PrismaMhciPrereqsCourse[]> {
    return this.prisma.luUsersUsertype
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .mhciPrereqsCourses(args);
  }

  async findMhciPrereqsDesignPortfolios(
    parentId: number,
    args: Prisma.MhciPrereqsDesignPortfolioFindManyArgs
  ): Promise<PrismaMhciPrereqsDesignPortfolio[]> {
    return this.prisma.luUsersUsertype
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .mhciPrereqsDesignPortfolios(args);
  }

  async findMhciPrereqsProgrammingTests(
    parentId: number,
    args: Prisma.MhciPrereqsProgrammingTestFindManyArgs
  ): Promise<PrismaMhciPrereqsProgrammingTest[]> {
    return this.prisma.luUsersUsertype
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .mhciPrereqsProgrammingTests(args);
  }

  async getUsers(parentId: number): Promise<PrismaUser | null> {
    return this.prisma.luUsersUsertype
      .findUnique({
        where: { id: parentId },
      })
      .users();
  }

  async getMhciPrereqsProgrammingSamples(
    parentId: number
  ): Promise<PrismaMhciPrereqsProgrammingSample | null> {
    return this.prisma.luUsersUsertype
      .findUnique({
        where: { id: parentId },
      })
      .mhciPrereqsProgrammingSamples();
  }
}
