/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateMhciPrereqsDesignPortfolioArgs } from "./CreateMhciPrereqsDesignPortfolioArgs";
import { UpdateMhciPrereqsDesignPortfolioArgs } from "./UpdateMhciPrereqsDesignPortfolioArgs";
import { DeleteMhciPrereqsDesignPortfolioArgs } from "./DeleteMhciPrereqsDesignPortfolioArgs";
import { MhciPrereqsDesignPortfolioCountArgs } from "./MhciPrereqsDesignPortfolioCountArgs";
import { MhciPrereqsDesignPortfolioFindManyArgs } from "./MhciPrereqsDesignPortfolioFindManyArgs";
import { MhciPrereqsDesignPortfolioFindUniqueArgs } from "./MhciPrereqsDesignPortfolioFindUniqueArgs";
import { MhciPrereqsDesignPortfolio } from "./MhciPrereqsDesignPortfolio";
import { LuUsersUsertype } from "../../luUsersUsertype/base/LuUsersUsertype";
import { MhciPrereqsDesignPortfolioService } from "../mhciPrereqsDesignPortfolio.service";
@graphql.Resolver(() => MhciPrereqsDesignPortfolio)
export class MhciPrereqsDesignPortfolioResolverBase {
  constructor(protected readonly service: MhciPrereqsDesignPortfolioService) {}

  async _mhciPrereqsDesignPortfoliosMeta(
    @graphql.Args() args: MhciPrereqsDesignPortfolioCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MhciPrereqsDesignPortfolio])
  async mhciPrereqsDesignPortfolios(
    @graphql.Args() args: MhciPrereqsDesignPortfolioFindManyArgs
  ): Promise<MhciPrereqsDesignPortfolio[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => MhciPrereqsDesignPortfolio, { nullable: true })
  async mhciPrereqsDesignPortfolio(
    @graphql.Args() args: MhciPrereqsDesignPortfolioFindUniqueArgs
  ): Promise<MhciPrereqsDesignPortfolio | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MhciPrereqsDesignPortfolio)
  async createMhciPrereqsDesignPortfolio(
    @graphql.Args() args: CreateMhciPrereqsDesignPortfolioArgs
  ): Promise<MhciPrereqsDesignPortfolio> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        luUsersUsertypes: {
          connect: args.data.luUsersUsertypes,
        },
      },
    });
  }

  @graphql.Mutation(() => MhciPrereqsDesignPortfolio)
  async updateMhciPrereqsDesignPortfolio(
    @graphql.Args() args: UpdateMhciPrereqsDesignPortfolioArgs
  ): Promise<MhciPrereqsDesignPortfolio | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          luUsersUsertypes: {
            connect: args.data.luUsersUsertypes,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MhciPrereqsDesignPortfolio)
  async deleteMhciPrereqsDesignPortfolio(
    @graphql.Args() args: DeleteMhciPrereqsDesignPortfolioArgs
  ): Promise<MhciPrereqsDesignPortfolio | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => LuUsersUsertype, {
    nullable: true,
    name: "luUsersUsertypes",
  })
  async resolveFieldLuUsersUsertypes(
    @graphql.Parent() parent: MhciPrereqsDesignPortfolio
  ): Promise<LuUsersUsertype | null> {
    const result = await this.service.getLuUsersUsertypes(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
