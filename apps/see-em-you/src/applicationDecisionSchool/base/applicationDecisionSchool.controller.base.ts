/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ApplicationDecisionSchoolService } from "../applicationDecisionSchool.service";
import { ApplicationDecisionSchoolCreateInput } from "./ApplicationDecisionSchoolCreateInput";
import { ApplicationDecisionSchool } from "./ApplicationDecisionSchool";
import { ApplicationDecisionSchoolFindManyArgs } from "./ApplicationDecisionSchoolFindManyArgs";
import { ApplicationDecisionSchoolWhereUniqueInput } from "./ApplicationDecisionSchoolWhereUniqueInput";
import { ApplicationDecisionSchoolUpdateInput } from "./ApplicationDecisionSchoolUpdateInput";

export class ApplicationDecisionSchoolControllerBase {
  constructor(protected readonly service: ApplicationDecisionSchoolService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ApplicationDecisionSchool })
  async createApplicationDecisionSchool(
    @common.Body() data: ApplicationDecisionSchoolCreateInput
  ): Promise<ApplicationDecisionSchool> {
    return await this.service.createApplicationDecisionSchool({
      data: data,
      select: {
        applicationId: true,
        programId: true,
        periodId: true,
        name: true,
        accepted: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ApplicationDecisionSchool] })
  @ApiNestedQuery(ApplicationDecisionSchoolFindManyArgs)
  async applicationDecisionSchools(
    @common.Req() request: Request
  ): Promise<ApplicationDecisionSchool[]> {
    const args = plainToClass(
      ApplicationDecisionSchoolFindManyArgs,
      request.query
    );
    return this.service.applicationDecisionSchools({
      ...args,
      select: {
        applicationId: true,
        programId: true,
        periodId: true,
        name: true,
        accepted: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ApplicationDecisionSchool })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async applicationDecisionSchool(
    @common.Param() params: ApplicationDecisionSchoolWhereUniqueInput
  ): Promise<ApplicationDecisionSchool | null> {
    const result = await this.service.applicationDecisionSchool({
      where: params,
      select: {
        applicationId: true,
        programId: true,
        periodId: true,
        name: true,
        accepted: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ApplicationDecisionSchool })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateApplicationDecisionSchool(
    @common.Param() params: ApplicationDecisionSchoolWhereUniqueInput,
    @common.Body() data: ApplicationDecisionSchoolUpdateInput
  ): Promise<ApplicationDecisionSchool | null> {
    try {
      return await this.service.updateApplicationDecisionSchool({
        where: params,
        data: data,
        select: {
          applicationId: true,
          programId: true,
          periodId: true,
          name: true,
          accepted: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ApplicationDecisionSchool })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteApplicationDecisionSchool(
    @common.Param() params: ApplicationDecisionSchoolWhereUniqueInput
  ): Promise<ApplicationDecisionSchool | null> {
    try {
      return await this.service.deleteApplicationDecisionSchool({
        where: params,
        select: {
          applicationId: true,
          programId: true,
          periodId: true,
          name: true,
          accepted: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
