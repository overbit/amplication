/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ApplicationDecisionSchool as PrismaApplicationDecisionSchool,
} from "@prisma/client";

export class ApplicationDecisionSchoolServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ApplicationDecisionSchoolCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApplicationDecisionSchoolCountArgs>
  ): Promise<number> {
    return this.prisma.applicationDecisionSchool.count(args);
  }

  async applicationDecisionSchools<
    T extends Prisma.ApplicationDecisionSchoolFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ApplicationDecisionSchoolFindManyArgs>
  ): Promise<PrismaApplicationDecisionSchool[]> {
    return this.prisma.applicationDecisionSchool.findMany(args);
  }
  async applicationDecisionSchool<
    T extends Prisma.ApplicationDecisionSchoolFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ApplicationDecisionSchoolFindUniqueArgs>
  ): Promise<PrismaApplicationDecisionSchool | null> {
    return this.prisma.applicationDecisionSchool.findUnique(args);
  }
  async createApplicationDecisionSchool<
    T extends Prisma.ApplicationDecisionSchoolCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ApplicationDecisionSchoolCreateArgs>
  ): Promise<PrismaApplicationDecisionSchool> {
    return this.prisma.applicationDecisionSchool.create<T>(args);
  }
  async updateApplicationDecisionSchool<
    T extends Prisma.ApplicationDecisionSchoolUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ApplicationDecisionSchoolUpdateArgs>
  ): Promise<PrismaApplicationDecisionSchool> {
    return this.prisma.applicationDecisionSchool.update<T>(args);
  }
  async deleteApplicationDecisionSchool<
    T extends Prisma.ApplicationDecisionSchoolDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ApplicationDecisionSchoolDeleteArgs>
  ): Promise<PrismaApplicationDecisionSchool> {
    return this.prisma.applicationDecisionSchool.delete(args);
  }
}
