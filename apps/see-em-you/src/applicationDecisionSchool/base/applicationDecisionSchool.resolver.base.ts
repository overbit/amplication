/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateApplicationDecisionSchoolArgs } from "./CreateApplicationDecisionSchoolArgs";
import { UpdateApplicationDecisionSchoolArgs } from "./UpdateApplicationDecisionSchoolArgs";
import { DeleteApplicationDecisionSchoolArgs } from "./DeleteApplicationDecisionSchoolArgs";
import { ApplicationDecisionSchoolCountArgs } from "./ApplicationDecisionSchoolCountArgs";
import { ApplicationDecisionSchoolFindManyArgs } from "./ApplicationDecisionSchoolFindManyArgs";
import { ApplicationDecisionSchoolFindUniqueArgs } from "./ApplicationDecisionSchoolFindUniqueArgs";
import { ApplicationDecisionSchool } from "./ApplicationDecisionSchool";
import { ApplicationDecisionSchoolService } from "../applicationDecisionSchool.service";
@graphql.Resolver(() => ApplicationDecisionSchool)
export class ApplicationDecisionSchoolResolverBase {
  constructor(protected readonly service: ApplicationDecisionSchoolService) {}

  async _applicationDecisionSchoolsMeta(
    @graphql.Args() args: ApplicationDecisionSchoolCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ApplicationDecisionSchool])
  async applicationDecisionSchools(
    @graphql.Args() args: ApplicationDecisionSchoolFindManyArgs
  ): Promise<ApplicationDecisionSchool[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ApplicationDecisionSchool, { nullable: true })
  async applicationDecisionSchool(
    @graphql.Args() args: ApplicationDecisionSchoolFindUniqueArgs
  ): Promise<ApplicationDecisionSchool | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ApplicationDecisionSchool)
  async createApplicationDecisionSchool(
    @graphql.Args() args: CreateApplicationDecisionSchoolArgs
  ): Promise<ApplicationDecisionSchool> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ApplicationDecisionSchool)
  async updateApplicationDecisionSchool(
    @graphql.Args() args: UpdateApplicationDecisionSchoolArgs
  ): Promise<ApplicationDecisionSchool | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ApplicationDecisionSchool)
  async deleteApplicationDecisionSchool(
    @graphql.Args() args: DeleteApplicationDecisionSchoolArgs
  ): Promise<ApplicationDecisionSchool | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
