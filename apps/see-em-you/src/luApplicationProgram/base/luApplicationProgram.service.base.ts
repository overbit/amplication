/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  LuApplicationProgram as PrismaLuApplicationProgram,
  Application as PrismaApplication,
  ProgramModel as PrismaProgramModel,
} from "@prisma/client";

export class LuApplicationProgramServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.LuApplicationProgramCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.LuApplicationProgramCountArgs>
  ): Promise<number> {
    return this.prisma.luApplicationProgram.count(args);
  }

  async luApplicationPrograms<
    T extends Prisma.LuApplicationProgramFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.LuApplicationProgramFindManyArgs>
  ): Promise<PrismaLuApplicationProgram[]> {
    return this.prisma.luApplicationProgram.findMany(args);
  }
  async luApplicationProgram<
    T extends Prisma.LuApplicationProgramFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.LuApplicationProgramFindUniqueArgs>
  ): Promise<PrismaLuApplicationProgram | null> {
    return this.prisma.luApplicationProgram.findUnique(args);
  }
  async createLuApplicationProgram<
    T extends Prisma.LuApplicationProgramCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.LuApplicationProgramCreateArgs>
  ): Promise<PrismaLuApplicationProgram> {
    return this.prisma.luApplicationProgram.create<T>(args);
  }
  async updateLuApplicationProgram<
    T extends Prisma.LuApplicationProgramUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.LuApplicationProgramUpdateArgs>
  ): Promise<PrismaLuApplicationProgram> {
    return this.prisma.luApplicationProgram.update<T>(args);
  }
  async deleteLuApplicationProgram<
    T extends Prisma.LuApplicationProgramDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.LuApplicationProgramDeleteArgs>
  ): Promise<PrismaLuApplicationProgram> {
    return this.prisma.luApplicationProgram.delete(args);
  }

  async getApplication(parentId: number): Promise<PrismaApplication | null> {
    return this.prisma.luApplicationProgram
      .findUnique({
        where: { id: parentId },
      })
      .application();
  }

  async getPrograms(parentId: number): Promise<PrismaProgramModel | null> {
    return this.prisma.luApplicationProgram
      .findUnique({
        where: { id: parentId },
      })
      .programs();
  }
}
