/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LuApplicationProgram } from "./LuApplicationProgram";
import { LuApplicationProgramCountArgs } from "./LuApplicationProgramCountArgs";
import { LuApplicationProgramFindManyArgs } from "./LuApplicationProgramFindManyArgs";
import { LuApplicationProgramFindUniqueArgs } from "./LuApplicationProgramFindUniqueArgs";
import { CreateLuApplicationProgramArgs } from "./CreateLuApplicationProgramArgs";
import { UpdateLuApplicationProgramArgs } from "./UpdateLuApplicationProgramArgs";
import { DeleteLuApplicationProgramArgs } from "./DeleteLuApplicationProgramArgs";
import { Application } from "../../application/base/Application";
import { ProgramModel } from "../../programModel/base/ProgramModel";
import { LuApplicationProgramService } from "../luApplicationProgram.service";
@graphql.Resolver(() => LuApplicationProgram)
export class LuApplicationProgramResolverBase {
  constructor(protected readonly service: LuApplicationProgramService) {}

  async _luApplicationProgramsMeta(
    @graphql.Args() args: LuApplicationProgramCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LuApplicationProgram])
  async luApplicationPrograms(
    @graphql.Args() args: LuApplicationProgramFindManyArgs
  ): Promise<LuApplicationProgram[]> {
    return this.service.luApplicationPrograms(args);
  }

  @graphql.Query(() => LuApplicationProgram, { nullable: true })
  async luApplicationProgram(
    @graphql.Args() args: LuApplicationProgramFindUniqueArgs
  ): Promise<LuApplicationProgram | null> {
    const result = await this.service.luApplicationProgram(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LuApplicationProgram)
  async createLuApplicationProgram(
    @graphql.Args() args: CreateLuApplicationProgramArgs
  ): Promise<LuApplicationProgram> {
    return await this.service.createLuApplicationProgram({
      ...args,
      data: {
        ...args.data,

        application: {
          connect: args.data.application,
        },

        programs: {
          connect: args.data.programs,
        },
      },
    });
  }

  @graphql.Mutation(() => LuApplicationProgram)
  async updateLuApplicationProgram(
    @graphql.Args() args: UpdateLuApplicationProgramArgs
  ): Promise<LuApplicationProgram | null> {
    try {
      return await this.service.updateLuApplicationProgram({
        ...args,
        data: {
          ...args.data,

          application: {
            connect: args.data.application,
          },

          programs: {
            connect: args.data.programs,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LuApplicationProgram)
  async deleteLuApplicationProgram(
    @graphql.Args() args: DeleteLuApplicationProgramArgs
  ): Promise<LuApplicationProgram | null> {
    try {
      return await this.service.deleteLuApplicationProgram(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Application, {
    nullable: true,
    name: "application",
  })
  async getApplication(
    @graphql.Parent() parent: LuApplicationProgram
  ): Promise<Application | null> {
    const result = await this.service.getApplication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => ProgramModel, {
    nullable: true,
    name: "programs",
  })
  async getPrograms(
    @graphql.Parent() parent: LuApplicationProgram
  ): Promise<ProgramModel | null> {
    const result = await this.service.getPrograms(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
