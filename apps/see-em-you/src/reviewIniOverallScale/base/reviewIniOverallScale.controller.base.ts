/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReviewIniOverallScaleService } from "../reviewIniOverallScale.service";
import { ReviewIniOverallScaleCreateInput } from "./ReviewIniOverallScaleCreateInput";
import { ReviewIniOverallScale } from "./ReviewIniOverallScale";
import { ReviewIniOverallScaleFindManyArgs } from "./ReviewIniOverallScaleFindManyArgs";
import { ReviewIniOverallScaleWhereUniqueInput } from "./ReviewIniOverallScaleWhereUniqueInput";
import { ReviewIniOverallScaleUpdateInput } from "./ReviewIniOverallScaleUpdateInput";

export class ReviewIniOverallScaleControllerBase {
  constructor(protected readonly service: ReviewIniOverallScaleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ReviewIniOverallScale })
  async createReviewIniOverallScale(
    @common.Body() data: ReviewIniOverallScaleCreateInput
  ): Promise<ReviewIniOverallScale> {
    return await this.service.createReviewIniOverallScale({
      data: data,
      select: {
        id: true,
        value: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ReviewIniOverallScale] })
  @ApiNestedQuery(ReviewIniOverallScaleFindManyArgs)
  async reviewIniOverallScales(
    @common.Req() request: Request
  ): Promise<ReviewIniOverallScale[]> {
    const args = plainToClass(ReviewIniOverallScaleFindManyArgs, request.query);
    return this.service.reviewIniOverallScales({
      ...args,
      select: {
        id: true,
        value: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ReviewIniOverallScale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async reviewIniOverallScale(
    @common.Param() params: ReviewIniOverallScaleWhereUniqueInput
  ): Promise<ReviewIniOverallScale | null> {
    const result = await this.service.reviewIniOverallScale({
      where: params,
      select: {
        id: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ReviewIniOverallScale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReviewIniOverallScale(
    @common.Param() params: ReviewIniOverallScaleWhereUniqueInput,
    @common.Body() data: ReviewIniOverallScaleUpdateInput
  ): Promise<ReviewIniOverallScale | null> {
    try {
      return await this.service.updateReviewIniOverallScale({
        where: params,
        data: data,
        select: {
          id: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ReviewIniOverallScale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReviewIniOverallScale(
    @common.Param() params: ReviewIniOverallScaleWhereUniqueInput
  ): Promise<ReviewIniOverallScale | null> {
    try {
      return await this.service.deleteReviewIniOverallScale({
        where: params,
        select: {
          id: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
