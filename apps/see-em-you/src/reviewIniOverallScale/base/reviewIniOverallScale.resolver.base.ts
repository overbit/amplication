/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateReviewIniOverallScaleArgs } from "./CreateReviewIniOverallScaleArgs";
import { UpdateReviewIniOverallScaleArgs } from "./UpdateReviewIniOverallScaleArgs";
import { DeleteReviewIniOverallScaleArgs } from "./DeleteReviewIniOverallScaleArgs";
import { ReviewIniOverallScaleCountArgs } from "./ReviewIniOverallScaleCountArgs";
import { ReviewIniOverallScaleFindManyArgs } from "./ReviewIniOverallScaleFindManyArgs";
import { ReviewIniOverallScaleFindUniqueArgs } from "./ReviewIniOverallScaleFindUniqueArgs";
import { ReviewIniOverallScale } from "./ReviewIniOverallScale";
import { ReviewIniOverallScaleService } from "../reviewIniOverallScale.service";
@graphql.Resolver(() => ReviewIniOverallScale)
export class ReviewIniOverallScaleResolverBase {
  constructor(protected readonly service: ReviewIniOverallScaleService) {}

  async _reviewIniOverallScalesMeta(
    @graphql.Args() args: ReviewIniOverallScaleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ReviewIniOverallScale])
  async reviewIniOverallScales(
    @graphql.Args() args: ReviewIniOverallScaleFindManyArgs
  ): Promise<ReviewIniOverallScale[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ReviewIniOverallScale, { nullable: true })
  async reviewIniOverallScale(
    @graphql.Args() args: ReviewIniOverallScaleFindUniqueArgs
  ): Promise<ReviewIniOverallScale | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ReviewIniOverallScale)
  async createReviewIniOverallScale(
    @graphql.Args() args: CreateReviewIniOverallScaleArgs
  ): Promise<ReviewIniOverallScale> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ReviewIniOverallScale)
  async updateReviewIniOverallScale(
    @graphql.Args() args: UpdateReviewIniOverallScaleArgs
  ): Promise<ReviewIniOverallScale | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReviewIniOverallScale)
  async deleteReviewIniOverallScale(
    @graphql.Args() args: DeleteReviewIniOverallScaleArgs
  ): Promise<ReviewIniOverallScale | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
