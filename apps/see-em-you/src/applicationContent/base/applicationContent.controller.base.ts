/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ApplicationContentService } from "../applicationContent.service";
import { ApplicationContentCreateInput } from "./ApplicationContentCreateInput";
import { ApplicationContent } from "./ApplicationContent";
import { ApplicationContentFindManyArgs } from "./ApplicationContentFindManyArgs";
import { ApplicationContentWhereUniqueInput } from "./ApplicationContentWhereUniqueInput";
import { ApplicationContentUpdateInput } from "./ApplicationContentUpdateInput";

export class ApplicationContentControllerBase {
  constructor(protected readonly service: ApplicationContentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ApplicationContent })
  async createApplicationContent(
    @common.Body() data: ApplicationContentCreateInput
  ): Promise<ApplicationContent> {
    return await this.service.createApplicationContent({
      data: data,
      select: {
        id: true,
        sectionIdentifier: true,
        programId: true,
        desired: true,
        required: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ApplicationContent] })
  @ApiNestedQuery(ApplicationContentFindManyArgs)
  async applicationContents(
    @common.Req() request: Request
  ): Promise<ApplicationContent[]> {
    const args = plainToClass(ApplicationContentFindManyArgs, request.query);
    return this.service.applicationContents({
      ...args,
      select: {
        id: true,
        sectionIdentifier: true,
        programId: true,
        desired: true,
        required: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ApplicationContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async applicationContent(
    @common.Param() params: ApplicationContentWhereUniqueInput
  ): Promise<ApplicationContent | null> {
    const result = await this.service.applicationContent({
      where: params,
      select: {
        id: true,
        sectionIdentifier: true,
        programId: true,
        desired: true,
        required: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ApplicationContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateApplicationContent(
    @common.Param() params: ApplicationContentWhereUniqueInput,
    @common.Body() data: ApplicationContentUpdateInput
  ): Promise<ApplicationContent | null> {
    try {
      return await this.service.updateApplicationContent({
        where: params,
        data: data,
        select: {
          id: true,
          sectionIdentifier: true,
          programId: true,
          desired: true,
          required: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ApplicationContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteApplicationContent(
    @common.Param() params: ApplicationContentWhereUniqueInput
  ): Promise<ApplicationContent | null> {
    try {
      return await this.service.deleteApplicationContent({
        where: params,
        select: {
          id: true,
          sectionIdentifier: true,
          programId: true,
          desired: true,
          required: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
