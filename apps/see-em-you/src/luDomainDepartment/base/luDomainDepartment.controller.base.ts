/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LuDomainDepartmentService } from "../luDomainDepartment.service";
import { LuDomainDepartmentCreateInput } from "./LuDomainDepartmentCreateInput";
import { LuDomainDepartment } from "./LuDomainDepartment";
import { LuDomainDepartmentFindManyArgs } from "./LuDomainDepartmentFindManyArgs";
import { LuDomainDepartmentWhereUniqueInput } from "./LuDomainDepartmentWhereUniqueInput";
import { LuDomainDepartmentUpdateInput } from "./LuDomainDepartmentUpdateInput";

export class LuDomainDepartmentControllerBase {
  constructor(protected readonly service: LuDomainDepartmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LuDomainDepartment })
  async createLuDomainDepartment(
    @common.Body() data: LuDomainDepartmentCreateInput
  ): Promise<LuDomainDepartment> {
    return await this.service.createLuDomainDepartment({
      data: data,
      select: {
        domainId: true,
        departmentId: true,
        drank: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LuDomainDepartment] })
  @ApiNestedQuery(LuDomainDepartmentFindManyArgs)
  async luDomainDepartments(
    @common.Req() request: Request
  ): Promise<LuDomainDepartment[]> {
    const args = plainToClass(LuDomainDepartmentFindManyArgs, request.query);
    return this.service.luDomainDepartments({
      ...args,
      select: {
        domainId: true,
        departmentId: true,
        drank: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LuDomainDepartment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async luDomainDepartment(
    @common.Param() params: LuDomainDepartmentWhereUniqueInput
  ): Promise<LuDomainDepartment | null> {
    const result = await this.service.luDomainDepartment({
      where: params,
      select: {
        domainId: true,
        departmentId: true,
        drank: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LuDomainDepartment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLuDomainDepartment(
    @common.Param() params: LuDomainDepartmentWhereUniqueInput,
    @common.Body() data: LuDomainDepartmentUpdateInput
  ): Promise<LuDomainDepartment | null> {
    try {
      return await this.service.updateLuDomainDepartment({
        where: params,
        data: data,
        select: {
          domainId: true,
          departmentId: true,
          drank: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LuDomainDepartment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLuDomainDepartment(
    @common.Param() params: LuDomainDepartmentWhereUniqueInput
  ): Promise<LuDomainDepartment | null> {
    try {
      return await this.service.deleteLuDomainDepartment({
        where: params,
        select: {
          domainId: true,
          departmentId: true,
          drank: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
