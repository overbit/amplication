/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateLuDomainDepartmentArgs } from "./CreateLuDomainDepartmentArgs";
import { UpdateLuDomainDepartmentArgs } from "./UpdateLuDomainDepartmentArgs";
import { DeleteLuDomainDepartmentArgs } from "./DeleteLuDomainDepartmentArgs";
import { LuDomainDepartmentCountArgs } from "./LuDomainDepartmentCountArgs";
import { LuDomainDepartmentFindManyArgs } from "./LuDomainDepartmentFindManyArgs";
import { LuDomainDepartmentFindUniqueArgs } from "./LuDomainDepartmentFindUniqueArgs";
import { LuDomainDepartment } from "./LuDomainDepartment";
import { LuDomainDepartmentService } from "../luDomainDepartment.service";
@graphql.Resolver(() => LuDomainDepartment)
export class LuDomainDepartmentResolverBase {
  constructor(protected readonly service: LuDomainDepartmentService) {}

  async _luDomainDepartmentsMeta(
    @graphql.Args() args: LuDomainDepartmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LuDomainDepartment])
  async luDomainDepartments(
    @graphql.Args() args: LuDomainDepartmentFindManyArgs
  ): Promise<LuDomainDepartment[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => LuDomainDepartment, { nullable: true })
  async luDomainDepartment(
    @graphql.Args() args: LuDomainDepartmentFindUniqueArgs
  ): Promise<LuDomainDepartment | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LuDomainDepartment)
  async createLuDomainDepartment(
    @graphql.Args() args: CreateLuDomainDepartmentArgs
  ): Promise<LuDomainDepartment> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LuDomainDepartment)
  async updateLuDomainDepartment(
    @graphql.Args() args: UpdateLuDomainDepartmentArgs
  ): Promise<LuDomainDepartment | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LuDomainDepartment)
  async deleteLuDomainDepartment(
    @graphql.Args() args: DeleteLuDomainDepartmentArgs
  ): Promise<LuDomainDepartment | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
