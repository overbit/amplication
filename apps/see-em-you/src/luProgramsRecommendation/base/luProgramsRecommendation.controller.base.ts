/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LuProgramsRecommendationService } from "../luProgramsRecommendation.service";
import { LuProgramsRecommendationCreateInput } from "./LuProgramsRecommendationCreateInput";
import { LuProgramsRecommendation } from "./LuProgramsRecommendation";
import { LuProgramsRecommendationFindManyArgs } from "./LuProgramsRecommendationFindManyArgs";
import { LuProgramsRecommendationWhereUniqueInput } from "./LuProgramsRecommendationWhereUniqueInput";
import { LuProgramsRecommendationUpdateInput } from "./LuProgramsRecommendationUpdateInput";

export class LuProgramsRecommendationControllerBase {
  constructor(protected readonly service: LuProgramsRecommendationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LuProgramsRecommendation })
  async createLuProgramsRecommendation(
    @common.Body() data: LuProgramsRecommendationCreateInput
  ): Promise<LuProgramsRecommendation> {
    return await this.service.createLuProgramsRecommendation({
      data: data,
      select: {
        id: true,
        numrequired: true,
        programId: true,
        recommendationtypeId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LuProgramsRecommendation] })
  @ApiNestedQuery(LuProgramsRecommendationFindManyArgs)
  async luProgramsRecommendations(
    @common.Req() request: Request
  ): Promise<LuProgramsRecommendation[]> {
    const args = plainToClass(
      LuProgramsRecommendationFindManyArgs,
      request.query
    );
    return this.service.luProgramsRecommendations({
      ...args,
      select: {
        id: true,
        numrequired: true,
        programId: true,
        recommendationtypeId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LuProgramsRecommendation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async luProgramsRecommendation(
    @common.Param() params: LuProgramsRecommendationWhereUniqueInput
  ): Promise<LuProgramsRecommendation | null> {
    const result = await this.service.luProgramsRecommendation({
      where: params,
      select: {
        id: true,
        numrequired: true,
        programId: true,
        recommendationtypeId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LuProgramsRecommendation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLuProgramsRecommendation(
    @common.Param() params: LuProgramsRecommendationWhereUniqueInput,
    @common.Body() data: LuProgramsRecommendationUpdateInput
  ): Promise<LuProgramsRecommendation | null> {
    try {
      return await this.service.updateLuProgramsRecommendation({
        where: params,
        data: data,
        select: {
          id: true,
          numrequired: true,
          programId: true,
          recommendationtypeId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LuProgramsRecommendation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLuProgramsRecommendation(
    @common.Param() params: LuProgramsRecommendationWhereUniqueInput
  ): Promise<LuProgramsRecommendation | null> {
    try {
      return await this.service.deleteLuProgramsRecommendation({
        where: params,
        select: {
          id: true,
          numrequired: true,
          programId: true,
          recommendationtypeId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
