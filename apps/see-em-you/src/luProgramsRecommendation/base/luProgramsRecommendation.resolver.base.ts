/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateLuProgramsRecommendationArgs } from "./CreateLuProgramsRecommendationArgs";
import { UpdateLuProgramsRecommendationArgs } from "./UpdateLuProgramsRecommendationArgs";
import { DeleteLuProgramsRecommendationArgs } from "./DeleteLuProgramsRecommendationArgs";
import { LuProgramsRecommendationCountArgs } from "./LuProgramsRecommendationCountArgs";
import { LuProgramsRecommendationFindManyArgs } from "./LuProgramsRecommendationFindManyArgs";
import { LuProgramsRecommendationFindUniqueArgs } from "./LuProgramsRecommendationFindUniqueArgs";
import { LuProgramsRecommendation } from "./LuProgramsRecommendation";
import { LuProgramsRecommendationService } from "../luProgramsRecommendation.service";
@graphql.Resolver(() => LuProgramsRecommendation)
export class LuProgramsRecommendationResolverBase {
  constructor(protected readonly service: LuProgramsRecommendationService) {}

  async _luProgramsRecommendationsMeta(
    @graphql.Args() args: LuProgramsRecommendationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LuProgramsRecommendation])
  async luProgramsRecommendations(
    @graphql.Args() args: LuProgramsRecommendationFindManyArgs
  ): Promise<LuProgramsRecommendation[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => LuProgramsRecommendation, { nullable: true })
  async luProgramsRecommendation(
    @graphql.Args() args: LuProgramsRecommendationFindUniqueArgs
  ): Promise<LuProgramsRecommendation | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LuProgramsRecommendation)
  async createLuProgramsRecommendation(
    @graphql.Args() args: CreateLuProgramsRecommendationArgs
  ): Promise<LuProgramsRecommendation> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LuProgramsRecommendation)
  async updateLuProgramsRecommendation(
    @graphql.Args() args: UpdateLuProgramsRecommendationArgs
  ): Promise<LuProgramsRecommendation | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LuProgramsRecommendation)
  async deleteLuProgramsRecommendation(
    @graphql.Args() args: DeleteLuProgramsRecommendationArgs
  ): Promise<LuProgramsRecommendation | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
