/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  BlacklistReviewer as PrismaBlacklistReviewer,
} from "@prisma/client";

export class BlacklistReviewerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.BlacklistReviewerCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.BlacklistReviewerCountArgs>
  ): Promise<number> {
    return this.prisma.blacklistReviewer.count(args);
  }

  async blacklistReviewers<T extends Prisma.BlacklistReviewerFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BlacklistReviewerFindManyArgs>
  ): Promise<PrismaBlacklistReviewer[]> {
    return this.prisma.blacklistReviewer.findMany(args);
  }
  async blacklistReviewer<T extends Prisma.BlacklistReviewerFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BlacklistReviewerFindUniqueArgs>
  ): Promise<PrismaBlacklistReviewer | null> {
    return this.prisma.blacklistReviewer.findUnique(args);
  }
  async createBlacklistReviewer<T extends Prisma.BlacklistReviewerCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BlacklistReviewerCreateArgs>
  ): Promise<PrismaBlacklistReviewer> {
    return this.prisma.blacklistReviewer.create<T>(args);
  }
  async updateBlacklistReviewer<T extends Prisma.BlacklistReviewerUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BlacklistReviewerUpdateArgs>
  ): Promise<PrismaBlacklistReviewer> {
    return this.prisma.blacklistReviewer.update<T>(args);
  }
  async deleteBlacklistReviewer<T extends Prisma.BlacklistReviewerDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BlacklistReviewerDeleteArgs>
  ): Promise<PrismaBlacklistReviewer> {
    return this.prisma.blacklistReviewer.delete(args);
  }
}
