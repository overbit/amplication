/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BlacklistReviewer } from "./BlacklistReviewer";
import { BlacklistReviewerCountArgs } from "./BlacklistReviewerCountArgs";
import { BlacklistReviewerFindManyArgs } from "./BlacklistReviewerFindManyArgs";
import { BlacklistReviewerFindUniqueArgs } from "./BlacklistReviewerFindUniqueArgs";
import { CreateBlacklistReviewerArgs } from "./CreateBlacklistReviewerArgs";
import { UpdateBlacklistReviewerArgs } from "./UpdateBlacklistReviewerArgs";
import { DeleteBlacklistReviewerArgs } from "./DeleteBlacklistReviewerArgs";
import { BlacklistReviewerService } from "../blacklistReviewer.service";
@graphql.Resolver(() => BlacklistReviewer)
export class BlacklistReviewerResolverBase {
  constructor(protected readonly service: BlacklistReviewerService) {}

  async _blacklistReviewersMeta(
    @graphql.Args() args: BlacklistReviewerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BlacklistReviewer])
  async blacklistReviewers(
    @graphql.Args() args: BlacklistReviewerFindManyArgs
  ): Promise<BlacklistReviewer[]> {
    return this.service.blacklistReviewers(args);
  }

  @graphql.Query(() => BlacklistReviewer, { nullable: true })
  async blacklistReviewer(
    @graphql.Args() args: BlacklistReviewerFindUniqueArgs
  ): Promise<BlacklistReviewer | null> {
    const result = await this.service.blacklistReviewer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BlacklistReviewer)
  async createBlacklistReviewer(
    @graphql.Args() args: CreateBlacklistReviewerArgs
  ): Promise<BlacklistReviewer> {
    return await this.service.createBlacklistReviewer({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BlacklistReviewer)
  async updateBlacklistReviewer(
    @graphql.Args() args: UpdateBlacklistReviewerArgs
  ): Promise<BlacklistReviewer | null> {
    try {
      return await this.service.updateBlacklistReviewer({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BlacklistReviewer)
  async deleteBlacklistReviewer(
    @graphql.Args() args: DeleteBlacklistReviewerArgs
  ): Promise<BlacklistReviewer | null> {
    try {
      return await this.service.deleteBlacklistReviewer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
