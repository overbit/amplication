/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PeriodApplication } from "./PeriodApplication";
import { PeriodApplicationCountArgs } from "./PeriodApplicationCountArgs";
import { PeriodApplicationFindManyArgs } from "./PeriodApplicationFindManyArgs";
import { PeriodApplicationFindUniqueArgs } from "./PeriodApplicationFindUniqueArgs";
import { CreatePeriodApplicationArgs } from "./CreatePeriodApplicationArgs";
import { UpdatePeriodApplicationArgs } from "./UpdatePeriodApplicationArgs";
import { DeletePeriodApplicationArgs } from "./DeletePeriodApplicationArgs";
import { Application } from "../../application/base/Application";
import { Period } from "../../period/base/Period";
import { PeriodApplicationService } from "../periodApplication.service";
@graphql.Resolver(() => PeriodApplication)
export class PeriodApplicationResolverBase {
  constructor(protected readonly service: PeriodApplicationService) {}

  async _periodApplicationsMeta(
    @graphql.Args() args: PeriodApplicationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PeriodApplication])
  async periodApplications(
    @graphql.Args() args: PeriodApplicationFindManyArgs
  ): Promise<PeriodApplication[]> {
    return this.service.periodApplications(args);
  }

  @graphql.Query(() => PeriodApplication, { nullable: true })
  async periodApplication(
    @graphql.Args() args: PeriodApplicationFindUniqueArgs
  ): Promise<PeriodApplication | null> {
    const result = await this.service.periodApplication(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PeriodApplication)
  async createPeriodApplication(
    @graphql.Args() args: CreatePeriodApplicationArgs
  ): Promise<PeriodApplication> {
    return await this.service.createPeriodApplication({
      ...args,
      data: {
        ...args.data,

        application: {
          connect: args.data.application,
        },

        period: {
          connect: args.data.period,
        },
      },
    });
  }

  @graphql.Mutation(() => PeriodApplication)
  async updatePeriodApplication(
    @graphql.Args() args: UpdatePeriodApplicationArgs
  ): Promise<PeriodApplication | null> {
    try {
      return await this.service.updatePeriodApplication({
        ...args,
        data: {
          ...args.data,

          application: {
            connect: args.data.application,
          },

          period: {
            connect: args.data.period,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PeriodApplication)
  async deletePeriodApplication(
    @graphql.Args() args: DeletePeriodApplicationArgs
  ): Promise<PeriodApplication | null> {
    try {
      return await this.service.deletePeriodApplication(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Application, {
    nullable: true,
    name: "application",
  })
  async getApplication(
    @graphql.Parent() parent: PeriodApplication
  ): Promise<Application | null> {
    const result = await this.service.getApplication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Period, {
    nullable: true,
    name: "period",
  })
  async getPeriod(
    @graphql.Parent() parent: PeriodApplication
  ): Promise<Period | null> {
    const result = await this.service.getPeriod(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
