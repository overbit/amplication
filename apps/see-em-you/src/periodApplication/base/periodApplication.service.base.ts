/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PeriodApplication as PrismaPeriodApplication,
  Application as PrismaApplication,
  Period as PrismaPeriod,
} from "@prisma/client";

export class PeriodApplicationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.PeriodApplicationCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.PeriodApplicationCountArgs>
  ): Promise<number> {
    return this.prisma.periodApplication.count(args);
  }

  async periodApplications<T extends Prisma.PeriodApplicationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PeriodApplicationFindManyArgs>
  ): Promise<PrismaPeriodApplication[]> {
    return this.prisma.periodApplication.findMany(args);
  }
  async periodApplication<T extends Prisma.PeriodApplicationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PeriodApplicationFindUniqueArgs>
  ): Promise<PrismaPeriodApplication | null> {
    return this.prisma.periodApplication.findUnique(args);
  }
  async createPeriodApplication<T extends Prisma.PeriodApplicationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PeriodApplicationCreateArgs>
  ): Promise<PrismaPeriodApplication> {
    return this.prisma.periodApplication.create<T>(args);
  }
  async updatePeriodApplication<T extends Prisma.PeriodApplicationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PeriodApplicationUpdateArgs>
  ): Promise<PrismaPeriodApplication> {
    return this.prisma.periodApplication.update<T>(args);
  }
  async deletePeriodApplication<T extends Prisma.PeriodApplicationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PeriodApplicationDeleteArgs>
  ): Promise<PrismaPeriodApplication> {
    return this.prisma.periodApplication.delete(args);
  }

  async getApplication(parentId: number): Promise<PrismaApplication | null> {
    return this.prisma.periodApplication
      .findUnique({
        where: { id: parentId },
      })
      .application();
  }

  async getPeriod(parentId: number): Promise<PrismaPeriod | null> {
    return this.prisma.periodApplication
      .findUnique({
        where: { id: parentId },
      })
      .period();
  }
}
