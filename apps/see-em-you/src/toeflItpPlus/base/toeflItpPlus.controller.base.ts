/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ToeflItpPlusService } from "../toeflItpPlus.service";
import { ToeflItpPlusCreateInput } from "./ToeflItpPlusCreateInput";
import { ToeflItpPlus } from "./ToeflItpPlus";
import { ToeflItpPlusFindManyArgs } from "./ToeflItpPlusFindManyArgs";
import { ToeflItpPlusWhereUniqueInput } from "./ToeflItpPlusWhereUniqueInput";
import { ToeflItpPlusUpdateInput } from "./ToeflItpPlusUpdateInput";

export class ToeflItpPlusControllerBase {
  constructor(protected readonly service: ToeflItpPlusService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ToeflItpPlus })
  async createToeflItpPlus(
    @common.Body() data: ToeflItpPlusCreateInput
  ): Promise<ToeflItpPlus> {
    return await this.service.createToeflItpPlus({
      data: data,
      select: {
        applicationId: true,
        datafileId: true,
        id: true,
        listeningscore: true,
        overallscore: true,
        readingscore: true,
        scorereceived: true,
        testdate: true,
        testEmail: true,
        url: true,
        writingscore: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ToeflItpPlus] })
  @ApiNestedQuery(ToeflItpPlusFindManyArgs)
  async toeflItpPluses(
    @common.Req() request: Request
  ): Promise<ToeflItpPlus[]> {
    const args = plainToClass(ToeflItpPlusFindManyArgs, request.query);
    return this.service.toeflItpPluses({
      ...args,
      select: {
        applicationId: true,
        datafileId: true,
        id: true,
        listeningscore: true,
        overallscore: true,
        readingscore: true,
        scorereceived: true,
        testdate: true,
        testEmail: true,
        url: true,
        writingscore: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ToeflItpPlus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async toeflItpPlus(
    @common.Param() params: ToeflItpPlusWhereUniqueInput
  ): Promise<ToeflItpPlus | null> {
    const result = await this.service.toeflItpPlus({
      where: params,
      select: {
        applicationId: true,
        datafileId: true,
        id: true,
        listeningscore: true,
        overallscore: true,
        readingscore: true,
        scorereceived: true,
        testdate: true,
        testEmail: true,
        url: true,
        writingscore: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ToeflItpPlus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateToeflItpPlus(
    @common.Param() params: ToeflItpPlusWhereUniqueInput,
    @common.Body() data: ToeflItpPlusUpdateInput
  ): Promise<ToeflItpPlus | null> {
    try {
      return await this.service.updateToeflItpPlus({
        where: params,
        data: data,
        select: {
          applicationId: true,
          datafileId: true,
          id: true,
          listeningscore: true,
          overallscore: true,
          readingscore: true,
          scorereceived: true,
          testdate: true,
          testEmail: true,
          url: true,
          writingscore: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ToeflItpPlus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteToeflItpPlus(
    @common.Param() params: ToeflItpPlusWhereUniqueInput
  ): Promise<ToeflItpPlus | null> {
    try {
      return await this.service.deleteToeflItpPlus({
        where: params,
        select: {
          applicationId: true,
          datafileId: true,
          id: true,
          listeningscore: true,
          overallscore: true,
          readingscore: true,
          scorereceived: true,
          testdate: true,
          testEmail: true,
          url: true,
          writingscore: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
