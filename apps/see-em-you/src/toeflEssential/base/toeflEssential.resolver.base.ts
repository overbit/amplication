/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateToeflEssentialArgs } from "./CreateToeflEssentialArgs";
import { UpdateToeflEssentialArgs } from "./UpdateToeflEssentialArgs";
import { DeleteToeflEssentialArgs } from "./DeleteToeflEssentialArgs";
import { ToeflEssentialCountArgs } from "./ToeflEssentialCountArgs";
import { ToeflEssentialFindManyArgs } from "./ToeflEssentialFindManyArgs";
import { ToeflEssentialFindUniqueArgs } from "./ToeflEssentialFindUniqueArgs";
import { ToeflEssential } from "./ToeflEssential";
import { ToeflEssentialService } from "../toeflEssential.service";
@graphql.Resolver(() => ToeflEssential)
export class ToeflEssentialResolverBase {
  constructor(protected readonly service: ToeflEssentialService) {}

  async _toeflEssentialsMeta(
    @graphql.Args() args: ToeflEssentialCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ToeflEssential])
  async toeflEssentials(
    @graphql.Args() args: ToeflEssentialFindManyArgs
  ): Promise<ToeflEssential[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ToeflEssential, { nullable: true })
  async toeflEssential(
    @graphql.Args() args: ToeflEssentialFindUniqueArgs
  ): Promise<ToeflEssential | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ToeflEssential)
  async createToeflEssential(
    @graphql.Args() args: CreateToeflEssentialArgs
  ): Promise<ToeflEssential> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ToeflEssential)
  async updateToeflEssential(
    @graphql.Args() args: UpdateToeflEssentialArgs
  ): Promise<ToeflEssential | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ToeflEssential)
  async deleteToeflEssential(
    @graphql.Args() args: DeleteToeflEssentialArgs
  ): Promise<ToeflEssential | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
