/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ToeflEssentialService } from "../toeflEssential.service";
import { ToeflEssentialCreateInput } from "./ToeflEssentialCreateInput";
import { ToeflEssential } from "./ToeflEssential";
import { ToeflEssentialFindManyArgs } from "./ToeflEssentialFindManyArgs";
import { ToeflEssentialWhereUniqueInput } from "./ToeflEssentialWhereUniqueInput";
import { ToeflEssentialUpdateInput } from "./ToeflEssentialUpdateInput";

export class ToeflEssentialControllerBase {
  constructor(protected readonly service: ToeflEssentialService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ToeflEssential })
  async createToeflEssential(
    @common.Body() data: ToeflEssentialCreateInput
  ): Promise<ToeflEssential> {
    return await this.service.createToeflEssential({
      data: data,
      select: {
        applicationId: true,
        datafileId: true,
        id: true,
        listeningscore: true,
        listeningscoremb: true,
        overallscore: true,
        overallscoremb: true,
        readingscore: true,
        readingscoremb: true,
        scorereceived: true,
        speakingscore: true,
        speakingscoremb: true,
        testdate: true,
        testEmail: true,
        url: true,
        writingscore: true,
        writingscoremb: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ToeflEssential] })
  @ApiNestedQuery(ToeflEssentialFindManyArgs)
  async toeflEssentials(
    @common.Req() request: Request
  ): Promise<ToeflEssential[]> {
    const args = plainToClass(ToeflEssentialFindManyArgs, request.query);
    return this.service.toeflEssentials({
      ...args,
      select: {
        applicationId: true,
        datafileId: true,
        id: true,
        listeningscore: true,
        listeningscoremb: true,
        overallscore: true,
        overallscoremb: true,
        readingscore: true,
        readingscoremb: true,
        scorereceived: true,
        speakingscore: true,
        speakingscoremb: true,
        testdate: true,
        testEmail: true,
        url: true,
        writingscore: true,
        writingscoremb: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ToeflEssential })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async toeflEssential(
    @common.Param() params: ToeflEssentialWhereUniqueInput
  ): Promise<ToeflEssential | null> {
    const result = await this.service.toeflEssential({
      where: params,
      select: {
        applicationId: true,
        datafileId: true,
        id: true,
        listeningscore: true,
        listeningscoremb: true,
        overallscore: true,
        overallscoremb: true,
        readingscore: true,
        readingscoremb: true,
        scorereceived: true,
        speakingscore: true,
        speakingscoremb: true,
        testdate: true,
        testEmail: true,
        url: true,
        writingscore: true,
        writingscoremb: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ToeflEssential })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateToeflEssential(
    @common.Param() params: ToeflEssentialWhereUniqueInput,
    @common.Body() data: ToeflEssentialUpdateInput
  ): Promise<ToeflEssential | null> {
    try {
      return await this.service.updateToeflEssential({
        where: params,
        data: data,
        select: {
          applicationId: true,
          datafileId: true,
          id: true,
          listeningscore: true,
          listeningscoremb: true,
          overallscore: true,
          overallscoremb: true,
          readingscore: true,
          readingscoremb: true,
          scorereceived: true,
          speakingscore: true,
          speakingscoremb: true,
          testdate: true,
          testEmail: true,
          url: true,
          writingscore: true,
          writingscoremb: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ToeflEssential })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteToeflEssential(
    @common.Param() params: ToeflEssentialWhereUniqueInput
  ): Promise<ToeflEssential | null> {
    try {
      return await this.service.deleteToeflEssential({
        where: params,
        select: {
          applicationId: true,
          datafileId: true,
          id: true,
          listeningscore: true,
          listeningscoremb: true,
          overallscore: true,
          overallscoremb: true,
          readingscore: true,
          readingscoremb: true,
          scorereceived: true,
          speakingscore: true,
          speakingscoremb: true,
          testdate: true,
          testEmail: true,
          url: true,
          writingscore: true,
          writingscoremb: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
