/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VoucherService } from "../voucher.service";
import { VoucherCreateInput } from "./VoucherCreateInput";
import { Voucher } from "./Voucher";
import { VoucherFindManyArgs } from "./VoucherFindManyArgs";
import { VoucherWhereUniqueInput } from "./VoucherWhereUniqueInput";
import { VoucherUpdateInput } from "./VoucherUpdateInput";

export class VoucherControllerBase {
  constructor(protected readonly service: VoucherService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Voucher })
  async createVoucher(
    @common.Body() data: VoucherCreateInput
  ): Promise<Voucher> {
    return await this.service.createVoucher({
      data: data,
      select: {
        code: true,
        active: true,
        allowMultiple: true,
        prettyCode: true,
        prog: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Voucher] })
  @ApiNestedQuery(VoucherFindManyArgs)
  async vouchers(@common.Req() request: Request): Promise<Voucher[]> {
    const args = plainToClass(VoucherFindManyArgs, request.query);
    return this.service.vouchers({
      ...args,
      select: {
        code: true,
        active: true,
        allowMultiple: true,
        prettyCode: true,
        prog: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Voucher })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async voucher(
    @common.Param() params: VoucherWhereUniqueInput
  ): Promise<Voucher | null> {
    const result = await this.service.voucher({
      where: params,
      select: {
        code: true,
        active: true,
        allowMultiple: true,
        prettyCode: true,
        prog: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Voucher })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVoucher(
    @common.Param() params: VoucherWhereUniqueInput,
    @common.Body() data: VoucherUpdateInput
  ): Promise<Voucher | null> {
    try {
      return await this.service.updateVoucher({
        where: params,
        data: data,
        select: {
          code: true,
          active: true,
          allowMultiple: true,
          prettyCode: true,
          prog: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Voucher })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVoucher(
    @common.Param() params: VoucherWhereUniqueInput
  ): Promise<Voucher | null> {
    try {
      return await this.service.deleteVoucher({
        where: params,
        select: {
          code: true,
          active: true,
          allowMultiple: true,
          prettyCode: true,
          prog: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
