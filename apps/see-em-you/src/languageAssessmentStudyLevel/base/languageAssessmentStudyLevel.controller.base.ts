/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LanguageAssessmentStudyLevelService } from "../languageAssessmentStudyLevel.service";
import { LanguageAssessmentStudyLevelCreateInput } from "./LanguageAssessmentStudyLevelCreateInput";
import { LanguageAssessmentStudyLevel } from "./LanguageAssessmentStudyLevel";
import { LanguageAssessmentStudyLevelFindManyArgs } from "./LanguageAssessmentStudyLevelFindManyArgs";
import { LanguageAssessmentStudyLevelWhereUniqueInput } from "./LanguageAssessmentStudyLevelWhereUniqueInput";
import { LanguageAssessmentStudyLevelUpdateInput } from "./LanguageAssessmentStudyLevelUpdateInput";

export class LanguageAssessmentStudyLevelControllerBase {
  constructor(
    protected readonly service: LanguageAssessmentStudyLevelService
  ) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LanguageAssessmentStudyLevel })
  async createLanguageAssessmentStudyLevel(
    @common.Body() data: LanguageAssessmentStudyLevelCreateInput
  ): Promise<LanguageAssessmentStudyLevel> {
    return await this.service.createLanguageAssessmentStudyLevel({
      data: data,
      select: {
        value: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LanguageAssessmentStudyLevel] })
  @ApiNestedQuery(LanguageAssessmentStudyLevelFindManyArgs)
  async languageAssessmentStudyLevels(
    @common.Req() request: Request
  ): Promise<LanguageAssessmentStudyLevel[]> {
    const args = plainToClass(
      LanguageAssessmentStudyLevelFindManyArgs,
      request.query
    );
    return this.service.languageAssessmentStudyLevels({
      ...args,
      select: {
        value: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LanguageAssessmentStudyLevel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async languageAssessmentStudyLevel(
    @common.Param() params: LanguageAssessmentStudyLevelWhereUniqueInput
  ): Promise<LanguageAssessmentStudyLevel | null> {
    const result = await this.service.languageAssessmentStudyLevel({
      where: params,
      select: {
        value: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LanguageAssessmentStudyLevel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLanguageAssessmentStudyLevel(
    @common.Param() params: LanguageAssessmentStudyLevelWhereUniqueInput,
    @common.Body() data: LanguageAssessmentStudyLevelUpdateInput
  ): Promise<LanguageAssessmentStudyLevel | null> {
    try {
      return await this.service.updateLanguageAssessmentStudyLevel({
        where: params,
        data: data,
        select: {
          value: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LanguageAssessmentStudyLevel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLanguageAssessmentStudyLevel(
    @common.Param() params: LanguageAssessmentStudyLevelWhereUniqueInput
  ): Promise<LanguageAssessmentStudyLevel | null> {
    try {
      return await this.service.deleteLanguageAssessmentStudyLevel({
        where: params,
        select: {
          value: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
