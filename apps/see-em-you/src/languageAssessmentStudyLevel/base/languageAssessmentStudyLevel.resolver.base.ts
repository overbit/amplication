/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateLanguageAssessmentStudyLevelArgs } from "./CreateLanguageAssessmentStudyLevelArgs";
import { UpdateLanguageAssessmentStudyLevelArgs } from "./UpdateLanguageAssessmentStudyLevelArgs";
import { DeleteLanguageAssessmentStudyLevelArgs } from "./DeleteLanguageAssessmentStudyLevelArgs";
import { LanguageAssessmentStudyLevelCountArgs } from "./LanguageAssessmentStudyLevelCountArgs";
import { LanguageAssessmentStudyLevelFindManyArgs } from "./LanguageAssessmentStudyLevelFindManyArgs";
import { LanguageAssessmentStudyLevelFindUniqueArgs } from "./LanguageAssessmentStudyLevelFindUniqueArgs";
import { LanguageAssessmentStudyLevel } from "./LanguageAssessmentStudyLevel";
import { LanguageAssessmentStudyLevelService } from "../languageAssessmentStudyLevel.service";
@graphql.Resolver(() => LanguageAssessmentStudyLevel)
export class LanguageAssessmentStudyLevelResolverBase {
  constructor(
    protected readonly service: LanguageAssessmentStudyLevelService
  ) {}

  async _languageAssessmentStudyLevelsMeta(
    @graphql.Args() args: LanguageAssessmentStudyLevelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LanguageAssessmentStudyLevel])
  async languageAssessmentStudyLevels(
    @graphql.Args() args: LanguageAssessmentStudyLevelFindManyArgs
  ): Promise<LanguageAssessmentStudyLevel[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => LanguageAssessmentStudyLevel, { nullable: true })
  async languageAssessmentStudyLevel(
    @graphql.Args() args: LanguageAssessmentStudyLevelFindUniqueArgs
  ): Promise<LanguageAssessmentStudyLevel | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LanguageAssessmentStudyLevel)
  async createLanguageAssessmentStudyLevel(
    @graphql.Args() args: CreateLanguageAssessmentStudyLevelArgs
  ): Promise<LanguageAssessmentStudyLevel> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LanguageAssessmentStudyLevel)
  async updateLanguageAssessmentStudyLevel(
    @graphql.Args() args: UpdateLanguageAssessmentStudyLevelArgs
  ): Promise<LanguageAssessmentStudyLevel | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LanguageAssessmentStudyLevel)
  async deleteLanguageAssessmentStudyLevel(
    @graphql.Args() args: DeleteLanguageAssessmentStudyLevelArgs
  ): Promise<LanguageAssessmentStudyLevel | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
