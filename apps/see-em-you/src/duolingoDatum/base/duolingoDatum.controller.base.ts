/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DuolingoDatumService } from "../duolingoDatum.service";
import { DuolingoDatumCreateInput } from "./DuolingoDatumCreateInput";
import { DuolingoDatum } from "./DuolingoDatum";
import { DuolingoDatumFindManyArgs } from "./DuolingoDatumFindManyArgs";
import { DuolingoDatumWhereUniqueInput } from "./DuolingoDatumWhereUniqueInput";
import { DuolingoDatumUpdateInput } from "./DuolingoDatumUpdateInput";

export class DuolingoDatumControllerBase {
  constructor(protected readonly service: DuolingoDatumService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DuolingoDatum })
  async createDuolingoDatum(
    @common.Body() data: DuolingoDatumCreateInput
  ): Promise<DuolingoDatum> {
    return await this.service.createDuolingoDatum({
      data: data,
      select: {
        lastName: true,
        givenNames: true,
        couponId: true,
        sessionId: true,
        fullName: true,
        firstName: true,
        userId: true,
        certificateUrl: true,
        middleNames: true,
        applicantId: true,
        surnames: true,
        email: true,
        embedUrl: true,
        interviewUrl: true,
        language: true,
        country: true,
        birthdate: true,
        testDate: true,
        verificationDate: true,
        overallScore: true,
        scale: true,
        conversationSubscore: true,
        productionSubscore: true,
        literacySubscore: true,
        certified: true,
        comprehensionSubscore: true,
        percentScore: true,
        applicationId: true,
        school: true,
        domain: true,
        insertDate: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DuolingoDatum] })
  @ApiNestedQuery(DuolingoDatumFindManyArgs)
  async duolingoData(@common.Req() request: Request): Promise<DuolingoDatum[]> {
    const args = plainToClass(DuolingoDatumFindManyArgs, request.query);
    return this.service.duolingoData({
      ...args,
      select: {
        lastName: true,
        givenNames: true,
        couponId: true,
        sessionId: true,
        fullName: true,
        firstName: true,
        userId: true,
        certificateUrl: true,
        middleNames: true,
        applicantId: true,
        surnames: true,
        email: true,
        embedUrl: true,
        interviewUrl: true,
        language: true,
        country: true,
        birthdate: true,
        testDate: true,
        verificationDate: true,
        overallScore: true,
        scale: true,
        conversationSubscore: true,
        productionSubscore: true,
        literacySubscore: true,
        certified: true,
        comprehensionSubscore: true,
        percentScore: true,
        applicationId: true,
        school: true,
        domain: true,
        insertDate: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DuolingoDatum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async duolingoDatum(
    @common.Param() params: DuolingoDatumWhereUniqueInput
  ): Promise<DuolingoDatum | null> {
    const result = await this.service.duolingoDatum({
      where: params,
      select: {
        lastName: true,
        givenNames: true,
        couponId: true,
        sessionId: true,
        fullName: true,
        firstName: true,
        userId: true,
        certificateUrl: true,
        middleNames: true,
        applicantId: true,
        surnames: true,
        email: true,
        embedUrl: true,
        interviewUrl: true,
        language: true,
        country: true,
        birthdate: true,
        testDate: true,
        verificationDate: true,
        overallScore: true,
        scale: true,
        conversationSubscore: true,
        productionSubscore: true,
        literacySubscore: true,
        certified: true,
        comprehensionSubscore: true,
        percentScore: true,
        applicationId: true,
        school: true,
        domain: true,
        insertDate: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DuolingoDatum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDuolingoDatum(
    @common.Param() params: DuolingoDatumWhereUniqueInput,
    @common.Body() data: DuolingoDatumUpdateInput
  ): Promise<DuolingoDatum | null> {
    try {
      return await this.service.updateDuolingoDatum({
        where: params,
        data: data,
        select: {
          lastName: true,
          givenNames: true,
          couponId: true,
          sessionId: true,
          fullName: true,
          firstName: true,
          userId: true,
          certificateUrl: true,
          middleNames: true,
          applicantId: true,
          surnames: true,
          email: true,
          embedUrl: true,
          interviewUrl: true,
          language: true,
          country: true,
          birthdate: true,
          testDate: true,
          verificationDate: true,
          overallScore: true,
          scale: true,
          conversationSubscore: true,
          productionSubscore: true,
          literacySubscore: true,
          certified: true,
          comprehensionSubscore: true,
          percentScore: true,
          applicationId: true,
          school: true,
          domain: true,
          insertDate: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DuolingoDatum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDuolingoDatum(
    @common.Param() params: DuolingoDatumWhereUniqueInput
  ): Promise<DuolingoDatum | null> {
    try {
      return await this.service.deleteDuolingoDatum({
        where: params,
        select: {
          lastName: true,
          givenNames: true,
          couponId: true,
          sessionId: true,
          fullName: true,
          firstName: true,
          userId: true,
          certificateUrl: true,
          middleNames: true,
          applicantId: true,
          surnames: true,
          email: true,
          embedUrl: true,
          interviewUrl: true,
          language: true,
          country: true,
          birthdate: true,
          testDate: true,
          verificationDate: true,
          overallScore: true,
          scale: true,
          conversationSubscore: true,
          productionSubscore: true,
          literacySubscore: true,
          certified: true,
          comprehensionSubscore: true,
          percentScore: true,
          applicationId: true,
          school: true,
          domain: true,
          insertDate: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
