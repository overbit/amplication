/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SlateRecommend as PrismaSlateRecommend } from "@prisma/client";

export class SlateRecommendServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.SlateRecommendCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.SlateRecommendCountArgs>
  ): Promise<number> {
    return this.prisma.slateRecommend.count(args);
  }

  async slateRecommends<T extends Prisma.SlateRecommendFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SlateRecommendFindManyArgs>
  ): Promise<PrismaSlateRecommend[]> {
    return this.prisma.slateRecommend.findMany(args);
  }
  async slateRecommend<T extends Prisma.SlateRecommendFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SlateRecommendFindUniqueArgs>
  ): Promise<PrismaSlateRecommend | null> {
    return this.prisma.slateRecommend.findUnique(args);
  }
  async createSlateRecommend<T extends Prisma.SlateRecommendCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SlateRecommendCreateArgs>
  ): Promise<PrismaSlateRecommend> {
    return this.prisma.slateRecommend.create<T>(args);
  }
  async updateSlateRecommend<T extends Prisma.SlateRecommendUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SlateRecommendUpdateArgs>
  ): Promise<PrismaSlateRecommend> {
    return this.prisma.slateRecommend.update<T>(args);
  }
  async deleteSlateRecommend<T extends Prisma.SlateRecommendDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SlateRecommendDeleteArgs>
  ): Promise<PrismaSlateRecommend> {
    return this.prisma.slateRecommend.delete(args);
  }
}
