/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { JiraIssueService } from "../jiraIssue.service";
import { JiraIssueCreateInput } from "./JiraIssueCreateInput";
import { JiraIssue } from "./JiraIssue";
import { JiraIssueFindManyArgs } from "./JiraIssueFindManyArgs";
import { JiraIssueWhereUniqueInput } from "./JiraIssueWhereUniqueInput";
import { JiraIssueUpdateInput } from "./JiraIssueUpdateInput";

export class JiraIssueControllerBase {
  constructor(protected readonly service: JiraIssueService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: JiraIssue })
  async createJiraIssue(
    @common.Body() data: JiraIssueCreateInput
  ): Promise<JiraIssue> {
    return await this.service.createJiraIssue({
      data: data,
      select: {
        created: true,
        id: true,
        jiraId: true,
        jiraIssueId: true,
        jiraProject: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [JiraIssue] })
  @ApiNestedQuery(JiraIssueFindManyArgs)
  async jiraIssues(@common.Req() request: Request): Promise<JiraIssue[]> {
    const args = plainToClass(JiraIssueFindManyArgs, request.query);
    return this.service.jiraIssues({
      ...args,
      select: {
        created: true,
        id: true,
        jiraId: true,
        jiraIssueId: true,
        jiraProject: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: JiraIssue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async jiraIssue(
    @common.Param() params: JiraIssueWhereUniqueInput
  ): Promise<JiraIssue | null> {
    const result = await this.service.jiraIssue({
      where: params,
      select: {
        created: true,
        id: true,
        jiraId: true,
        jiraIssueId: true,
        jiraProject: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: JiraIssue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateJiraIssue(
    @common.Param() params: JiraIssueWhereUniqueInput,
    @common.Body() data: JiraIssueUpdateInput
  ): Promise<JiraIssue | null> {
    try {
      return await this.service.updateJiraIssue({
        where: params,
        data: data,
        select: {
          created: true,
          id: true,
          jiraId: true,
          jiraIssueId: true,
          jiraProject: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: JiraIssue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteJiraIssue(
    @common.Param() params: JiraIssueWhereUniqueInput
  ): Promise<JiraIssue | null> {
    try {
      return await this.service.deleteJiraIssue({
        where: params,
        select: {
          created: true,
          id: true,
          jiraId: true,
          jiraIssueId: true,
          jiraProject: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
