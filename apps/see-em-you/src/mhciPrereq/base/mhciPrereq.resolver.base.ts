/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MhciPrereq } from "./MhciPrereq";
import { MhciPrereqCountArgs } from "./MhciPrereqCountArgs";
import { MhciPrereqFindManyArgs } from "./MhciPrereqFindManyArgs";
import { MhciPrereqFindUniqueArgs } from "./MhciPrereqFindUniqueArgs";
import { CreateMhciPrereqArgs } from "./CreateMhciPrereqArgs";
import { UpdateMhciPrereqArgs } from "./UpdateMhciPrereqArgs";
import { DeleteMhciPrereqArgs } from "./DeleteMhciPrereqArgs";
import { MhciPrereqsConversationCommentFindManyArgs } from "../../mhciPrereqsConversationComment/base/MhciPrereqsConversationCommentFindManyArgs";
import { MhciPrereqsConversationComment } from "../../mhciPrereqsConversationComment/base/MhciPrereqsConversationComment";
import { Application } from "../../application/base/Application";
import { MhciPrereqsStatus } from "../../mhciPrereqsStatus/base/MhciPrereqsStatus";
import { MhciPrereqService } from "../mhciPrereq.service";
@graphql.Resolver(() => MhciPrereq)
export class MhciPrereqResolverBase {
  constructor(protected readonly service: MhciPrereqService) {}

  async _mhciPrereqsMeta(
    @graphql.Args() args: MhciPrereqCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MhciPrereq])
  async mhciPrereqs(
    @graphql.Args() args: MhciPrereqFindManyArgs
  ): Promise<MhciPrereq[]> {
    return this.service.mhciPrereqs(args);
  }

  @graphql.Query(() => MhciPrereq, { nullable: true })
  async mhciPrereq(
    @graphql.Args() args: MhciPrereqFindUniqueArgs
  ): Promise<MhciPrereq | null> {
    const result = await this.service.mhciPrereq(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MhciPrereq)
  async createMhciPrereq(
    @graphql.Args() args: CreateMhciPrereqArgs
  ): Promise<MhciPrereq> {
    return await this.service.createMhciPrereq({
      ...args,
      data: {
        ...args.data,

        application: {
          connect: args.data.application,
        },

        mhciPrereqsStatus: args.data.mhciPrereqsStatus
          ? {
              connect: args.data.mhciPrereqsStatus,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => MhciPrereq)
  async updateMhciPrereq(
    @graphql.Args() args: UpdateMhciPrereqArgs
  ): Promise<MhciPrereq | null> {
    try {
      return await this.service.updateMhciPrereq({
        ...args,
        data: {
          ...args.data,

          application: {
            connect: args.data.application,
          },

          mhciPrereqsStatus: args.data.mhciPrereqsStatus
            ? {
                connect: args.data.mhciPrereqsStatus,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MhciPrereq)
  async deleteMhciPrereq(
    @graphql.Args() args: DeleteMhciPrereqArgs
  ): Promise<MhciPrereq | null> {
    try {
      return await this.service.deleteMhciPrereq(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [MhciPrereqsConversationComment], {
    name: "mhciPrereqsConversationComments",
  })
  async findMhciPrereqsConversationComments(
    @graphql.Parent() parent: MhciPrereq,
    @graphql.Args() args: MhciPrereqsConversationCommentFindManyArgs
  ): Promise<MhciPrereqsConversationComment[]> {
    const results = await this.service.findMhciPrereqsConversationComments(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Application, {
    nullable: true,
    name: "application",
  })
  async getApplication(
    @graphql.Parent() parent: MhciPrereq
  ): Promise<Application | null> {
    const result = await this.service.getApplication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => MhciPrereqsStatus, {
    nullable: true,
    name: "mhciPrereqsStatus",
  })
  async getMhciPrereqsStatus(
    @graphql.Parent() parent: MhciPrereq
  ): Promise<MhciPrereqsStatus | null> {
    const result = await this.service.getMhciPrereqsStatus(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
