/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MhciPrereq, // @ts-ignore
  MhciPrereqsConversationComment, // @ts-ignore
  Application, // @ts-ignore
  MhciPrereqsStatus,
} from "@prisma/client";

export class MhciPrereqServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.MhciPrereqCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.MhciPrereqCountArgs>
  ): Promise<number> {
    return this.prisma.mhciPrereq.count(args);
  }

  async mhciPrereqs<T extends Prisma.MhciPrereqFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MhciPrereqFindManyArgs>
  ): Promise<MhciPrereq[]> {
    return this.prisma.mhciPrereq.findMany(args);
  }
  async mhciPrereq<T extends Prisma.MhciPrereqFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MhciPrereqFindUniqueArgs>
  ): Promise<MhciPrereq | null> {
    return this.prisma.mhciPrereq.findUnique(args);
  }
  async createMhciPrereq<T extends Prisma.MhciPrereqCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MhciPrereqCreateArgs>
  ): Promise<MhciPrereq> {
    return this.prisma.mhciPrereq.create<T>(args);
  }
  async updateMhciPrereq<T extends Prisma.MhciPrereqUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MhciPrereqUpdateArgs>
  ): Promise<MhciPrereq> {
    return this.prisma.mhciPrereq.update<T>(args);
  }
  async deleteMhciPrereq<T extends Prisma.MhciPrereqDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MhciPrereqDeleteArgs>
  ): Promise<MhciPrereq> {
    return this.prisma.mhciPrereq.delete(args);
  }

  async findMhciPrereqsConversationComments(
    parentId: number,
    args: Prisma.MhciPrereqsConversationCommentFindManyArgs
  ): Promise<MhciPrereqsConversationComment[]> {
    return this.prisma.mhciPrereq
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .mhciPrereqsConversationComments(args);
  }

  async getApplication(parentId: number): Promise<Application | null> {
    return this.prisma.mhciPrereq
      .findUnique({
        where: { id: parentId },
      })
      .application();
  }

  async getMhciPrereqsStatus(
    parentId: number
  ): Promise<MhciPrereqsStatus | null> {
    return this.prisma.mhciPrereq
      .findUnique({
        where: { id: parentId },
      })
      .mhciPrereqsStatus();
  }
}
