/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MseBridgeCourseDecisionService } from "../mseBridgeCourseDecision.service";
import { MseBridgeCourseDecisionCreateInput } from "./MseBridgeCourseDecisionCreateInput";
import { MseBridgeCourseDecision } from "./MseBridgeCourseDecision";
import { MseBridgeCourseDecisionFindManyArgs } from "./MseBridgeCourseDecisionFindManyArgs";
import { MseBridgeCourseDecisionWhereUniqueInput } from "./MseBridgeCourseDecisionWhereUniqueInput";
import { MseBridgeCourseDecisionUpdateInput } from "./MseBridgeCourseDecisionUpdateInput";

export class MseBridgeCourseDecisionControllerBase {
  constructor(protected readonly service: MseBridgeCourseDecisionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MseBridgeCourseDecision })
  async createMseBridgeCourseDecision(
    @common.Body() data: MseBridgeCourseDecisionCreateInput
  ): Promise<MseBridgeCourseDecision> {
    return await this.service.createMseBridgeCourseDecision({
      data: data,
      select: {
        applicationId: true,
        programId: true,
        courseId: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MseBridgeCourseDecision] })
  @ApiNestedQuery(MseBridgeCourseDecisionFindManyArgs)
  async mseBridgeCourseDecisions(
    @common.Req() request: Request
  ): Promise<MseBridgeCourseDecision[]> {
    const args = plainToClass(
      MseBridgeCourseDecisionFindManyArgs,
      request.query
    );
    return this.service.mseBridgeCourseDecisions({
      ...args,
      select: {
        applicationId: true,
        programId: true,
        courseId: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MseBridgeCourseDecision })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mseBridgeCourseDecision(
    @common.Param() params: MseBridgeCourseDecisionWhereUniqueInput
  ): Promise<MseBridgeCourseDecision | null> {
    const result = await this.service.mseBridgeCourseDecision({
      where: params,
      select: {
        applicationId: true,
        programId: true,
        courseId: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MseBridgeCourseDecision })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMseBridgeCourseDecision(
    @common.Param() params: MseBridgeCourseDecisionWhereUniqueInput,
    @common.Body() data: MseBridgeCourseDecisionUpdateInput
  ): Promise<MseBridgeCourseDecision | null> {
    try {
      return await this.service.updateMseBridgeCourseDecision({
        where: params,
        data: data,
        select: {
          applicationId: true,
          programId: true,
          courseId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MseBridgeCourseDecision })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMseBridgeCourseDecision(
    @common.Param() params: MseBridgeCourseDecisionWhereUniqueInput
  ): Promise<MseBridgeCourseDecision | null> {
    try {
      return await this.service.deleteMseBridgeCourseDecision({
        where: params,
        select: {
          applicationId: true,
          programId: true,
          courseId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
