/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MseBridgeCourseDecision } from "./MseBridgeCourseDecision";
import { MseBridgeCourseDecisionCountArgs } from "./MseBridgeCourseDecisionCountArgs";
import { MseBridgeCourseDecisionFindManyArgs } from "./MseBridgeCourseDecisionFindManyArgs";
import { MseBridgeCourseDecisionFindUniqueArgs } from "./MseBridgeCourseDecisionFindUniqueArgs";
import { CreateMseBridgeCourseDecisionArgs } from "./CreateMseBridgeCourseDecisionArgs";
import { UpdateMseBridgeCourseDecisionArgs } from "./UpdateMseBridgeCourseDecisionArgs";
import { DeleteMseBridgeCourseDecisionArgs } from "./DeleteMseBridgeCourseDecisionArgs";
import { MseBridgeCourseDecisionService } from "../mseBridgeCourseDecision.service";
@graphql.Resolver(() => MseBridgeCourseDecision)
export class MseBridgeCourseDecisionResolverBase {
  constructor(protected readonly service: MseBridgeCourseDecisionService) {}

  async _mseBridgeCourseDecisionsMeta(
    @graphql.Args() args: MseBridgeCourseDecisionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MseBridgeCourseDecision])
  async mseBridgeCourseDecisions(
    @graphql.Args() args: MseBridgeCourseDecisionFindManyArgs
  ): Promise<MseBridgeCourseDecision[]> {
    return this.service.mseBridgeCourseDecisions(args);
  }

  @graphql.Query(() => MseBridgeCourseDecision, { nullable: true })
  async mseBridgeCourseDecision(
    @graphql.Args() args: MseBridgeCourseDecisionFindUniqueArgs
  ): Promise<MseBridgeCourseDecision | null> {
    const result = await this.service.mseBridgeCourseDecision(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MseBridgeCourseDecision)
  async createMseBridgeCourseDecision(
    @graphql.Args() args: CreateMseBridgeCourseDecisionArgs
  ): Promise<MseBridgeCourseDecision> {
    return await this.service.createMseBridgeCourseDecision({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MseBridgeCourseDecision)
  async updateMseBridgeCourseDecision(
    @graphql.Args() args: UpdateMseBridgeCourseDecisionArgs
  ): Promise<MseBridgeCourseDecision | null> {
    try {
      return await this.service.updateMseBridgeCourseDecision({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MseBridgeCourseDecision)
  async deleteMseBridgeCourseDecision(
    @graphql.Args() args: DeleteMseBridgeCourseDecisionArgs
  ): Promise<MseBridgeCourseDecision | null> {
    try {
      return await this.service.deleteMseBridgeCourseDecision(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
