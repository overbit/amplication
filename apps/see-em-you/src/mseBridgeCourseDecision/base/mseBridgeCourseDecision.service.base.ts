/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MseBridgeCourseDecision as PrismaMseBridgeCourseDecision,
} from "@prisma/client";

export class MseBridgeCourseDecisionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.MseBridgeCourseDecisionCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.MseBridgeCourseDecisionCountArgs>
  ): Promise<number> {
    return this.prisma.mseBridgeCourseDecision.count(args);
  }

  async mseBridgeCourseDecisions<
    T extends Prisma.MseBridgeCourseDecisionFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.MseBridgeCourseDecisionFindManyArgs>
  ): Promise<PrismaMseBridgeCourseDecision[]> {
    return this.prisma.mseBridgeCourseDecision.findMany(args);
  }
  async mseBridgeCourseDecision<
    T extends Prisma.MseBridgeCourseDecisionFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.MseBridgeCourseDecisionFindUniqueArgs>
  ): Promise<PrismaMseBridgeCourseDecision | null> {
    return this.prisma.mseBridgeCourseDecision.findUnique(args);
  }
  async createMseBridgeCourseDecision<
    T extends Prisma.MseBridgeCourseDecisionCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.MseBridgeCourseDecisionCreateArgs>
  ): Promise<PrismaMseBridgeCourseDecision> {
    return this.prisma.mseBridgeCourseDecision.create<T>(args);
  }
  async updateMseBridgeCourseDecision<
    T extends Prisma.MseBridgeCourseDecisionUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.MseBridgeCourseDecisionUpdateArgs>
  ): Promise<PrismaMseBridgeCourseDecision> {
    return this.prisma.mseBridgeCourseDecision.update<T>(args);
  }
  async deleteMseBridgeCourseDecision<
    T extends Prisma.MseBridgeCourseDecisionDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.MseBridgeCourseDecisionDeleteArgs>
  ): Promise<PrismaMseBridgeCourseDecision> {
    return this.prisma.mseBridgeCourseDecision.delete(args);
  }
}
