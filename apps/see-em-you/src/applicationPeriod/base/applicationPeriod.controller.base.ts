/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ApplicationPeriodService } from "../applicationPeriod.service";
import { ApplicationPeriodCreateInput } from "./ApplicationPeriodCreateInput";
import { ApplicationPeriod } from "./ApplicationPeriod";
import { ApplicationPeriodFindManyArgs } from "./ApplicationPeriodFindManyArgs";
import { ApplicationPeriodWhereUniqueInput } from "./ApplicationPeriodWhereUniqueInput";
import { ApplicationPeriodUpdateInput } from "./ApplicationPeriodUpdateInput";

export class ApplicationPeriodControllerBase {
  constructor(protected readonly service: ApplicationPeriodService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ApplicationPeriod })
  async createApplicationPeriod(
    @common.Body() data: ApplicationPeriodCreateInput
  ): Promise<ApplicationPeriod> {
    return await this.service.createApplicationPeriod({
      data: data,
      select: {
        departmentId: true,
        startDate: true,
        endDate: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ApplicationPeriod] })
  @ApiNestedQuery(ApplicationPeriodFindManyArgs)
  async applicationPeriods(
    @common.Req() request: Request
  ): Promise<ApplicationPeriod[]> {
    const args = plainToClass(ApplicationPeriodFindManyArgs, request.query);
    return this.service.applicationPeriods({
      ...args,
      select: {
        departmentId: true,
        startDate: true,
        endDate: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ApplicationPeriod })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async applicationPeriod(
    @common.Param() params: ApplicationPeriodWhereUniqueInput
  ): Promise<ApplicationPeriod | null> {
    const result = await this.service.applicationPeriod({
      where: params,
      select: {
        departmentId: true,
        startDate: true,
        endDate: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ApplicationPeriod })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateApplicationPeriod(
    @common.Param() params: ApplicationPeriodWhereUniqueInput,
    @common.Body() data: ApplicationPeriodUpdateInput
  ): Promise<ApplicationPeriod | null> {
    try {
      return await this.service.updateApplicationPeriod({
        where: params,
        data: data,
        select: {
          departmentId: true,
          startDate: true,
          endDate: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ApplicationPeriod })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteApplicationPeriod(
    @common.Param() params: ApplicationPeriodWhereUniqueInput
  ): Promise<ApplicationPeriod | null> {
    try {
      return await this.service.deleteApplicationPeriod({
        where: params,
        select: {
          departmentId: true,
          startDate: true,
          endDate: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
