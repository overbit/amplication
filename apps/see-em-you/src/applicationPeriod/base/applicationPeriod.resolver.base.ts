/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateApplicationPeriodArgs } from "./CreateApplicationPeriodArgs";
import { UpdateApplicationPeriodArgs } from "./UpdateApplicationPeriodArgs";
import { DeleteApplicationPeriodArgs } from "./DeleteApplicationPeriodArgs";
import { ApplicationPeriodCountArgs } from "./ApplicationPeriodCountArgs";
import { ApplicationPeriodFindManyArgs } from "./ApplicationPeriodFindManyArgs";
import { ApplicationPeriodFindUniqueArgs } from "./ApplicationPeriodFindUniqueArgs";
import { ApplicationPeriod } from "./ApplicationPeriod";
import { ApplicationPeriodService } from "../applicationPeriod.service";
@graphql.Resolver(() => ApplicationPeriod)
export class ApplicationPeriodResolverBase {
  constructor(protected readonly service: ApplicationPeriodService) {}

  async _applicationPeriodsMeta(
    @graphql.Args() args: ApplicationPeriodCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ApplicationPeriod])
  async applicationPeriods(
    @graphql.Args() args: ApplicationPeriodFindManyArgs
  ): Promise<ApplicationPeriod[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ApplicationPeriod, { nullable: true })
  async applicationPeriod(
    @graphql.Args() args: ApplicationPeriodFindUniqueArgs
  ): Promise<ApplicationPeriod | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ApplicationPeriod)
  async createApplicationPeriod(
    @graphql.Args() args: CreateApplicationPeriodArgs
  ): Promise<ApplicationPeriod> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ApplicationPeriod)
  async updateApplicationPeriod(
    @graphql.Args() args: UpdateApplicationPeriodArgs
  ): Promise<ApplicationPeriod | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ApplicationPeriod)
  async deleteApplicationPeriod(
    @graphql.Args() args: DeleteApplicationPeriodArgs
  ): Promise<ApplicationPeriod | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
