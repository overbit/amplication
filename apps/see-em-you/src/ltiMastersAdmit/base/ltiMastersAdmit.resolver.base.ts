/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DeleteLtiMastersAdmitArgs } from "./DeleteLtiMastersAdmitArgs";
import { LtiMastersAdmitCountArgs } from "./LtiMastersAdmitCountArgs";
import { LtiMastersAdmitFindManyArgs } from "./LtiMastersAdmitFindManyArgs";
import { LtiMastersAdmitFindUniqueArgs } from "./LtiMastersAdmitFindUniqueArgs";
import { LtiMastersAdmit } from "./LtiMastersAdmit";
import { LtiMastersAdmitService } from "../ltiMastersAdmit.service";
@graphql.Resolver(() => LtiMastersAdmit)
export class LtiMastersAdmitResolverBase {
  constructor(protected readonly service: LtiMastersAdmitService) {}

  async _ltiMastersAdmitsMeta(
    @graphql.Args() args: LtiMastersAdmitCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LtiMastersAdmit])
  async ltiMastersAdmits(
    @graphql.Args() args: LtiMastersAdmitFindManyArgs
  ): Promise<LtiMastersAdmit[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => LtiMastersAdmit, { nullable: true })
  async ltiMastersAdmit(
    @graphql.Args() args: LtiMastersAdmitFindUniqueArgs
  ): Promise<LtiMastersAdmit | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LtiMastersAdmit)
  async deleteLtiMastersAdmit(
    @graphql.Args() args: DeleteLtiMastersAdmitArgs
  ): Promise<LtiMastersAdmit | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
