/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, MitsSlateApp as PrismaMitsSlateApp } from "@prisma/client";

export class MitsSlateAppServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.MitsSlateAppCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.MitsSlateAppCountArgs>
  ): Promise<number> {
    return this.prisma.mitsSlateApp.count(args);
  }

  async mitsSlateApps<T extends Prisma.MitsSlateAppFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MitsSlateAppFindManyArgs>
  ): Promise<PrismaMitsSlateApp[]> {
    return this.prisma.mitsSlateApp.findMany(args);
  }
  async mitsSlateApp<T extends Prisma.MitsSlateAppFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MitsSlateAppFindUniqueArgs>
  ): Promise<PrismaMitsSlateApp | null> {
    return this.prisma.mitsSlateApp.findUnique(args);
  }
  async createMitsSlateApp<T extends Prisma.MitsSlateAppCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MitsSlateAppCreateArgs>
  ): Promise<PrismaMitsSlateApp> {
    return this.prisma.mitsSlateApp.create<T>(args);
  }
  async updateMitsSlateApp<T extends Prisma.MitsSlateAppUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MitsSlateAppUpdateArgs>
  ): Promise<PrismaMitsSlateApp> {
    return this.prisma.mitsSlateApp.update<T>(args);
  }
  async deleteMitsSlateApp<T extends Prisma.MitsSlateAppDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MitsSlateAppDeleteArgs>
  ): Promise<PrismaMitsSlateApp> {
    return this.prisma.mitsSlateApp.delete(args);
  }
}
