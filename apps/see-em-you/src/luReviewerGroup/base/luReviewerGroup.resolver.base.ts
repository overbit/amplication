/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LuReviewerGroup } from "./LuReviewerGroup";
import { LuReviewerGroupCountArgs } from "./LuReviewerGroupCountArgs";
import { LuReviewerGroupFindManyArgs } from "./LuReviewerGroupFindManyArgs";
import { LuReviewerGroupFindUniqueArgs } from "./LuReviewerGroupFindUniqueArgs";
import { CreateLuReviewerGroupArgs } from "./CreateLuReviewerGroupArgs";
import { UpdateLuReviewerGroupArgs } from "./UpdateLuReviewerGroupArgs";
import { DeleteLuReviewerGroupArgs } from "./DeleteLuReviewerGroupArgs";
import { LuReviewerGroupService } from "../luReviewerGroup.service";
@graphql.Resolver(() => LuReviewerGroup)
export class LuReviewerGroupResolverBase {
  constructor(protected readonly service: LuReviewerGroupService) {}

  async _luReviewerGroupsMeta(
    @graphql.Args() args: LuReviewerGroupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LuReviewerGroup])
  async luReviewerGroups(
    @graphql.Args() args: LuReviewerGroupFindManyArgs
  ): Promise<LuReviewerGroup[]> {
    return this.service.luReviewerGroups(args);
  }

  @graphql.Query(() => LuReviewerGroup, { nullable: true })
  async luReviewerGroup(
    @graphql.Args() args: LuReviewerGroupFindUniqueArgs
  ): Promise<LuReviewerGroup | null> {
    const result = await this.service.luReviewerGroup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LuReviewerGroup)
  async createLuReviewerGroup(
    @graphql.Args() args: CreateLuReviewerGroupArgs
  ): Promise<LuReviewerGroup> {
    return await this.service.createLuReviewerGroup({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LuReviewerGroup)
  async updateLuReviewerGroup(
    @graphql.Args() args: UpdateLuReviewerGroupArgs
  ): Promise<LuReviewerGroup | null> {
    try {
      return await this.service.updateLuReviewerGroup({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LuReviewerGroup)
  async deleteLuReviewerGroup(
    @graphql.Args() args: DeleteLuReviewerGroupArgs
  ): Promise<LuReviewerGroup | null> {
    try {
      return await this.service.deleteLuReviewerGroup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
