/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ApplicationMergeFileService } from "../applicationMergeFile.service";
import { ApplicationMergeFileCreateInput } from "./ApplicationMergeFileCreateInput";
import { ApplicationMergeFile } from "./ApplicationMergeFile";
import { ApplicationMergeFileFindManyArgs } from "./ApplicationMergeFileFindManyArgs";
import { ApplicationMergeFileWhereUniqueInput } from "./ApplicationMergeFileWhereUniqueInput";
import { ApplicationMergeFileUpdateInput } from "./ApplicationMergeFileUpdateInput";

export class ApplicationMergeFileControllerBase {
  constructor(protected readonly service: ApplicationMergeFileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ApplicationMergeFile })
  async createApplicationMergeFile(
    @common.Body() data: ApplicationMergeFileCreateInput
  ): Promise<ApplicationMergeFile> {
    return await this.service.createApplicationMergeFile({
      data: data,
      select: {
        guid: true,
        id: true,
        mergeDate: true,
        mergeFile: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ApplicationMergeFile] })
  @ApiNestedQuery(ApplicationMergeFileFindManyArgs)
  async applicationMergeFiles(
    @common.Req() request: Request
  ): Promise<ApplicationMergeFile[]> {
    const args = plainToClass(ApplicationMergeFileFindManyArgs, request.query);
    return this.service.applicationMergeFiles({
      ...args,
      select: {
        guid: true,
        id: true,
        mergeDate: true,
        mergeFile: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ApplicationMergeFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async applicationMergeFile(
    @common.Param() params: ApplicationMergeFileWhereUniqueInput
  ): Promise<ApplicationMergeFile | null> {
    const result = await this.service.applicationMergeFile({
      where: params,
      select: {
        guid: true,
        id: true,
        mergeDate: true,
        mergeFile: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ApplicationMergeFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateApplicationMergeFile(
    @common.Param() params: ApplicationMergeFileWhereUniqueInput,
    @common.Body() data: ApplicationMergeFileUpdateInput
  ): Promise<ApplicationMergeFile | null> {
    try {
      return await this.service.updateApplicationMergeFile({
        where: params,
        data: data,
        select: {
          guid: true,
          id: true,
          mergeDate: true,
          mergeFile: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ApplicationMergeFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteApplicationMergeFile(
    @common.Param() params: ApplicationMergeFileWhereUniqueInput
  ): Promise<ApplicationMergeFile | null> {
    try {
      return await this.service.deleteApplicationMergeFile({
        where: params,
        select: {
          guid: true,
          id: true,
          mergeDate: true,
          mergeFile: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
