/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ApplicationMergeFile } from "./ApplicationMergeFile";
import { ApplicationMergeFileCountArgs } from "./ApplicationMergeFileCountArgs";
import { ApplicationMergeFileFindManyArgs } from "./ApplicationMergeFileFindManyArgs";
import { ApplicationMergeFileFindUniqueArgs } from "./ApplicationMergeFileFindUniqueArgs";
import { CreateApplicationMergeFileArgs } from "./CreateApplicationMergeFileArgs";
import { UpdateApplicationMergeFileArgs } from "./UpdateApplicationMergeFileArgs";
import { DeleteApplicationMergeFileArgs } from "./DeleteApplicationMergeFileArgs";
import { ApplicationMergeFileService } from "../applicationMergeFile.service";
@graphql.Resolver(() => ApplicationMergeFile)
export class ApplicationMergeFileResolverBase {
  constructor(protected readonly service: ApplicationMergeFileService) {}

  async _applicationMergeFilesMeta(
    @graphql.Args() args: ApplicationMergeFileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ApplicationMergeFile])
  async applicationMergeFiles(
    @graphql.Args() args: ApplicationMergeFileFindManyArgs
  ): Promise<ApplicationMergeFile[]> {
    return this.service.applicationMergeFiles(args);
  }

  @graphql.Query(() => ApplicationMergeFile, { nullable: true })
  async applicationMergeFile(
    @graphql.Args() args: ApplicationMergeFileFindUniqueArgs
  ): Promise<ApplicationMergeFile | null> {
    const result = await this.service.applicationMergeFile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ApplicationMergeFile)
  async createApplicationMergeFile(
    @graphql.Args() args: CreateApplicationMergeFileArgs
  ): Promise<ApplicationMergeFile> {
    return await this.service.createApplicationMergeFile({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ApplicationMergeFile)
  async updateApplicationMergeFile(
    @graphql.Args() args: UpdateApplicationMergeFileArgs
  ): Promise<ApplicationMergeFile | null> {
    try {
      return await this.service.updateApplicationMergeFile({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ApplicationMergeFile)
  async deleteApplicationMergeFile(
    @graphql.Args() args: DeleteApplicationMergeFileArgs
  ): Promise<ApplicationMergeFile | null> {
    try {
      return await this.service.deleteApplicationMergeFile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
