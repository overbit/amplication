/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LuReviewInterest } from "./LuReviewInterest";
import { LuReviewInterestCountArgs } from "./LuReviewInterestCountArgs";
import { LuReviewInterestFindManyArgs } from "./LuReviewInterestFindManyArgs";
import { LuReviewInterestFindUniqueArgs } from "./LuReviewInterestFindUniqueArgs";
import { CreateLuReviewInterestArgs } from "./CreateLuReviewInterestArgs";
import { UpdateLuReviewInterestArgs } from "./UpdateLuReviewInterestArgs";
import { DeleteLuReviewInterestArgs } from "./DeleteLuReviewInterestArgs";
import { LuReviewInterestService } from "../luReviewInterest.service";
@graphql.Resolver(() => LuReviewInterest)
export class LuReviewInterestResolverBase {
  constructor(protected readonly service: LuReviewInterestService) {}

  async _luReviewInterestsMeta(
    @graphql.Args() args: LuReviewInterestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LuReviewInterest])
  async luReviewInterests(
    @graphql.Args() args: LuReviewInterestFindManyArgs
  ): Promise<LuReviewInterest[]> {
    return this.service.luReviewInterests(args);
  }

  @graphql.Query(() => LuReviewInterest, { nullable: true })
  async luReviewInterest(
    @graphql.Args() args: LuReviewInterestFindUniqueArgs
  ): Promise<LuReviewInterest | null> {
    const result = await this.service.luReviewInterest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LuReviewInterest)
  async createLuReviewInterest(
    @graphql.Args() args: CreateLuReviewInterestArgs
  ): Promise<LuReviewInterest> {
    return await this.service.createLuReviewInterest({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LuReviewInterest)
  async updateLuReviewInterest(
    @graphql.Args() args: UpdateLuReviewInterestArgs
  ): Promise<LuReviewInterest | null> {
    try {
      return await this.service.updateLuReviewInterest({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LuReviewInterest)
  async deleteLuReviewInterest(
    @graphql.Args() args: DeleteLuReviewInterestArgs
  ): Promise<LuReviewInterest | null> {
    try {
      return await this.service.deleteLuReviewInterest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
