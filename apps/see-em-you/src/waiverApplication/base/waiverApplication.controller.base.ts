/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WaiverApplicationService } from "../waiverApplication.service";
import { WaiverApplicationCreateInput } from "./WaiverApplicationCreateInput";
import { WaiverApplication } from "./WaiverApplication";
import { WaiverApplicationFindManyArgs } from "./WaiverApplicationFindManyArgs";
import { WaiverApplicationWhereUniqueInput } from "./WaiverApplicationWhereUniqueInput";
import { WaiverApplicationUpdateInput } from "./WaiverApplicationUpdateInput";

export class WaiverApplicationControllerBase {
  constructor(protected readonly service: WaiverApplicationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WaiverApplication })
  async createWaiverApplication(
    @common.Body() data: WaiverApplicationCreateInput
  ): Promise<WaiverApplication> {
    return await this.service.createWaiverApplication({
      data: data,
      select: {
        id: true,
        applicationId: true,
        orgId: true,
        datafileId: true,
        createDate: true,
        updateDate: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WaiverApplication] })
  @ApiNestedQuery(WaiverApplicationFindManyArgs)
  async waiverApplications(
    @common.Req() request: Request
  ): Promise<WaiverApplication[]> {
    const args = plainToClass(WaiverApplicationFindManyArgs, request.query);
    return this.service.waiverApplications({
      ...args,
      select: {
        id: true,
        applicationId: true,
        orgId: true,
        datafileId: true,
        createDate: true,
        updateDate: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WaiverApplication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async waiverApplication(
    @common.Param() params: WaiverApplicationWhereUniqueInput
  ): Promise<WaiverApplication | null> {
    const result = await this.service.waiverApplication({
      where: params,
      select: {
        id: true,
        applicationId: true,
        orgId: true,
        datafileId: true,
        createDate: true,
        updateDate: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WaiverApplication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWaiverApplication(
    @common.Param() params: WaiverApplicationWhereUniqueInput,
    @common.Body() data: WaiverApplicationUpdateInput
  ): Promise<WaiverApplication | null> {
    try {
      return await this.service.updateWaiverApplication({
        where: params,
        data: data,
        select: {
          id: true,
          applicationId: true,
          orgId: true,
          datafileId: true,
          createDate: true,
          updateDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WaiverApplication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWaiverApplication(
    @common.Param() params: WaiverApplicationWhereUniqueInput
  ): Promise<WaiverApplication | null> {
    try {
      return await this.service.deleteWaiverApplication({
        where: params,
        select: {
          id: true,
          applicationId: true,
          orgId: true,
          datafileId: true,
          createDate: true,
          updateDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
