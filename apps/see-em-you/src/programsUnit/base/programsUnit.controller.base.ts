/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProgramsUnitService } from "../programsUnit.service";
import { ProgramsUnitCreateInput } from "./ProgramsUnitCreateInput";
import { ProgramsUnit } from "./ProgramsUnit";
import { ProgramsUnitFindManyArgs } from "./ProgramsUnitFindManyArgs";
import { ProgramsUnitWhereUniqueInput } from "./ProgramsUnitWhereUniqueInput";
import { ProgramsUnitUpdateInput } from "./ProgramsUnitUpdateInput";

export class ProgramsUnitControllerBase {
  constructor(protected readonly service: ProgramsUnitService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProgramsUnit })
  async createProgramsUnit(
    @common.Body() data: ProgramsUnitCreateInput
  ): Promise<ProgramsUnit> {
    return await this.service.createProgramsUnit({
      data: data,
      select: {
        programsId: true,
        unitId: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProgramsUnit] })
  @ApiNestedQuery(ProgramsUnitFindManyArgs)
  async programsUnits(@common.Req() request: Request): Promise<ProgramsUnit[]> {
    const args = plainToClass(ProgramsUnitFindManyArgs, request.query);
    return this.service.programsUnits({
      ...args,
      select: {
        programsId: true,
        unitId: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProgramsUnit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async programsUnit(
    @common.Param() params: ProgramsUnitWhereUniqueInput
  ): Promise<ProgramsUnit | null> {
    const result = await this.service.programsUnit({
      where: params,
      select: {
        programsId: true,
        unitId: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProgramsUnit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProgramsUnit(
    @common.Param() params: ProgramsUnitWhereUniqueInput,
    @common.Body() data: ProgramsUnitUpdateInput
  ): Promise<ProgramsUnit | null> {
    try {
      return await this.service.updateProgramsUnit({
        where: params,
        data: data,
        select: {
          programsId: true,
          unitId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProgramsUnit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProgramsUnit(
    @common.Param() params: ProgramsUnitWhereUniqueInput
  ): Promise<ProgramsUnit | null> {
    try {
      return await this.service.deleteProgramsUnit({
        where: params,
        select: {
          programsId: true,
          unitId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
