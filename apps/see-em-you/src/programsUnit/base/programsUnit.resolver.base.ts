/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProgramsUnit } from "./ProgramsUnit";
import { ProgramsUnitCountArgs } from "./ProgramsUnitCountArgs";
import { ProgramsUnitFindManyArgs } from "./ProgramsUnitFindManyArgs";
import { ProgramsUnitFindUniqueArgs } from "./ProgramsUnitFindUniqueArgs";
import { CreateProgramsUnitArgs } from "./CreateProgramsUnitArgs";
import { UpdateProgramsUnitArgs } from "./UpdateProgramsUnitArgs";
import { DeleteProgramsUnitArgs } from "./DeleteProgramsUnitArgs";
import { ProgramsUnitService } from "../programsUnit.service";
@graphql.Resolver(() => ProgramsUnit)
export class ProgramsUnitResolverBase {
  constructor(protected readonly service: ProgramsUnitService) {}

  async _programsUnitsMeta(
    @graphql.Args() args: ProgramsUnitCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProgramsUnit])
  async programsUnits(
    @graphql.Args() args: ProgramsUnitFindManyArgs
  ): Promise<ProgramsUnit[]> {
    return this.service.programsUnits(args);
  }

  @graphql.Query(() => ProgramsUnit, { nullable: true })
  async programsUnit(
    @graphql.Args() args: ProgramsUnitFindUniqueArgs
  ): Promise<ProgramsUnit | null> {
    const result = await this.service.programsUnit(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProgramsUnit)
  async createProgramsUnit(
    @graphql.Args() args: CreateProgramsUnitArgs
  ): Promise<ProgramsUnit> {
    return await this.service.createProgramsUnit({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ProgramsUnit)
  async updateProgramsUnit(
    @graphql.Args() args: UpdateProgramsUnitArgs
  ): Promise<ProgramsUnit | null> {
    try {
      return await this.service.updateProgramsUnit({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProgramsUnit)
  async deleteProgramsUnit(
    @graphql.Args() args: DeleteProgramsUnitArgs
  ): Promise<ProgramsUnit | null> {
    try {
      return await this.service.deleteProgramsUnit(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
