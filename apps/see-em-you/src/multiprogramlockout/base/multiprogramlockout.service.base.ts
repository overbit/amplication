/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Multiprogramlockout as PrismaMultiprogramlockout,
} from "@prisma/client";

export class MultiprogramlockoutServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.MultiprogramlockoutCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.MultiprogramlockoutCountArgs>
  ): Promise<number> {
    return this.prisma.multiprogramlockout.count(args);
  }

  async multiprogramlockouts<T extends Prisma.MultiprogramlockoutFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MultiprogramlockoutFindManyArgs>
  ): Promise<PrismaMultiprogramlockout[]> {
    return this.prisma.multiprogramlockout.findMany(args);
  }
  async multiprogramlockout<T extends Prisma.MultiprogramlockoutFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MultiprogramlockoutFindUniqueArgs>
  ): Promise<PrismaMultiprogramlockout | null> {
    return this.prisma.multiprogramlockout.findUnique(args);
  }
  async createMultiprogramlockout<
    T extends Prisma.MultiprogramlockoutCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.MultiprogramlockoutCreateArgs>
  ): Promise<PrismaMultiprogramlockout> {
    return this.prisma.multiprogramlockout.create<T>(args);
  }
  async updateMultiprogramlockout<
    T extends Prisma.MultiprogramlockoutUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.MultiprogramlockoutUpdateArgs>
  ): Promise<PrismaMultiprogramlockout> {
    return this.prisma.multiprogramlockout.update<T>(args);
  }
  async deleteMultiprogramlockout<
    T extends Prisma.MultiprogramlockoutDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.MultiprogramlockoutDeleteArgs>
  ): Promise<PrismaMultiprogramlockout> {
    return this.prisma.multiprogramlockout.delete(args);
  }
}
