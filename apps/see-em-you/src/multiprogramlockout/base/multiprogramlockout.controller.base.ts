/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MultiprogramlockoutService } from "../multiprogramlockout.service";
import { MultiprogramlockoutCreateInput } from "./MultiprogramlockoutCreateInput";
import { Multiprogramlockout } from "./Multiprogramlockout";
import { MultiprogramlockoutFindManyArgs } from "./MultiprogramlockoutFindManyArgs";
import { MultiprogramlockoutWhereUniqueInput } from "./MultiprogramlockoutWhereUniqueInput";
import { MultiprogramlockoutUpdateInput } from "./MultiprogramlockoutUpdateInput";

export class MultiprogramlockoutControllerBase {
  constructor(protected readonly service: MultiprogramlockoutService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Multiprogramlockout })
  async createMultiprogramlockout(
    @common.Body() data: MultiprogramlockoutCreateInput
  ): Promise<Multiprogramlockout> {
    return await this.service.createMultiprogramlockout({
      data: data,
      select: {
        programId1: true,
        programId2: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Multiprogramlockout] })
  @ApiNestedQuery(MultiprogramlockoutFindManyArgs)
  async multiprogramlockouts(
    @common.Req() request: Request
  ): Promise<Multiprogramlockout[]> {
    const args = plainToClass(MultiprogramlockoutFindManyArgs, request.query);
    return this.service.multiprogramlockouts({
      ...args,
      select: {
        programId1: true,
        programId2: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Multiprogramlockout })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async multiprogramlockout(
    @common.Param() params: MultiprogramlockoutWhereUniqueInput
  ): Promise<Multiprogramlockout | null> {
    const result = await this.service.multiprogramlockout({
      where: params,
      select: {
        programId1: true,
        programId2: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Multiprogramlockout })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMultiprogramlockout(
    @common.Param() params: MultiprogramlockoutWhereUniqueInput,
    @common.Body() data: MultiprogramlockoutUpdateInput
  ): Promise<Multiprogramlockout | null> {
    try {
      return await this.service.updateMultiprogramlockout({
        where: params,
        data: data,
        select: {
          programId1: true,
          programId2: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Multiprogramlockout })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMultiprogramlockout(
    @common.Param() params: MultiprogramlockoutWhereUniqueInput
  ): Promise<Multiprogramlockout | null> {
    try {
      return await this.service.deleteMultiprogramlockout({
        where: params,
        select: {
          programId1: true,
          programId2: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
