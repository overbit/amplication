/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RiskFactorService } from "../riskFactor.service";
import { RiskFactorCreateInput } from "./RiskFactorCreateInput";
import { RiskFactor } from "./RiskFactor";
import { RiskFactorFindManyArgs } from "./RiskFactorFindManyArgs";
import { RiskFactorWhereUniqueInput } from "./RiskFactorWhereUniqueInput";
import { RiskFactorUpdateInput } from "./RiskFactorUpdateInput";

export class RiskFactorControllerBase {
  constructor(protected readonly service: RiskFactorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RiskFactor })
  async createRiskFactor(
    @common.Body() data: RiskFactorCreateInput
  ): Promise<RiskFactor> {
    return await this.service.createRiskFactor({
      data: data,
      select: {
        arrayIndex: true,
        departmentId: true,
        id: true,
        riskFactor: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RiskFactor] })
  @ApiNestedQuery(RiskFactorFindManyArgs)
  async riskFactors(@common.Req() request: Request): Promise<RiskFactor[]> {
    const args = plainToClass(RiskFactorFindManyArgs, request.query);
    return this.service.riskFactors({
      ...args,
      select: {
        arrayIndex: true,
        departmentId: true,
        id: true,
        riskFactor: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RiskFactor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async riskFactor(
    @common.Param() params: RiskFactorWhereUniqueInput
  ): Promise<RiskFactor | null> {
    const result = await this.service.riskFactor({
      where: params,
      select: {
        arrayIndex: true,
        departmentId: true,
        id: true,
        riskFactor: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RiskFactor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRiskFactor(
    @common.Param() params: RiskFactorWhereUniqueInput,
    @common.Body() data: RiskFactorUpdateInput
  ): Promise<RiskFactor | null> {
    try {
      return await this.service.updateRiskFactor({
        where: params,
        data: data,
        select: {
          arrayIndex: true,
          departmentId: true,
          id: true,
          riskFactor: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RiskFactor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRiskFactor(
    @common.Param() params: RiskFactorWhereUniqueInput
  ): Promise<RiskFactor | null> {
    try {
      return await this.service.deleteRiskFactor({
        where: params,
        select: {
          arrayIndex: true,
          departmentId: true,
          id: true,
          riskFactor: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
