/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, RiskFactor as PrismaRiskFactor } from "@prisma/client";

export class RiskFactorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.RiskFactorCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.RiskFactorCountArgs>
  ): Promise<number> {
    return this.prisma.riskFactor.count(args);
  }

  async riskFactors<T extends Prisma.RiskFactorFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RiskFactorFindManyArgs>
  ): Promise<PrismaRiskFactor[]> {
    return this.prisma.riskFactor.findMany(args);
  }
  async riskFactor<T extends Prisma.RiskFactorFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RiskFactorFindUniqueArgs>
  ): Promise<PrismaRiskFactor | null> {
    return this.prisma.riskFactor.findUnique(args);
  }
  async createRiskFactor<T extends Prisma.RiskFactorCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RiskFactorCreateArgs>
  ): Promise<PrismaRiskFactor> {
    return this.prisma.riskFactor.create<T>(args);
  }
  async updateRiskFactor<T extends Prisma.RiskFactorUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RiskFactorUpdateArgs>
  ): Promise<PrismaRiskFactor> {
    return this.prisma.riskFactor.update<T>(args);
  }
  async deleteRiskFactor<T extends Prisma.RiskFactorDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RiskFactorDeleteArgs>
  ): Promise<PrismaRiskFactor> {
    return this.prisma.riskFactor.delete(args);
  }
}
