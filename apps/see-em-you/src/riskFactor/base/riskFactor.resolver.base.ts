/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateRiskFactorArgs } from "./CreateRiskFactorArgs";
import { UpdateRiskFactorArgs } from "./UpdateRiskFactorArgs";
import { DeleteRiskFactorArgs } from "./DeleteRiskFactorArgs";
import { RiskFactorCountArgs } from "./RiskFactorCountArgs";
import { RiskFactorFindManyArgs } from "./RiskFactorFindManyArgs";
import { RiskFactorFindUniqueArgs } from "./RiskFactorFindUniqueArgs";
import { RiskFactor } from "./RiskFactor";
import { RiskFactorService } from "../riskFactor.service";
@graphql.Resolver(() => RiskFactor)
export class RiskFactorResolverBase {
  constructor(protected readonly service: RiskFactorService) {}

  async _riskFactorsMeta(
    @graphql.Args() args: RiskFactorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RiskFactor])
  async riskFactors(
    @graphql.Args() args: RiskFactorFindManyArgs
  ): Promise<RiskFactor[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => RiskFactor, { nullable: true })
  async riskFactor(
    @graphql.Args() args: RiskFactorFindUniqueArgs
  ): Promise<RiskFactor | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RiskFactor)
  async createRiskFactor(
    @graphql.Args() args: CreateRiskFactorArgs
  ): Promise<RiskFactor> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => RiskFactor)
  async updateRiskFactor(
    @graphql.Args() args: UpdateRiskFactorArgs
  ): Promise<RiskFactor | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RiskFactor)
  async deleteRiskFactor(
    @graphql.Args() args: DeleteRiskFactorArgs
  ): Promise<RiskFactor | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
