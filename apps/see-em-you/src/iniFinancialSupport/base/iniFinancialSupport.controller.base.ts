/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { IniFinancialSupportService } from "../iniFinancialSupport.service";
import { IniFinancialSupportCreateInput } from "./IniFinancialSupportCreateInput";
import { IniFinancialSupport } from "./IniFinancialSupport";
import { IniFinancialSupportFindManyArgs } from "./IniFinancialSupportFindManyArgs";
import { IniFinancialSupportWhereUniqueInput } from "./IniFinancialSupportWhereUniqueInput";
import { IniFinancialSupportUpdateInput } from "./IniFinancialSupportUpdateInput";

export class IniFinancialSupportControllerBase {
  constructor(protected readonly service: IniFinancialSupportService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: IniFinancialSupport })
  async createIniFinancialSupport(
    @common.Body() data: IniFinancialSupportCreateInput
  ): Promise<IniFinancialSupport> {
    return await this.service.createIniFinancialSupport({
      data: data,
      select: {
        applicationId: true,
        applyOutsideSupportSource: true,
        applyOutsideSupportType: true,
        attendWithoutSupport: true,
        familySupportAmount: true,
        familySupportType: true,
        id: true,
        otherSupportSource: true,
        receiveOutsideSupportSource: true,
        receiveOutsideSupportType: true,
        requestConsideration: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [IniFinancialSupport] })
  @ApiNestedQuery(IniFinancialSupportFindManyArgs)
  async iniFinancialSupports(
    @common.Req() request: Request
  ): Promise<IniFinancialSupport[]> {
    const args = plainToClass(IniFinancialSupportFindManyArgs, request.query);
    return this.service.iniFinancialSupports({
      ...args,
      select: {
        applicationId: true,
        applyOutsideSupportSource: true,
        applyOutsideSupportType: true,
        attendWithoutSupport: true,
        familySupportAmount: true,
        familySupportType: true,
        id: true,
        otherSupportSource: true,
        receiveOutsideSupportSource: true,
        receiveOutsideSupportType: true,
        requestConsideration: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: IniFinancialSupport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async iniFinancialSupport(
    @common.Param() params: IniFinancialSupportWhereUniqueInput
  ): Promise<IniFinancialSupport | null> {
    const result = await this.service.iniFinancialSupport({
      where: params,
      select: {
        applicationId: true,
        applyOutsideSupportSource: true,
        applyOutsideSupportType: true,
        attendWithoutSupport: true,
        familySupportAmount: true,
        familySupportType: true,
        id: true,
        otherSupportSource: true,
        receiveOutsideSupportSource: true,
        receiveOutsideSupportType: true,
        requestConsideration: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: IniFinancialSupport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateIniFinancialSupport(
    @common.Param() params: IniFinancialSupportWhereUniqueInput,
    @common.Body() data: IniFinancialSupportUpdateInput
  ): Promise<IniFinancialSupport | null> {
    try {
      return await this.service.updateIniFinancialSupport({
        where: params,
        data: data,
        select: {
          applicationId: true,
          applyOutsideSupportSource: true,
          applyOutsideSupportType: true,
          attendWithoutSupport: true,
          familySupportAmount: true,
          familySupportType: true,
          id: true,
          otherSupportSource: true,
          receiveOutsideSupportSource: true,
          receiveOutsideSupportType: true,
          requestConsideration: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: IniFinancialSupport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteIniFinancialSupport(
    @common.Param() params: IniFinancialSupportWhereUniqueInput
  ): Promise<IniFinancialSupport | null> {
    try {
      return await this.service.deleteIniFinancialSupport({
        where: params,
        select: {
          applicationId: true,
          applyOutsideSupportSource: true,
          applyOutsideSupportType: true,
          attendWithoutSupport: true,
          familySupportAmount: true,
          familySupportType: true,
          id: true,
          otherSupportSource: true,
          receiveOutsideSupportSource: true,
          receiveOutsideSupportType: true,
          requestConsideration: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
