/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { HighschoolService } from "../highschool.service";
import { HighschoolCreateInput } from "./HighschoolCreateInput";
import { Highschool } from "./Highschool";
import { HighschoolFindManyArgs } from "./HighschoolFindManyArgs";
import { HighschoolWhereUniqueInput } from "./HighschoolWhereUniqueInput";
import { HighschoolUpdateInput } from "./HighschoolUpdateInput";

export class HighschoolControllerBase {
  constructor(protected readonly service: HighschoolService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Highschool })
  async createHighschool(
    @common.Body() data: HighschoolCreateInput
  ): Promise<Highschool> {
    return await this.service.createHighschool({
      data: data,
      select: {
        appId: true,
        hsName: true,
        hsCeeb: true,
        hsNces: true,
        hsState: true,
        hsZip: true,
        hsGradYear: true,
        hsDuration: true,
        graduated: true,
        created: true,
        modified: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Highschool] })
  @ApiNestedQuery(HighschoolFindManyArgs)
  async highschools(@common.Req() request: Request): Promise<Highschool[]> {
    const args = plainToClass(HighschoolFindManyArgs, request.query);
    return this.service.highschools({
      ...args,
      select: {
        appId: true,
        hsName: true,
        hsCeeb: true,
        hsNces: true,
        hsState: true,
        hsZip: true,
        hsGradYear: true,
        hsDuration: true,
        graduated: true,
        created: true,
        modified: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Highschool })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async highschool(
    @common.Param() params: HighschoolWhereUniqueInput
  ): Promise<Highschool | null> {
    const result = await this.service.highschool({
      where: params,
      select: {
        appId: true,
        hsName: true,
        hsCeeb: true,
        hsNces: true,
        hsState: true,
        hsZip: true,
        hsGradYear: true,
        hsDuration: true,
        graduated: true,
        created: true,
        modified: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Highschool })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateHighschool(
    @common.Param() params: HighschoolWhereUniqueInput,
    @common.Body() data: HighschoolUpdateInput
  ): Promise<Highschool | null> {
    try {
      return await this.service.updateHighschool({
        where: params,
        data: data,
        select: {
          appId: true,
          hsName: true,
          hsCeeb: true,
          hsNces: true,
          hsState: true,
          hsZip: true,
          hsGradYear: true,
          hsDuration: true,
          graduated: true,
          created: true,
          modified: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Highschool })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteHighschool(
    @common.Param() params: HighschoolWhereUniqueInput
  ): Promise<Highschool | null> {
    try {
      return await this.service.deleteHighschool({
        where: params,
        select: {
          appId: true,
          hsName: true,
          hsCeeb: true,
          hsNces: true,
          hsState: true,
          hsZip: true,
          hsGradYear: true,
          hsDuration: true,
          graduated: true,
          created: true,
          modified: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
