/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Highschool } from "./Highschool";
import { HighschoolCountArgs } from "./HighschoolCountArgs";
import { HighschoolFindManyArgs } from "./HighschoolFindManyArgs";
import { HighschoolFindUniqueArgs } from "./HighschoolFindUniqueArgs";
import { CreateHighschoolArgs } from "./CreateHighschoolArgs";
import { UpdateHighschoolArgs } from "./UpdateHighschoolArgs";
import { DeleteHighschoolArgs } from "./DeleteHighschoolArgs";
import { HighschoolService } from "../highschool.service";
@graphql.Resolver(() => Highschool)
export class HighschoolResolverBase {
  constructor(protected readonly service: HighschoolService) {}

  async _highschoolsMeta(
    @graphql.Args() args: HighschoolCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Highschool])
  async highschools(
    @graphql.Args() args: HighschoolFindManyArgs
  ): Promise<Highschool[]> {
    return this.service.highschools(args);
  }

  @graphql.Query(() => Highschool, { nullable: true })
  async highschool(
    @graphql.Args() args: HighschoolFindUniqueArgs
  ): Promise<Highschool | null> {
    const result = await this.service.highschool(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Highschool)
  async createHighschool(
    @graphql.Args() args: CreateHighschoolArgs
  ): Promise<Highschool> {
    return await this.service.createHighschool({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Highschool)
  async updateHighschool(
    @graphql.Args() args: UpdateHighschoolArgs
  ): Promise<Highschool | null> {
    try {
      return await this.service.updateHighschool({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Highschool)
  async deleteHighschool(
    @graphql.Args() args: DeleteHighschoolArgs
  ): Promise<Highschool | null> {
    try {
      return await this.service.deleteHighschool(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
