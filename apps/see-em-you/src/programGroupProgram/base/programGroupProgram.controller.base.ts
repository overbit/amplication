/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProgramGroupProgramService } from "../programGroupProgram.service";
import { ProgramGroupProgramCreateInput } from "./ProgramGroupProgramCreateInput";
import { ProgramGroupProgram } from "./ProgramGroupProgram";
import { ProgramGroupProgramFindManyArgs } from "./ProgramGroupProgramFindManyArgs";
import { ProgramGroupProgramWhereUniqueInput } from "./ProgramGroupProgramWhereUniqueInput";
import { ProgramGroupProgramUpdateInput } from "./ProgramGroupProgramUpdateInput";

export class ProgramGroupProgramControllerBase {
  constructor(protected readonly service: ProgramGroupProgramService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProgramGroupProgram })
  async createProgramGroupProgram(
    @common.Body() data: ProgramGroupProgramCreateInput
  ): Promise<ProgramGroupProgram> {
    return await this.service.createProgramGroupProgram({
      data: data,
      select: {
        programGroupId: true,
        unitId: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProgramGroupProgram] })
  @ApiNestedQuery(ProgramGroupProgramFindManyArgs)
  async programGroupPrograms(
    @common.Req() request: Request
  ): Promise<ProgramGroupProgram[]> {
    const args = plainToClass(ProgramGroupProgramFindManyArgs, request.query);
    return this.service.programGroupPrograms({
      ...args,
      select: {
        programGroupId: true,
        unitId: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProgramGroupProgram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async programGroupProgram(
    @common.Param() params: ProgramGroupProgramWhereUniqueInput
  ): Promise<ProgramGroupProgram | null> {
    const result = await this.service.programGroupProgram({
      where: params,
      select: {
        programGroupId: true,
        unitId: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProgramGroupProgram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProgramGroupProgram(
    @common.Param() params: ProgramGroupProgramWhereUniqueInput,
    @common.Body() data: ProgramGroupProgramUpdateInput
  ): Promise<ProgramGroupProgram | null> {
    try {
      return await this.service.updateProgramGroupProgram({
        where: params,
        data: data,
        select: {
          programGroupId: true,
          unitId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProgramGroupProgram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProgramGroupProgram(
    @common.Param() params: ProgramGroupProgramWhereUniqueInput
  ): Promise<ProgramGroupProgram | null> {
    try {
      return await this.service.deleteProgramGroupProgram({
        where: params,
        select: {
          programGroupId: true,
          unitId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
