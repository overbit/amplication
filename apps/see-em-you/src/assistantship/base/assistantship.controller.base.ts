/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AssistantshipService } from "../assistantship.service";
import { AssistantshipCreateInput } from "./AssistantshipCreateInput";
import { Assistantship } from "./Assistantship";
import { AssistantshipFindManyArgs } from "./AssistantshipFindManyArgs";
import { AssistantshipWhereUniqueInput } from "./AssistantshipWhereUniqueInput";
import { AssistantshipUpdateInput } from "./AssistantshipUpdateInput";

export class AssistantshipControllerBase {
  constructor(protected readonly service: AssistantshipService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Assistantship })
  async createAssistantship(
    @common.Body() data: AssistantshipCreateInput
  ): Promise<Assistantship> {
    return await this.service.createAssistantship({
      data: data,
      select: {
        id: true,
        applicationId: true,
        requested: true,
        granted: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Assistantship] })
  @ApiNestedQuery(AssistantshipFindManyArgs)
  async assistantships(
    @common.Req() request: Request
  ): Promise<Assistantship[]> {
    const args = plainToClass(AssistantshipFindManyArgs, request.query);
    return this.service.assistantships({
      ...args,
      select: {
        id: true,
        applicationId: true,
        requested: true,
        granted: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Assistantship })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async assistantship(
    @common.Param() params: AssistantshipWhereUniqueInput
  ): Promise<Assistantship | null> {
    const result = await this.service.assistantship({
      where: params,
      select: {
        id: true,
        applicationId: true,
        requested: true,
        granted: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Assistantship })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAssistantship(
    @common.Param() params: AssistantshipWhereUniqueInput,
    @common.Body() data: AssistantshipUpdateInput
  ): Promise<Assistantship | null> {
    try {
      return await this.service.updateAssistantship({
        where: params,
        data: data,
        select: {
          id: true,
          applicationId: true,
          requested: true,
          granted: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Assistantship })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAssistantship(
    @common.Param() params: AssistantshipWhereUniqueInput
  ): Promise<Assistantship | null> {
    try {
      return await this.service.deleteAssistantship({
        where: params,
        select: {
          id: true,
          applicationId: true,
          requested: true,
          granted: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
