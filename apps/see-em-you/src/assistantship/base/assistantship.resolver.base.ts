/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateAssistantshipArgs } from "./CreateAssistantshipArgs";
import { UpdateAssistantshipArgs } from "./UpdateAssistantshipArgs";
import { DeleteAssistantshipArgs } from "./DeleteAssistantshipArgs";
import { AssistantshipCountArgs } from "./AssistantshipCountArgs";
import { AssistantshipFindManyArgs } from "./AssistantshipFindManyArgs";
import { AssistantshipFindUniqueArgs } from "./AssistantshipFindUniqueArgs";
import { Assistantship } from "./Assistantship";
import { AssistantshipService } from "../assistantship.service";
@graphql.Resolver(() => Assistantship)
export class AssistantshipResolverBase {
  constructor(protected readonly service: AssistantshipService) {}

  async _assistantshipsMeta(
    @graphql.Args() args: AssistantshipCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Assistantship])
  async assistantships(
    @graphql.Args() args: AssistantshipFindManyArgs
  ): Promise<Assistantship[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Assistantship, { nullable: true })
  async assistantship(
    @graphql.Args() args: AssistantshipFindUniqueArgs
  ): Promise<Assistantship | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Assistantship)
  async createAssistantship(
    @graphql.Args() args: CreateAssistantshipArgs
  ): Promise<Assistantship> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Assistantship)
  async updateAssistantship(
    @graphql.Args() args: UpdateAssistantshipArgs
  ): Promise<Assistantship | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Assistantship)
  async deleteAssistantship(
    @graphql.Args() args: DeleteAssistantshipArgs
  ): Promise<Assistantship | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
