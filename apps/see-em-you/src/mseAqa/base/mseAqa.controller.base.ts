/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MseAqaService } from "../mseAqa.service";
import { MseAqaCreateInput } from "./MseAqaCreateInput";
import { MseAqaWhereInput } from "./MseAqaWhereInput";
import { MseAqaWhereUniqueInput } from "./MseAqaWhereUniqueInput";
import { MseAqaFindManyArgs } from "./MseAqaFindManyArgs";
import { MseAqaUpdateInput } from "./MseAqaUpdateInput";
import { MseAqa } from "./MseAqa";

export class MseAqaControllerBase {
  constructor(protected readonly service: MseAqaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MseAqa })
  async create(@common.Body() data: MseAqaCreateInput): Promise<MseAqa> {
    return await this.service.create({
      data: {
        ...data,

        application: {
          connect: data.application,
        },
      },
      select: {
        application: {
          select: {
            id: true,
          },
        },

        englishComments: true,
        englishRating: true,
        experienceComments: true,
        experienceRating: true,
        foundationalComments: true,
        foundationalRating: true,
        id: true,
        maturityComments: true,
        maturityRating: true,
        programmingComments: true,
        programmingRating: true,
        reviewerId: true,
        understandingComments: true,
        understandingRating: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MseAqa] })
  @ApiNestedQuery(MseAqaFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<MseAqa[]> {
    const args = plainToClass(MseAqaFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        application: {
          select: {
            id: true,
          },
        },

        englishComments: true,
        englishRating: true,
        experienceComments: true,
        experienceRating: true,
        foundationalComments: true,
        foundationalRating: true,
        id: true,
        maturityComments: true,
        maturityRating: true,
        programmingComments: true,
        programmingRating: true,
        reviewerId: true,
        understandingComments: true,
        understandingRating: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MseAqa })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: MseAqaWhereUniqueInput
  ): Promise<MseAqa | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        application: {
          select: {
            id: true,
          },
        },

        englishComments: true,
        englishRating: true,
        experienceComments: true,
        experienceRating: true,
        foundationalComments: true,
        foundationalRating: true,
        id: true,
        maturityComments: true,
        maturityRating: true,
        programmingComments: true,
        programmingRating: true,
        reviewerId: true,
        understandingComments: true,
        understandingRating: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MseAqa })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: MseAqaWhereUniqueInput,
    @common.Body() data: MseAqaUpdateInput
  ): Promise<MseAqa | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          application: {
            connect: data.application,
          },
        },
        select: {
          application: {
            select: {
              id: true,
            },
          },

          englishComments: true,
          englishRating: true,
          experienceComments: true,
          experienceRating: true,
          foundationalComments: true,
          foundationalRating: true,
          id: true,
          maturityComments: true,
          maturityRating: true,
          programmingComments: true,
          programmingRating: true,
          reviewerId: true,
          understandingComments: true,
          understandingRating: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MseAqa })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: MseAqaWhereUniqueInput
  ): Promise<MseAqa | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          application: {
            select: {
              id: true,
            },
          },

          englishComments: true,
          englishRating: true,
          experienceComments: true,
          experienceRating: true,
          foundationalComments: true,
          foundationalRating: true,
          id: true,
          maturityComments: true,
          maturityRating: true,
          programmingComments: true,
          programmingRating: true,
          reviewerId: true,
          understandingComments: true,
          understandingRating: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
