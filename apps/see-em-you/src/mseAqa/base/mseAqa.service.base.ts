/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MseAqa as PrismaMseAqa,
  Application as PrismaApplication,
} from "@prisma/client";

export class MseAqaServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.MseAqaCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.MseAqaCountArgs>
  ): Promise<number> {
    return this.prisma.mseAqa.count(args);
  }

  async mseAqas<T extends Prisma.MseAqaFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MseAqaFindManyArgs>
  ): Promise<PrismaMseAqa[]> {
    return this.prisma.mseAqa.findMany(args);
  }
  async mseAqa<T extends Prisma.MseAqaFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MseAqaFindUniqueArgs>
  ): Promise<PrismaMseAqa | null> {
    return this.prisma.mseAqa.findUnique(args);
  }
  async createMseAqa<T extends Prisma.MseAqaCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MseAqaCreateArgs>
  ): Promise<PrismaMseAqa> {
    return this.prisma.mseAqa.create<T>(args);
  }
  async updateMseAqa<T extends Prisma.MseAqaUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MseAqaUpdateArgs>
  ): Promise<PrismaMseAqa> {
    return this.prisma.mseAqa.update<T>(args);
  }
  async deleteMseAqa<T extends Prisma.MseAqaDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MseAqaDeleteArgs>
  ): Promise<PrismaMseAqa> {
    return this.prisma.mseAqa.delete(args);
  }

  async getApplication(parentId: number): Promise<PrismaApplication | null> {
    return this.prisma.mseAqa
      .findUnique({
        where: { id: parentId },
      })
      .application();
  }
}
