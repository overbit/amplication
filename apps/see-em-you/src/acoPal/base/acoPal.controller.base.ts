/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AcoPalService } from "../acoPal.service";
import { AcoPalCreateInput } from "./AcoPalCreateInput";
import { AcoPal } from "./AcoPal";
import { AcoPalFindManyArgs } from "./AcoPalFindManyArgs";
import { AcoPalWhereUniqueInput } from "./AcoPalWhereUniqueInput";
import { AcoPalUpdateInput } from "./AcoPalUpdateInput";

export class AcoPalControllerBase {
  constructor(protected readonly service: AcoPalService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AcoPal })
  async createAcoPal(@common.Body() data: AcoPalCreateInput): Promise<AcoPal> {
    return await this.service.createAcoPal({
      data: {
        ...data,

        application: {
          connect: data.application,
        },
      },
      select: {
        aco: true,
        pal: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AcoPal] })
  @ApiNestedQuery(AcoPalFindManyArgs)
  async acoPals(@common.Req() request: Request): Promise<AcoPal[]> {
    const args = plainToClass(AcoPalFindManyArgs, request.query);
    return this.service.acoPals({
      ...args,
      select: {
        aco: true,
        pal: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AcoPal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async acoPal(
    @common.Param() params: AcoPalWhereUniqueInput
  ): Promise<AcoPal | null> {
    const result = await this.service.acoPal({
      where: params,
      select: {
        aco: true,
        pal: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AcoPal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAcoPal(
    @common.Param() params: AcoPalWhereUniqueInput,
    @common.Body() data: AcoPalUpdateInput
  ): Promise<AcoPal | null> {
    try {
      return await this.service.updateAcoPal({
        where: params,
        data: {
          ...data,

          application: {
            connect: data.application,
          },
        },
        select: {
          aco: true,
          pal: true,

          application: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AcoPal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAcoPal(
    @common.Param() params: AcoPalWhereUniqueInput
  ): Promise<AcoPal | null> {
    try {
      return await this.service.deleteAcoPal({
        where: params,
        select: {
          aco: true,
          pal: true,

          application: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
