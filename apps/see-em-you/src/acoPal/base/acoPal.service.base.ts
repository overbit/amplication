/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AcoPal, // @ts-ignore
  Application,
} from "@prisma/client";

export class AcoPalServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.AcoPalCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.AcoPalCountArgs>
  ): Promise<number> {
    return this.prisma.acoPal.count(args);
  }

  async acoPals<T extends Prisma.AcoPalFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AcoPalFindManyArgs>
  ): Promise<AcoPal[]> {
    return this.prisma.acoPal.findMany(args);
  }
  async acoPal<T extends Prisma.AcoPalFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AcoPalFindUniqueArgs>
  ): Promise<AcoPal | null> {
    return this.prisma.acoPal.findUnique(args);
  }
  async createAcoPal<T extends Prisma.AcoPalCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AcoPalCreateArgs>
  ): Promise<AcoPal> {
    return this.prisma.acoPal.create<T>(args);
  }
  async updateAcoPal<T extends Prisma.AcoPalUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AcoPalUpdateArgs>
  ): Promise<AcoPal> {
    return this.prisma.acoPal.update<T>(args);
  }
  async deleteAcoPal<T extends Prisma.AcoPalDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AcoPalDeleteArgs>
  ): Promise<AcoPal> {
    return this.prisma.acoPal.delete(args);
  }

  async getApplication(parentId: number): Promise<Application | null> {
    return this.prisma.acoPal
      .findUnique({
        where: { id: parentId },
      })
      .application();
  }
}
