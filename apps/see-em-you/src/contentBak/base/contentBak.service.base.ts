/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ContentBak } from "@prisma/client";

export class ContentBakServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ContentBakCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContentBakCountArgs>
  ): Promise<number> {
    return this.prisma.contentBak.count(args);
  }

  async contentBaks<T extends Prisma.ContentBakFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContentBakFindManyArgs>
  ): Promise<ContentBak[]> {
    return this.prisma.contentBak.findMany(args);
  }
  async contentBak<T extends Prisma.ContentBakFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContentBakFindUniqueArgs>
  ): Promise<ContentBak | null> {
    return this.prisma.contentBak.findUnique(args);
  }
  async createContentBak<T extends Prisma.ContentBakCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContentBakCreateArgs>
  ): Promise<ContentBak> {
    return this.prisma.contentBak.create<T>(args);
  }
  async updateContentBak<T extends Prisma.ContentBakUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContentBakUpdateArgs>
  ): Promise<ContentBak> {
    return this.prisma.contentBak.update<T>(args);
  }
  async deleteContentBak<T extends Prisma.ContentBakDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContentBakDeleteArgs>
  ): Promise<ContentBak> {
    return this.prisma.contentBak.delete(args);
  }
}
