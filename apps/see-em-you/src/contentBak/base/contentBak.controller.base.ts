/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ContentBakService } from "../contentBak.service";
import { ContentBakCreateInput } from "./ContentBakCreateInput";
import { ContentBak } from "./ContentBak";
import { ContentBakFindManyArgs } from "./ContentBakFindManyArgs";
import { ContentBakWhereUniqueInput } from "./ContentBakWhereUniqueInput";
import { ContentBakUpdateInput } from "./ContentBakUpdateInput";

export class ContentBakControllerBase {
  constructor(protected readonly service: ContentBakService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ContentBak })
  async createContentBak(
    @common.Body() data: ContentBakCreateInput
  ): Promise<ContentBak> {
    return await this.service.createContentBak({
      data: data,
      select: {
        name: true,
        content: true,
        contenttypeId: true,
        domainId: true,
        modifieddate: true,
        modifiedby: true,
        departmentId: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ContentBak] })
  @ApiNestedQuery(ContentBakFindManyArgs)
  async contentBaks(@common.Req() request: Request): Promise<ContentBak[]> {
    const args = plainToClass(ContentBakFindManyArgs, request.query);
    return this.service.contentBaks({
      ...args,
      select: {
        name: true,
        content: true,
        contenttypeId: true,
        domainId: true,
        modifieddate: true,
        modifiedby: true,
        departmentId: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ContentBak })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async contentBak(
    @common.Param() params: ContentBakWhereUniqueInput
  ): Promise<ContentBak | null> {
    const result = await this.service.contentBak({
      where: params,
      select: {
        name: true,
        content: true,
        contenttypeId: true,
        domainId: true,
        modifieddate: true,
        modifiedby: true,
        departmentId: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ContentBak })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateContentBak(
    @common.Param() params: ContentBakWhereUniqueInput,
    @common.Body() data: ContentBakUpdateInput
  ): Promise<ContentBak | null> {
    try {
      return await this.service.updateContentBak({
        where: params,
        data: data,
        select: {
          name: true,
          content: true,
          contenttypeId: true,
          domainId: true,
          modifieddate: true,
          modifiedby: true,
          departmentId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ContentBak })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteContentBak(
    @common.Param() params: ContentBakWhereUniqueInput
  ): Promise<ContentBak | null> {
    try {
      return await this.service.deleteContentBak({
        where: params,
        select: {
          name: true,
          content: true,
          contenttypeId: true,
          domainId: true,
          modifieddate: true,
          modifiedby: true,
          departmentId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
