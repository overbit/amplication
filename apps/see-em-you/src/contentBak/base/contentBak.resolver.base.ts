/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateContentBakArgs } from "./CreateContentBakArgs";
import { UpdateContentBakArgs } from "./UpdateContentBakArgs";
import { DeleteContentBakArgs } from "./DeleteContentBakArgs";
import { ContentBakCountArgs } from "./ContentBakCountArgs";
import { ContentBakFindManyArgs } from "./ContentBakFindManyArgs";
import { ContentBakFindUniqueArgs } from "./ContentBakFindUniqueArgs";
import { ContentBak } from "./ContentBak";
import { ContentBakService } from "../contentBak.service";
@graphql.Resolver(() => ContentBak)
export class ContentBakResolverBase {
  constructor(protected readonly service: ContentBakService) {}

  async _contentBaksMeta(
    @graphql.Args() args: ContentBakCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ContentBak])
  async contentBaks(
    @graphql.Args() args: ContentBakFindManyArgs
  ): Promise<ContentBak[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ContentBak, { nullable: true })
  async contentBak(
    @graphql.Args() args: ContentBakFindUniqueArgs
  ): Promise<ContentBak | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ContentBak)
  async createContentBak(
    @graphql.Args() args: CreateContentBakArgs
  ): Promise<ContentBak> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ContentBak)
  async updateContentBak(
    @graphql.Args() args: UpdateContentBakArgs
  ): Promise<ContentBak | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContentBak)
  async deleteContentBak(
    @graphql.Args() args: DeleteContentBakArgs
  ): Promise<ContentBak | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
