/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PromotionHistoryCopyService } from "../promotionHistoryCopy.service";
import { PromotionHistoryCopyCreateInput } from "./PromotionHistoryCopyCreateInput";
import { PromotionHistoryCopy } from "./PromotionHistoryCopy";
import { PromotionHistoryCopyFindManyArgs } from "./PromotionHistoryCopyFindManyArgs";
import { PromotionHistoryCopyWhereUniqueInput } from "./PromotionHistoryCopyWhereUniqueInput";
import { PromotionHistoryCopyUpdateInput } from "./PromotionHistoryCopyUpdateInput";

export class PromotionHistoryCopyControllerBase {
  constructor(protected readonly service: PromotionHistoryCopyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PromotionHistoryCopy })
  async createPromotionHistoryCopy(
    @common.Body() data: PromotionHistoryCopyCreateInput
  ): Promise<PromotionHistoryCopy> {
    return await this.service.createPromotionHistoryCopy({
      data: data,
      select: {
        applicationId: true,
        programId: true,
        statusTime: true,
        round: true,
        promotion_method: true,
        usersId: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PromotionHistoryCopy] })
  @ApiNestedQuery(PromotionHistoryCopyFindManyArgs)
  async promotionHistoryCopies(
    @common.Req() request: Request
  ): Promise<PromotionHistoryCopy[]> {
    const args = plainToClass(PromotionHistoryCopyFindManyArgs, request.query);
    return this.service.promotionHistoryCopies({
      ...args,
      select: {
        applicationId: true,
        programId: true,
        statusTime: true,
        round: true,
        promotion_method: true,
        usersId: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PromotionHistoryCopy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async promotionHistoryCopy(
    @common.Param() params: PromotionHistoryCopyWhereUniqueInput
  ): Promise<PromotionHistoryCopy | null> {
    const result = await this.service.promotionHistoryCopy({
      where: params,
      select: {
        applicationId: true,
        programId: true,
        statusTime: true,
        round: true,
        promotion_method: true,
        usersId: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PromotionHistoryCopy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePromotionHistoryCopy(
    @common.Param() params: PromotionHistoryCopyWhereUniqueInput,
    @common.Body() data: PromotionHistoryCopyUpdateInput
  ): Promise<PromotionHistoryCopy | null> {
    try {
      return await this.service.updatePromotionHistoryCopy({
        where: params,
        data: data,
        select: {
          applicationId: true,
          programId: true,
          statusTime: true,
          round: true,
          promotion_method: true,
          usersId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PromotionHistoryCopy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePromotionHistoryCopy(
    @common.Param() params: PromotionHistoryCopyWhereUniqueInput
  ): Promise<PromotionHistoryCopy | null> {
    try {
      return await this.service.deletePromotionHistoryCopy({
        where: params,
        select: {
          applicationId: true,
          programId: true,
          statusTime: true,
          round: true,
          promotion_method: true,
          usersId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
