/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AccesslogApplication as PrismaAccesslogApplication,
} from "@prisma/client";

export class AccesslogApplicationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.AccesslogApplicationCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccesslogApplicationCountArgs>
  ): Promise<number> {
    return this.prisma.accesslogApplication.count(args);
  }

  async accesslogApplications<
    T extends Prisma.AccesslogApplicationFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.AccesslogApplicationFindManyArgs>
  ): Promise<PrismaAccesslogApplication[]> {
    return this.prisma.accesslogApplication.findMany(args);
  }
  async accesslogApplication<
    T extends Prisma.AccesslogApplicationFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.AccesslogApplicationFindUniqueArgs>
  ): Promise<PrismaAccesslogApplication | null> {
    return this.prisma.accesslogApplication.findUnique(args);
  }
  async createAccesslogApplication<
    T extends Prisma.AccesslogApplicationCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.AccesslogApplicationCreateArgs>
  ): Promise<PrismaAccesslogApplication> {
    return this.prisma.accesslogApplication.create<T>(args);
  }
  async updateAccesslogApplication<
    T extends Prisma.AccesslogApplicationUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.AccesslogApplicationUpdateArgs>
  ): Promise<PrismaAccesslogApplication> {
    return this.prisma.accesslogApplication.update<T>(args);
  }
  async deleteAccesslogApplication<
    T extends Prisma.AccesslogApplicationDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.AccesslogApplicationDeleteArgs>
  ): Promise<PrismaAccesslogApplication> {
    return this.prisma.accesslogApplication.delete(args);
  }
}
