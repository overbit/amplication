/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AccesslogApplicationService } from "../accesslogApplication.service";
import { AccesslogApplicationCreateInput } from "./AccesslogApplicationCreateInput";
import { AccesslogApplication } from "./AccesslogApplication";
import { AccesslogApplicationFindManyArgs } from "./AccesslogApplicationFindManyArgs";
import { AccesslogApplicationWhereUniqueInput } from "./AccesslogApplicationWhereUniqueInput";
import { AccesslogApplicationUpdateInput } from "./AccesslogApplicationUpdateInput";

export class AccesslogApplicationControllerBase {
  constructor(protected readonly service: AccesslogApplicationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AccesslogApplication })
  async createAccesslogApplication(
    @common.Body() data: AccesslogApplicationCreateInput
  ): Promise<AccesslogApplication> {
    return await this.service.createAccesslogApplication({
      data: data,
      select: {
        active: true,
        appId: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AccesslogApplication] })
  @ApiNestedQuery(AccesslogApplicationFindManyArgs)
  async accesslogApplications(
    @common.Req() request: Request
  ): Promise<AccesslogApplication[]> {
    const args = plainToClass(AccesslogApplicationFindManyArgs, request.query);
    return this.service.accesslogApplications({
      ...args,
      select: {
        active: true,
        appId: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AccesslogApplication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async accesslogApplication(
    @common.Param() params: AccesslogApplicationWhereUniqueInput
  ): Promise<AccesslogApplication | null> {
    const result = await this.service.accesslogApplication({
      where: params,
      select: {
        active: true,
        appId: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AccesslogApplication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAccesslogApplication(
    @common.Param() params: AccesslogApplicationWhereUniqueInput,
    @common.Body() data: AccesslogApplicationUpdateInput
  ): Promise<AccesslogApplication | null> {
    try {
      return await this.service.updateAccesslogApplication({
        where: params,
        data: data,
        select: {
          active: true,
          appId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AccesslogApplication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAccesslogApplication(
    @common.Param() params: AccesslogApplicationWhereUniqueInput
  ): Promise<AccesslogApplication | null> {
    try {
      return await this.service.deleteAccesslogApplication({
        where: params,
        select: {
          active: true,
          appId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
