/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DietrichRecognitionService } from "../dietrichRecognition.service";
import { DietrichRecognitionCreateInput } from "./DietrichRecognitionCreateInput";
import { DietrichRecognition } from "./DietrichRecognition";
import { DietrichRecognitionFindManyArgs } from "./DietrichRecognitionFindManyArgs";
import { DietrichRecognitionWhereUniqueInput } from "./DietrichRecognitionWhereUniqueInput";
import { DietrichRecognitionUpdateInput } from "./DietrichRecognitionUpdateInput";

export class DietrichRecognitionControllerBase {
  constructor(protected readonly service: DietrichRecognitionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DietrichRecognition })
  async createDietrichRecognition(
    @common.Body() data: DietrichRecognitionCreateInput
  ): Promise<DietrichRecognition> {
    return await this.service.createDietrichRecognition({
      data: data,
      select: {
        applicationId: true,
        description: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DietrichRecognition] })
  @ApiNestedQuery(DietrichRecognitionFindManyArgs)
  async dietrichRecognitions(
    @common.Req() request: Request
  ): Promise<DietrichRecognition[]> {
    const args = plainToClass(DietrichRecognitionFindManyArgs, request.query);
    return this.service.dietrichRecognitions({
      ...args,
      select: {
        applicationId: true,
        description: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DietrichRecognition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dietrichRecognition(
    @common.Param() params: DietrichRecognitionWhereUniqueInput
  ): Promise<DietrichRecognition | null> {
    const result = await this.service.dietrichRecognition({
      where: params,
      select: {
        applicationId: true,
        description: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DietrichRecognition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDietrichRecognition(
    @common.Param() params: DietrichRecognitionWhereUniqueInput,
    @common.Body() data: DietrichRecognitionUpdateInput
  ): Promise<DietrichRecognition | null> {
    try {
      return await this.service.updateDietrichRecognition({
        where: params,
        data: data,
        select: {
          applicationId: true,
          description: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DietrichRecognition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDietrichRecognition(
    @common.Param() params: DietrichRecognitionWhereUniqueInput
  ): Promise<DietrichRecognition | null> {
    try {
      return await this.service.deleteDietrichRecognition({
        where: params,
        select: {
          applicationId: true,
          description: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
