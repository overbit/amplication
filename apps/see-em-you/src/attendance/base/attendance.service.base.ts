/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Attendance as PrismaAttendance,
  Application as PrismaApplication,
} from "@prisma/client";

export class AttendanceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.AttendanceCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.AttendanceCountArgs>
  ): Promise<number> {
    return this.prisma.attendance.count(args);
  }

  async attendances<T extends Prisma.AttendanceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AttendanceFindManyArgs>
  ): Promise<PrismaAttendance[]> {
    return this.prisma.attendance.findMany(args);
  }
  async attendance<T extends Prisma.AttendanceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AttendanceFindUniqueArgs>
  ): Promise<PrismaAttendance | null> {
    return this.prisma.attendance.findUnique(args);
  }
  async createAttendance<T extends Prisma.AttendanceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AttendanceCreateArgs>
  ): Promise<PrismaAttendance> {
    return this.prisma.attendance.create<T>(args);
  }
  async updateAttendance<T extends Prisma.AttendanceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AttendanceUpdateArgs>
  ): Promise<PrismaAttendance> {
    return this.prisma.attendance.update<T>(args);
  }
  async deleteAttendance<T extends Prisma.AttendanceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AttendanceDeleteArgs>
  ): Promise<PrismaAttendance> {
    return this.prisma.attendance.delete(args);
  }

  async getApplication(parentId: number): Promise<PrismaApplication | null> {
    return this.prisma.attendance
      .findUnique({
        where: { id: parentId },
      })
      .application();
  }
}
