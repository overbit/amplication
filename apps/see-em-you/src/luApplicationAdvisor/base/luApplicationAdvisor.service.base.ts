/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  LuApplicationAdvisor, // @ts-ignore
  Application,
} from "@prisma/client";

export class LuApplicationAdvisorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.LuApplicationAdvisorCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.LuApplicationAdvisorCountArgs>
  ): Promise<number> {
    return this.prisma.luApplicationAdvisor.count(args);
  }

  async luApplicationAdvisors<
    T extends Prisma.LuApplicationAdvisorFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.LuApplicationAdvisorFindManyArgs>
  ): Promise<LuApplicationAdvisor[]> {
    return this.prisma.luApplicationAdvisor.findMany(args);
  }
  async luApplicationAdvisor<
    T extends Prisma.LuApplicationAdvisorFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.LuApplicationAdvisorFindUniqueArgs>
  ): Promise<LuApplicationAdvisor | null> {
    return this.prisma.luApplicationAdvisor.findUnique(args);
  }
  async createLuApplicationAdvisor<
    T extends Prisma.LuApplicationAdvisorCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.LuApplicationAdvisorCreateArgs>
  ): Promise<LuApplicationAdvisor> {
    return this.prisma.luApplicationAdvisor.create<T>(args);
  }
  async updateLuApplicationAdvisor<
    T extends Prisma.LuApplicationAdvisorUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.LuApplicationAdvisorUpdateArgs>
  ): Promise<LuApplicationAdvisor> {
    return this.prisma.luApplicationAdvisor.update<T>(args);
  }
  async deleteLuApplicationAdvisor<
    T extends Prisma.LuApplicationAdvisorDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.LuApplicationAdvisorDeleteArgs>
  ): Promise<LuApplicationAdvisor> {
    return this.prisma.luApplicationAdvisor.delete(args);
  }

  async getApplication(parentId: number): Promise<Application | null> {
    return this.prisma.luApplicationAdvisor
      .findUnique({
        where: { id: parentId },
      })
      .application();
  }
}
