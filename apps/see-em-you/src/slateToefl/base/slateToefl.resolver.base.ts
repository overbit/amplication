/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateSlateToeflArgs } from "./CreateSlateToeflArgs";
import { UpdateSlateToeflArgs } from "./UpdateSlateToeflArgs";
import { DeleteSlateToeflArgs } from "./DeleteSlateToeflArgs";
import { SlateToeflCountArgs } from "./SlateToeflCountArgs";
import { SlateToeflFindManyArgs } from "./SlateToeflFindManyArgs";
import { SlateToeflFindUniqueArgs } from "./SlateToeflFindUniqueArgs";
import { SlateToefl } from "./SlateToefl";
import { SlateToeflService } from "../slateToefl.service";
@graphql.Resolver(() => SlateToefl)
export class SlateToeflResolverBase {
  constructor(protected readonly service: SlateToeflService) {}

  async _slateToeflsMeta(
    @graphql.Args() args: SlateToeflCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SlateToefl])
  async slateToefls(
    @graphql.Args() args: SlateToeflFindManyArgs
  ): Promise<SlateToefl[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => SlateToefl, { nullable: true })
  async slateToefl(
    @graphql.Args() args: SlateToeflFindUniqueArgs
  ): Promise<SlateToefl | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SlateToefl)
  async createSlateToefl(
    @graphql.Args() args: CreateSlateToeflArgs
  ): Promise<SlateToefl> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SlateToefl)
  async updateSlateToefl(
    @graphql.Args() args: UpdateSlateToeflArgs
  ): Promise<SlateToefl | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SlateToefl)
  async deleteSlateToefl(
    @graphql.Args() args: DeleteSlateToeflArgs
  ): Promise<SlateToefl | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
