/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MhciPrereqsProgrammingSampleService } from "../mhciPrereqsProgrammingSample.service";
import { MhciPrereqsProgrammingSampleCreateInput } from "./MhciPrereqsProgrammingSampleCreateInput";
import { MhciPrereqsProgrammingSample } from "./MhciPrereqsProgrammingSample";
import { MhciPrereqsProgrammingSampleFindManyArgs } from "./MhciPrereqsProgrammingSampleFindManyArgs";
import { MhciPrereqsProgrammingSampleWhereUniqueInput } from "./MhciPrereqsProgrammingSampleWhereUniqueInput";
import { MhciPrereqsProgrammingSampleUpdateInput } from "./MhciPrereqsProgrammingSampleUpdateInput";

export class MhciPrereqsProgrammingSampleControllerBase {
  constructor(
    protected readonly service: MhciPrereqsProgrammingSampleService
  ) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MhciPrereqsProgrammingSample })
  async createMhciPrereqsProgrammingSample(
    @common.Body() data: MhciPrereqsProgrammingSampleCreateInput
  ): Promise<MhciPrereqsProgrammingSample> {
    return await this.service.createMhciPrereqsProgrammingSample({
      data: {
        ...data,

        luUsersUsertypes: {
          connect: data.luUsersUsertypes,
        },
      },
      select: {
        applicationId: true,
        datafileinfoId: true,
        id: true,

        luUsersUsertypes: {
          select: {
            id: true,
          },
        },

        newFileUploaded: true,
        note: true,
        periodId: true,
        programId: true,
        submittedToReviewer: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MhciPrereqsProgrammingSample] })
  @ApiNestedQuery(MhciPrereqsProgrammingSampleFindManyArgs)
  async mhciPrereqsProgrammingSamples(
    @common.Req() request: Request
  ): Promise<MhciPrereqsProgrammingSample[]> {
    const args = plainToClass(
      MhciPrereqsProgrammingSampleFindManyArgs,
      request.query
    );
    return this.service.mhciPrereqsProgrammingSamples({
      ...args,
      select: {
        applicationId: true,
        datafileinfoId: true,
        id: true,

        luUsersUsertypes: {
          select: {
            id: true,
          },
        },

        newFileUploaded: true,
        note: true,
        periodId: true,
        programId: true,
        submittedToReviewer: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MhciPrereqsProgrammingSample })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mhciPrereqsProgrammingSample(
    @common.Param() params: MhciPrereqsProgrammingSampleWhereUniqueInput
  ): Promise<MhciPrereqsProgrammingSample | null> {
    const result = await this.service.mhciPrereqsProgrammingSample({
      where: params,
      select: {
        applicationId: true,
        datafileinfoId: true,
        id: true,

        luUsersUsertypes: {
          select: {
            id: true,
          },
        },

        newFileUploaded: true,
        note: true,
        periodId: true,
        programId: true,
        submittedToReviewer: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MhciPrereqsProgrammingSample })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMhciPrereqsProgrammingSample(
    @common.Param() params: MhciPrereqsProgrammingSampleWhereUniqueInput,
    @common.Body() data: MhciPrereqsProgrammingSampleUpdateInput
  ): Promise<MhciPrereqsProgrammingSample | null> {
    try {
      return await this.service.updateMhciPrereqsProgrammingSample({
        where: params,
        data: {
          ...data,

          luUsersUsertypes: {
            connect: data.luUsersUsertypes,
          },
        },
        select: {
          applicationId: true,
          datafileinfoId: true,
          id: true,

          luUsersUsertypes: {
            select: {
              id: true,
            },
          },

          newFileUploaded: true,
          note: true,
          periodId: true,
          programId: true,
          submittedToReviewer: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MhciPrereqsProgrammingSample })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMhciPrereqsProgrammingSample(
    @common.Param() params: MhciPrereqsProgrammingSampleWhereUniqueInput
  ): Promise<MhciPrereqsProgrammingSample | null> {
    try {
      return await this.service.deleteMhciPrereqsProgrammingSample({
        where: params,
        select: {
          applicationId: true,
          datafileinfoId: true,
          id: true,

          luUsersUsertypes: {
            select: {
              id: true,
            },
          },

          newFileUploaded: true,
          note: true,
          periodId: true,
          programId: true,
          submittedToReviewer: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
