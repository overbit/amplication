/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MhciPrereqsProgrammingSample, // @ts-ignore
  LuUsersUsertype,
} from "@prisma/client";

export class MhciPrereqsProgrammingSampleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.MhciPrereqsProgrammingSampleCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.MhciPrereqsProgrammingSampleCountArgs>
  ): Promise<number> {
    return this.prisma.mhciPrereqsProgrammingSample.count(args);
  }

  async mhciPrereqsProgrammingSamples<
    T extends Prisma.MhciPrereqsProgrammingSampleFindManyArgs
  >(
    args: Prisma.SelectSubset<
      T,
      Prisma.MhciPrereqsProgrammingSampleFindManyArgs
    >
  ): Promise<MhciPrereqsProgrammingSample[]> {
    return this.prisma.mhciPrereqsProgrammingSample.findMany(args);
  }
  async mhciPrereqsProgrammingSample<
    T extends Prisma.MhciPrereqsProgrammingSampleFindUniqueArgs
  >(
    args: Prisma.SelectSubset<
      T,
      Prisma.MhciPrereqsProgrammingSampleFindUniqueArgs
    >
  ): Promise<MhciPrereqsProgrammingSample | null> {
    return this.prisma.mhciPrereqsProgrammingSample.findUnique(args);
  }
  async createMhciPrereqsProgrammingSample<
    T extends Prisma.MhciPrereqsProgrammingSampleCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.MhciPrereqsProgrammingSampleCreateArgs>
  ): Promise<MhciPrereqsProgrammingSample> {
    return this.prisma.mhciPrereqsProgrammingSample.create<T>(args);
  }
  async updateMhciPrereqsProgrammingSample<
    T extends Prisma.MhciPrereqsProgrammingSampleUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.MhciPrereqsProgrammingSampleUpdateArgs>
  ): Promise<MhciPrereqsProgrammingSample> {
    return this.prisma.mhciPrereqsProgrammingSample.update<T>(args);
  }
  async deleteMhciPrereqsProgrammingSample<
    T extends Prisma.MhciPrereqsProgrammingSampleDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.MhciPrereqsProgrammingSampleDeleteArgs>
  ): Promise<MhciPrereqsProgrammingSample> {
    return this.prisma.mhciPrereqsProgrammingSample.delete(args);
  }

  async getLuUsersUsertypes(parentId: number): Promise<LuUsersUsertype | null> {
    return this.prisma.mhciPrereqsProgrammingSample
      .findUnique({
        where: { id: parentId },
      })
      .luUsersUsertypes();
  }
}
