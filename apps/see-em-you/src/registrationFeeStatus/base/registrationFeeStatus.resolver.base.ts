/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateRegistrationFeeStatusArgs } from "./CreateRegistrationFeeStatusArgs";
import { UpdateRegistrationFeeStatusArgs } from "./UpdateRegistrationFeeStatusArgs";
import { DeleteRegistrationFeeStatusArgs } from "./DeleteRegistrationFeeStatusArgs";
import { RegistrationFeeStatusCountArgs } from "./RegistrationFeeStatusCountArgs";
import { RegistrationFeeStatusFindManyArgs } from "./RegistrationFeeStatusFindManyArgs";
import { RegistrationFeeStatusFindUniqueArgs } from "./RegistrationFeeStatusFindUniqueArgs";
import { RegistrationFeeStatus } from "./RegistrationFeeStatus";
import { Application } from "../../application/base/Application";
import { RegistrationFeeStatusService } from "../registrationFeeStatus.service";
@graphql.Resolver(() => RegistrationFeeStatus)
export class RegistrationFeeStatusResolverBase {
  constructor(protected readonly service: RegistrationFeeStatusService) {}

  async _registrationFeeStatusesMeta(
    @graphql.Args() args: RegistrationFeeStatusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RegistrationFeeStatus])
  async registrationFeeStatuses(
    @graphql.Args() args: RegistrationFeeStatusFindManyArgs
  ): Promise<RegistrationFeeStatus[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => RegistrationFeeStatus, { nullable: true })
  async registrationFeeStatus(
    @graphql.Args() args: RegistrationFeeStatusFindUniqueArgs
  ): Promise<RegistrationFeeStatus | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RegistrationFeeStatus)
  async createRegistrationFeeStatus(
    @graphql.Args() args: CreateRegistrationFeeStatusArgs
  ): Promise<RegistrationFeeStatus> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        application: {
          connect: args.data.application,
        },
      },
    });
  }

  @graphql.Mutation(() => RegistrationFeeStatus)
  async updateRegistrationFeeStatus(
    @graphql.Args() args: UpdateRegistrationFeeStatusArgs
  ): Promise<RegistrationFeeStatus | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          application: {
            connect: args.data.application,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RegistrationFeeStatus)
  async deleteRegistrationFeeStatus(
    @graphql.Args() args: DeleteRegistrationFeeStatusArgs
  ): Promise<RegistrationFeeStatus | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Application, {
    nullable: true,
    name: "application",
  })
  async resolveFieldApplication(
    @graphql.Parent() parent: RegistrationFeeStatus
  ): Promise<Application | null> {
    const result = await this.service.getApplication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
