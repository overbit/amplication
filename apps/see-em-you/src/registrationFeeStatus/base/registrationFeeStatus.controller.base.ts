/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RegistrationFeeStatusService } from "../registrationFeeStatus.service";
import { RegistrationFeeStatusCreateInput } from "./RegistrationFeeStatusCreateInput";
import { RegistrationFeeStatus } from "./RegistrationFeeStatus";
import { RegistrationFeeStatusFindManyArgs } from "./RegistrationFeeStatusFindManyArgs";
import { RegistrationFeeStatusWhereUniqueInput } from "./RegistrationFeeStatusWhereUniqueInput";
import { RegistrationFeeStatusUpdateInput } from "./RegistrationFeeStatusUpdateInput";

export class RegistrationFeeStatusControllerBase {
  constructor(protected readonly service: RegistrationFeeStatusService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RegistrationFeeStatus })
  async createRegistrationFeeStatus(
    @common.Body() data: RegistrationFeeStatusCreateInput
  ): Promise<RegistrationFeeStatus> {
    return await this.service.createRegistrationFeeStatus({
      data: {
        ...data,

        application: {
          connect: data.application,
        },
      },
      select: {
        departmentId: true,
        amount: true,
        paid: true,
        waived: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RegistrationFeeStatus] })
  @ApiNestedQuery(RegistrationFeeStatusFindManyArgs)
  async registrationFeeStatuses(
    @common.Req() request: Request
  ): Promise<RegistrationFeeStatus[]> {
    const args = plainToClass(RegistrationFeeStatusFindManyArgs, request.query);
    return this.service.registrationFeeStatuses({
      ...args,
      select: {
        departmentId: true,
        amount: true,
        paid: true,
        waived: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RegistrationFeeStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async registrationFeeStatus(
    @common.Param() params: RegistrationFeeStatusWhereUniqueInput
  ): Promise<RegistrationFeeStatus | null> {
    const result = await this.service.registrationFeeStatus({
      where: params,
      select: {
        departmentId: true,
        amount: true,
        paid: true,
        waived: true,

        application: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RegistrationFeeStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRegistrationFeeStatus(
    @common.Param() params: RegistrationFeeStatusWhereUniqueInput,
    @common.Body() data: RegistrationFeeStatusUpdateInput
  ): Promise<RegistrationFeeStatus | null> {
    try {
      return await this.service.updateRegistrationFeeStatus({
        where: params,
        data: {
          ...data,

          application: {
            connect: data.application,
          },
        },
        select: {
          departmentId: true,
          amount: true,
          paid: true,
          waived: true,

          application: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RegistrationFeeStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRegistrationFeeStatus(
    @common.Param() params: RegistrationFeeStatusWhereUniqueInput
  ): Promise<RegistrationFeeStatus | null> {
    try {
      return await this.service.deleteRegistrationFeeStatus({
        where: params,
        select: {
          departmentId: true,
          amount: true,
          paid: true,
          waived: true,

          application: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
