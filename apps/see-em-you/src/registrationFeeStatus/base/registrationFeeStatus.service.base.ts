/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  RegistrationFeeStatus as PrismaRegistrationFeeStatus,
  Application as PrismaApplication,
} from "@prisma/client";

export class RegistrationFeeStatusServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.RegistrationFeeStatusCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.RegistrationFeeStatusCountArgs>
  ): Promise<number> {
    return this.prisma.registrationFeeStatus.count(args);
  }

  async registrationFeeStatuses<
    T extends Prisma.RegistrationFeeStatusFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.RegistrationFeeStatusFindManyArgs>
  ): Promise<PrismaRegistrationFeeStatus[]> {
    return this.prisma.registrationFeeStatus.findMany(args);
  }
  async registrationFeeStatus<
    T extends Prisma.RegistrationFeeStatusFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.RegistrationFeeStatusFindUniqueArgs>
  ): Promise<PrismaRegistrationFeeStatus | null> {
    return this.prisma.registrationFeeStatus.findUnique(args);
  }
  async createRegistrationFeeStatus<
    T extends Prisma.RegistrationFeeStatusCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.RegistrationFeeStatusCreateArgs>
  ): Promise<PrismaRegistrationFeeStatus> {
    return this.prisma.registrationFeeStatus.create<T>(args);
  }
  async updateRegistrationFeeStatus<
    T extends Prisma.RegistrationFeeStatusUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.RegistrationFeeStatusUpdateArgs>
  ): Promise<PrismaRegistrationFeeStatus> {
    return this.prisma.registrationFeeStatus.update<T>(args);
  }
  async deleteRegistrationFeeStatus<
    T extends Prisma.RegistrationFeeStatusDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.RegistrationFeeStatusDeleteArgs>
  ): Promise<PrismaRegistrationFeeStatus> {
    return this.prisma.registrationFeeStatus.delete(args);
  }

  async getApplication(parentId: number): Promise<PrismaApplication | null> {
    return this.prisma.registrationFeeStatus
      .findUnique({
        where: { id: parentId },
      })
      .application();
  }
}
