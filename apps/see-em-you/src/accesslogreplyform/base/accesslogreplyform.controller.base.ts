/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AccesslogreplyformService } from "../accesslogreplyform.service";
import { AccesslogreplyformCreateInput } from "./AccesslogreplyformCreateInput";
import { Accesslogreplyform } from "./Accesslogreplyform";
import { AccesslogreplyformFindManyArgs } from "./AccesslogreplyformFindManyArgs";
import { AccesslogreplyformWhereUniqueInput } from "./AccesslogreplyformWhereUniqueInput";
import { AccesslogreplyformUpdateInput } from "./AccesslogreplyformUpdateInput";

export class AccesslogreplyformControllerBase {
  constructor(protected readonly service: AccesslogreplyformService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Accesslogreplyform })
  async createAccesslogreplyform(
    @common.Body() data: AccesslogreplyformCreateInput
  ): Promise<Accesslogreplyform> {
    return await this.service.createAccesslogreplyform({
      data: data,
      select: {
        activity: true,
        applicationId: true,
        client: true,
        id: true,
        luUsersUsertypesId: true,
        timestamp: true,
        usersId: true,
        usertypeId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Accesslogreplyform] })
  @ApiNestedQuery(AccesslogreplyformFindManyArgs)
  async accesslogreplyforms(
    @common.Req() request: Request
  ): Promise<Accesslogreplyform[]> {
    const args = plainToClass(AccesslogreplyformFindManyArgs, request.query);
    return this.service.accesslogreplyforms({
      ...args,
      select: {
        activity: true,
        applicationId: true,
        client: true,
        id: true,
        luUsersUsertypesId: true,
        timestamp: true,
        usersId: true,
        usertypeId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Accesslogreplyform })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async accesslogreplyform(
    @common.Param() params: AccesslogreplyformWhereUniqueInput
  ): Promise<Accesslogreplyform | null> {
    const result = await this.service.accesslogreplyform({
      where: params,
      select: {
        activity: true,
        applicationId: true,
        client: true,
        id: true,
        luUsersUsertypesId: true,
        timestamp: true,
        usersId: true,
        usertypeId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Accesslogreplyform })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAccesslogreplyform(
    @common.Param() params: AccesslogreplyformWhereUniqueInput,
    @common.Body() data: AccesslogreplyformUpdateInput
  ): Promise<Accesslogreplyform | null> {
    try {
      return await this.service.updateAccesslogreplyform({
        where: params,
        data: data,
        select: {
          activity: true,
          applicationId: true,
          client: true,
          id: true,
          luUsersUsertypesId: true,
          timestamp: true,
          usersId: true,
          usertypeId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Accesslogreplyform })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAccesslogreplyform(
    @common.Param() params: AccesslogreplyformWhereUniqueInput
  ): Promise<Accesslogreplyform | null> {
    try {
      return await this.service.deleteAccesslogreplyform({
        where: params,
        select: {
          activity: true,
          applicationId: true,
          client: true,
          id: true,
          luUsersUsertypesId: true,
          timestamp: true,
          usersId: true,
          usertypeId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
