/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VoucherApplicationService } from "../voucherApplication.service";
import { VoucherApplicationCreateInput } from "./VoucherApplicationCreateInput";
import { VoucherApplication } from "./VoucherApplication";
import { VoucherApplicationFindManyArgs } from "./VoucherApplicationFindManyArgs";
import { VoucherApplicationWhereUniqueInput } from "./VoucherApplicationWhereUniqueInput";
import { VoucherApplicationUpdateInput } from "./VoucherApplicationUpdateInput";

export class VoucherApplicationControllerBase {
  constructor(protected readonly service: VoucherApplicationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VoucherApplication })
  async createVoucherApplication(
    @common.Body() data: VoucherApplicationCreateInput
  ): Promise<VoucherApplication> {
    return await this.service.createVoucherApplication({
      data: data,
      select: {
        appId: true,
        dateUsed: true,
        id: true,
        voucherId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [VoucherApplication] })
  @ApiNestedQuery(VoucherApplicationFindManyArgs)
  async voucherApplications(
    @common.Req() request: Request
  ): Promise<VoucherApplication[]> {
    const args = plainToClass(VoucherApplicationFindManyArgs, request.query);
    return this.service.voucherApplications({
      ...args,
      select: {
        appId: true,
        dateUsed: true,
        id: true,
        voucherId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VoucherApplication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async voucherApplication(
    @common.Param() params: VoucherApplicationWhereUniqueInput
  ): Promise<VoucherApplication | null> {
    const result = await this.service.voucherApplication({
      where: params,
      select: {
        appId: true,
        dateUsed: true,
        id: true,
        voucherId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VoucherApplication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVoucherApplication(
    @common.Param() params: VoucherApplicationWhereUniqueInput,
    @common.Body() data: VoucherApplicationUpdateInput
  ): Promise<VoucherApplication | null> {
    try {
      return await this.service.updateVoucherApplication({
        where: params,
        data: data,
        select: {
          appId: true,
          dateUsed: true,
          id: true,
          voucherId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VoucherApplication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVoucherApplication(
    @common.Param() params: VoucherApplicationWhereUniqueInput
  ): Promise<VoucherApplication | null> {
    try {
      return await this.service.deleteVoucherApplication({
        where: params,
        select: {
          appId: true,
          dateUsed: true,
          id: true,
          voucherId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
