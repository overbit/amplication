/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProgramGroupGroupTypeService } from "../programGroupGroupType.service";
import { ProgramGroupGroupTypeCreateInput } from "./ProgramGroupGroupTypeCreateInput";
import { ProgramGroupGroupType } from "./ProgramGroupGroupType";
import { ProgramGroupGroupTypeFindManyArgs } from "./ProgramGroupGroupTypeFindManyArgs";
import { ProgramGroupGroupTypeWhereUniqueInput } from "./ProgramGroupGroupTypeWhereUniqueInput";
import { ProgramGroupGroupTypeUpdateInput } from "./ProgramGroupGroupTypeUpdateInput";

export class ProgramGroupGroupTypeControllerBase {
  constructor(protected readonly service: ProgramGroupGroupTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProgramGroupGroupType })
  async createProgramGroupGroupType(
    @common.Body() data: ProgramGroupGroupTypeCreateInput
  ): Promise<ProgramGroupGroupType> {
    return await this.service.createProgramGroupGroupType({
      data: data,
      select: {
        id: true,
        programGroupId: true,
        programGroupTypeId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProgramGroupGroupType] })
  @ApiNestedQuery(ProgramGroupGroupTypeFindManyArgs)
  async programGroupGroupTypes(
    @common.Req() request: Request
  ): Promise<ProgramGroupGroupType[]> {
    const args = plainToClass(ProgramGroupGroupTypeFindManyArgs, request.query);
    return this.service.programGroupGroupTypes({
      ...args,
      select: {
        id: true,
        programGroupId: true,
        programGroupTypeId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProgramGroupGroupType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async programGroupGroupType(
    @common.Param() params: ProgramGroupGroupTypeWhereUniqueInput
  ): Promise<ProgramGroupGroupType | null> {
    const result = await this.service.programGroupGroupType({
      where: params,
      select: {
        id: true,
        programGroupId: true,
        programGroupTypeId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProgramGroupGroupType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProgramGroupGroupType(
    @common.Param() params: ProgramGroupGroupTypeWhereUniqueInput,
    @common.Body() data: ProgramGroupGroupTypeUpdateInput
  ): Promise<ProgramGroupGroupType | null> {
    try {
      return await this.service.updateProgramGroupGroupType({
        where: params,
        data: data,
        select: {
          id: true,
          programGroupId: true,
          programGroupTypeId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProgramGroupGroupType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProgramGroupGroupType(
    @common.Param() params: ProgramGroupGroupTypeWhereUniqueInput
  ): Promise<ProgramGroupGroupType | null> {
    try {
      return await this.service.deleteProgramGroupGroupType({
        where: params,
        select: {
          id: true,
          programGroupId: true,
          programGroupTypeId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
