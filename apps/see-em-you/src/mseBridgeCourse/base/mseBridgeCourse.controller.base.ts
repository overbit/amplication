/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MseBridgeCourseService } from "../mseBridgeCourse.service";
import { MseBridgeCourseCreateInput } from "./MseBridgeCourseCreateInput";
import { MseBridgeCourse } from "./MseBridgeCourse";
import { MseBridgeCourseFindManyArgs } from "./MseBridgeCourseFindManyArgs";
import { MseBridgeCourseWhereUniqueInput } from "./MseBridgeCourseWhereUniqueInput";
import { MseBridgeCourseUpdateInput } from "./MseBridgeCourseUpdateInput";

export class MseBridgeCourseControllerBase {
  constructor(protected readonly service: MseBridgeCourseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MseBridgeCourse })
  async createMseBridgeCourse(
    @common.Body() data: MseBridgeCourseCreateInput
  ): Promise<MseBridgeCourse> {
    return await this.service.createMseBridgeCourse({
      data: data,
      select: {
        applicationId: true,
        courseId: true,
        id: true,
        reviewerId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MseBridgeCourse] })
  @ApiNestedQuery(MseBridgeCourseFindManyArgs)
  async mseBridgeCourses(
    @common.Req() request: Request
  ): Promise<MseBridgeCourse[]> {
    const args = plainToClass(MseBridgeCourseFindManyArgs, request.query);
    return this.service.mseBridgeCourses({
      ...args,
      select: {
        applicationId: true,
        courseId: true,
        id: true,
        reviewerId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MseBridgeCourse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mseBridgeCourse(
    @common.Param() params: MseBridgeCourseWhereUniqueInput
  ): Promise<MseBridgeCourse | null> {
    const result = await this.service.mseBridgeCourse({
      where: params,
      select: {
        applicationId: true,
        courseId: true,
        id: true,
        reviewerId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MseBridgeCourse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMseBridgeCourse(
    @common.Param() params: MseBridgeCourseWhereUniqueInput,
    @common.Body() data: MseBridgeCourseUpdateInput
  ): Promise<MseBridgeCourse | null> {
    try {
      return await this.service.updateMseBridgeCourse({
        where: params,
        data: data,
        select: {
          applicationId: true,
          courseId: true,
          id: true,
          reviewerId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MseBridgeCourse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMseBridgeCourse(
    @common.Param() params: MseBridgeCourseWhereUniqueInput
  ): Promise<MseBridgeCourse | null> {
    try {
      return await this.service.deleteMseBridgeCourse({
        where: params,
        select: {
          applicationId: true,
          courseId: true,
          id: true,
          reviewerId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
