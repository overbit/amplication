/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PositiveFactorService } from "../positiveFactor.service";
import { PositiveFactorCreateInput } from "./PositiveFactorCreateInput";
import { PositiveFactor } from "./PositiveFactor";
import { PositiveFactorFindManyArgs } from "./PositiveFactorFindManyArgs";
import { PositiveFactorWhereUniqueInput } from "./PositiveFactorWhereUniqueInput";
import { PositiveFactorUpdateInput } from "./PositiveFactorUpdateInput";

export class PositiveFactorControllerBase {
  constructor(protected readonly service: PositiveFactorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PositiveFactor })
  async createPositiveFactor(
    @common.Body() data: PositiveFactorCreateInput
  ): Promise<PositiveFactor> {
    return await this.service.createPositiveFactor({
      data: data,
      select: {
        positiveFactor: true,
        departmentId: true,
        positiveFactorId: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PositiveFactor] })
  @ApiNestedQuery(PositiveFactorFindManyArgs)
  async positiveFactors(
    @common.Req() request: Request
  ): Promise<PositiveFactor[]> {
    const args = plainToClass(PositiveFactorFindManyArgs, request.query);
    return this.service.positiveFactors({
      ...args,
      select: {
        positiveFactor: true,
        departmentId: true,
        positiveFactorId: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PositiveFactor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async positiveFactor(
    @common.Param() params: PositiveFactorWhereUniqueInput
  ): Promise<PositiveFactor | null> {
    const result = await this.service.positiveFactor({
      where: params,
      select: {
        positiveFactor: true,
        departmentId: true,
        positiveFactorId: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PositiveFactor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePositiveFactor(
    @common.Param() params: PositiveFactorWhereUniqueInput,
    @common.Body() data: PositiveFactorUpdateInput
  ): Promise<PositiveFactor | null> {
    try {
      return await this.service.updatePositiveFactor({
        where: params,
        data: data,
        select: {
          positiveFactor: true,
          departmentId: true,
          positiveFactorId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PositiveFactor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePositiveFactor(
    @common.Param() params: PositiveFactorWhereUniqueInput
  ): Promise<PositiveFactor | null> {
    try {
      return await this.service.deletePositiveFactor({
        where: params,
        select: {
          positiveFactor: true,
          departmentId: true,
          positiveFactorId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
