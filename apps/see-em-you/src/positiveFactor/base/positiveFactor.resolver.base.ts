/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PositiveFactor } from "./PositiveFactor";
import { PositiveFactorCountArgs } from "./PositiveFactorCountArgs";
import { PositiveFactorFindManyArgs } from "./PositiveFactorFindManyArgs";
import { PositiveFactorFindUniqueArgs } from "./PositiveFactorFindUniqueArgs";
import { CreatePositiveFactorArgs } from "./CreatePositiveFactorArgs";
import { UpdatePositiveFactorArgs } from "./UpdatePositiveFactorArgs";
import { DeletePositiveFactorArgs } from "./DeletePositiveFactorArgs";
import { PositiveFactorService } from "../positiveFactor.service";
@graphql.Resolver(() => PositiveFactor)
export class PositiveFactorResolverBase {
  constructor(protected readonly service: PositiveFactorService) {}

  async _positiveFactorsMeta(
    @graphql.Args() args: PositiveFactorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PositiveFactor])
  async positiveFactors(
    @graphql.Args() args: PositiveFactorFindManyArgs
  ): Promise<PositiveFactor[]> {
    return this.service.positiveFactors(args);
  }

  @graphql.Query(() => PositiveFactor, { nullable: true })
  async positiveFactor(
    @graphql.Args() args: PositiveFactorFindUniqueArgs
  ): Promise<PositiveFactor | null> {
    const result = await this.service.positiveFactor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PositiveFactor)
  async createPositiveFactor(
    @graphql.Args() args: CreatePositiveFactorArgs
  ): Promise<PositiveFactor> {
    return await this.service.createPositiveFactor({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PositiveFactor)
  async updatePositiveFactor(
    @graphql.Args() args: UpdatePositiveFactorArgs
  ): Promise<PositiveFactor | null> {
    try {
      return await this.service.updatePositiveFactor({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PositiveFactor)
  async deletePositiveFactor(
    @graphql.Args() args: DeletePositiveFactorArgs
  ): Promise<PositiveFactor | null> {
    try {
      return await this.service.deletePositiveFactor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
