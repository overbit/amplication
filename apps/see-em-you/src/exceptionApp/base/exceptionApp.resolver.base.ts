/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ExceptionApp } from "./ExceptionApp";
import { ExceptionAppCountArgs } from "./ExceptionAppCountArgs";
import { ExceptionAppFindManyArgs } from "./ExceptionAppFindManyArgs";
import { ExceptionAppFindUniqueArgs } from "./ExceptionAppFindUniqueArgs";
import { CreateExceptionAppArgs } from "./CreateExceptionAppArgs";
import { UpdateExceptionAppArgs } from "./UpdateExceptionAppArgs";
import { DeleteExceptionAppArgs } from "./DeleteExceptionAppArgs";
import { ExceptionAppService } from "../exceptionApp.service";
@graphql.Resolver(() => ExceptionApp)
export class ExceptionAppResolverBase {
  constructor(protected readonly service: ExceptionAppService) {}

  async _exceptionAppsMeta(
    @graphql.Args() args: ExceptionAppCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ExceptionApp])
  async exceptionApps(
    @graphql.Args() args: ExceptionAppFindManyArgs
  ): Promise<ExceptionApp[]> {
    return this.service.exceptionApps(args);
  }

  @graphql.Query(() => ExceptionApp, { nullable: true })
  async exceptionApp(
    @graphql.Args() args: ExceptionAppFindUniqueArgs
  ): Promise<ExceptionApp | null> {
    const result = await this.service.exceptionApp(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ExceptionApp)
  async createExceptionApp(
    @graphql.Args() args: CreateExceptionAppArgs
  ): Promise<ExceptionApp> {
    return await this.service.createExceptionApp({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ExceptionApp)
  async updateExceptionApp(
    @graphql.Args() args: UpdateExceptionAppArgs
  ): Promise<ExceptionApp | null> {
    try {
      return await this.service.updateExceptionApp({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ExceptionApp)
  async deleteExceptionApp(
    @graphql.Args() args: DeleteExceptionAppArgs
  ): Promise<ExceptionApp | null> {
    try {
      return await this.service.deleteExceptionApp(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
