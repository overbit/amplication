/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateRecommendationtypeArgs } from "./CreateRecommendationtypeArgs";
import { UpdateRecommendationtypeArgs } from "./UpdateRecommendationtypeArgs";
import { DeleteRecommendationtypeArgs } from "./DeleteRecommendationtypeArgs";
import { RecommendationtypeCountArgs } from "./RecommendationtypeCountArgs";
import { RecommendationtypeFindManyArgs } from "./RecommendationtypeFindManyArgs";
import { RecommendationtypeFindUniqueArgs } from "./RecommendationtypeFindUniqueArgs";
import { Recommendationtype } from "./Recommendationtype";
import { RecommendationtypeService } from "../recommendationtype.service";
@graphql.Resolver(() => Recommendationtype)
export class RecommendationtypeResolverBase {
  constructor(protected readonly service: RecommendationtypeService) {}

  async _recommendationtypesMeta(
    @graphql.Args() args: RecommendationtypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Recommendationtype])
  async recommendationtypes(
    @graphql.Args() args: RecommendationtypeFindManyArgs
  ): Promise<Recommendationtype[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Recommendationtype, { nullable: true })
  async recommendationtype(
    @graphql.Args() args: RecommendationtypeFindUniqueArgs
  ): Promise<Recommendationtype | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Recommendationtype)
  async createRecommendationtype(
    @graphql.Args() args: CreateRecommendationtypeArgs
  ): Promise<Recommendationtype> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Recommendationtype)
  async updateRecommendationtype(
    @graphql.Args() args: UpdateRecommendationtypeArgs
  ): Promise<Recommendationtype | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Recommendationtype)
  async deleteRecommendationtype(
    @graphql.Args() args: DeleteRecommendationtypeArgs
  ): Promise<Recommendationtype | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
