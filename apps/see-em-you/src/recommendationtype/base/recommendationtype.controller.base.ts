/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RecommendationtypeService } from "../recommendationtype.service";
import { RecommendationtypeCreateInput } from "./RecommendationtypeCreateInput";
import { Recommendationtype } from "./Recommendationtype";
import { RecommendationtypeFindManyArgs } from "./RecommendationtypeFindManyArgs";
import { RecommendationtypeWhereUniqueInput } from "./RecommendationtypeWhereUniqueInput";
import { RecommendationtypeUpdateInput } from "./RecommendationtypeUpdateInput";

export class RecommendationtypeControllerBase {
  constructor(protected readonly service: RecommendationtypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Recommendationtype })
  async createRecommendationtype(
    @common.Body() data: RecommendationtypeCreateInput
  ): Promise<Recommendationtype> {
    return await this.service.createRecommendationtype({
      data: data,
      select: {
        name: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Recommendationtype] })
  @ApiNestedQuery(RecommendationtypeFindManyArgs)
  async recommendationtypes(
    @common.Req() request: Request
  ): Promise<Recommendationtype[]> {
    const args = plainToClass(RecommendationtypeFindManyArgs, request.query);
    return this.service.recommendationtypes({
      ...args,
      select: {
        name: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Recommendationtype })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async recommendationtype(
    @common.Param() params: RecommendationtypeWhereUniqueInput
  ): Promise<Recommendationtype | null> {
    const result = await this.service.recommendationtype({
      where: params,
      select: {
        name: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Recommendationtype })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRecommendationtype(
    @common.Param() params: RecommendationtypeWhereUniqueInput,
    @common.Body() data: RecommendationtypeUpdateInput
  ): Promise<Recommendationtype | null> {
    try {
      return await this.service.updateRecommendationtype({
        where: params,
        data: data,
        select: {
          name: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Recommendationtype })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRecommendationtype(
    @common.Param() params: RecommendationtypeWhereUniqueInput
  ): Promise<Recommendationtype | null> {
    try {
      return await this.service.deleteRecommendationtype({
        where: params,
        select: {
          name: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
