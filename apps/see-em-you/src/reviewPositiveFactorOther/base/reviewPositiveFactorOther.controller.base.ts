/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReviewPositiveFactorOtherService } from "../reviewPositiveFactorOther.service";
import { ReviewPositiveFactorOtherCreateInput } from "./ReviewPositiveFactorOtherCreateInput";
import { ReviewPositiveFactorOther } from "./ReviewPositiveFactorOther";
import { ReviewPositiveFactorOtherFindManyArgs } from "./ReviewPositiveFactorOtherFindManyArgs";
import { ReviewPositiveFactorOtherWhereUniqueInput } from "./ReviewPositiveFactorOtherWhereUniqueInput";
import { ReviewPositiveFactorOtherUpdateInput } from "./ReviewPositiveFactorOtherUpdateInput";

export class ReviewPositiveFactorOtherControllerBase {
  constructor(protected readonly service: ReviewPositiveFactorOtherService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ReviewPositiveFactorOther })
  async createReviewPositiveFactorOther(
    @common.Body() data: ReviewPositiveFactorOtherCreateInput
  ): Promise<ReviewPositiveFactorOther> {
    return await this.service.createReviewPositiveFactorOther({
      data: data,
      select: {
        id: true,
        positiveFactorOther: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ReviewPositiveFactorOther] })
  @ApiNestedQuery(ReviewPositiveFactorOtherFindManyArgs)
  async reviewPositiveFactorOthers(
    @common.Req() request: Request
  ): Promise<ReviewPositiveFactorOther[]> {
    const args = plainToClass(
      ReviewPositiveFactorOtherFindManyArgs,
      request.query
    );
    return this.service.reviewPositiveFactorOthers({
      ...args,
      select: {
        id: true,
        positiveFactorOther: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ReviewPositiveFactorOther })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async reviewPositiveFactorOther(
    @common.Param() params: ReviewPositiveFactorOtherWhereUniqueInput
  ): Promise<ReviewPositiveFactorOther | null> {
    const result = await this.service.reviewPositiveFactorOther({
      where: params,
      select: {
        id: true,
        positiveFactorOther: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ReviewPositiveFactorOther })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReviewPositiveFactorOther(
    @common.Param() params: ReviewPositiveFactorOtherWhereUniqueInput,
    @common.Body() data: ReviewPositiveFactorOtherUpdateInput
  ): Promise<ReviewPositiveFactorOther | null> {
    try {
      return await this.service.updateReviewPositiveFactorOther({
        where: params,
        data: data,
        select: {
          id: true,
          positiveFactorOther: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ReviewPositiveFactorOther })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReviewPositiveFactorOther(
    @common.Param() params: ReviewPositiveFactorOtherWhereUniqueInput
  ): Promise<ReviewPositiveFactorOther | null> {
    try {
      return await this.service.deleteReviewPositiveFactorOther({
        where: params,
        select: {
          id: true,
          positiveFactorOther: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
