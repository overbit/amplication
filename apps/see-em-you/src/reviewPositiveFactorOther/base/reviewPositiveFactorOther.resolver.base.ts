/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ReviewPositiveFactorOther } from "./ReviewPositiveFactorOther";
import { ReviewPositiveFactorOtherCountArgs } from "./ReviewPositiveFactorOtherCountArgs";
import { ReviewPositiveFactorOtherFindManyArgs } from "./ReviewPositiveFactorOtherFindManyArgs";
import { ReviewPositiveFactorOtherFindUniqueArgs } from "./ReviewPositiveFactorOtherFindUniqueArgs";
import { CreateReviewPositiveFactorOtherArgs } from "./CreateReviewPositiveFactorOtherArgs";
import { UpdateReviewPositiveFactorOtherArgs } from "./UpdateReviewPositiveFactorOtherArgs";
import { DeleteReviewPositiveFactorOtherArgs } from "./DeleteReviewPositiveFactorOtherArgs";
import { ReviewPositiveFactorOtherService } from "../reviewPositiveFactorOther.service";
@graphql.Resolver(() => ReviewPositiveFactorOther)
export class ReviewPositiveFactorOtherResolverBase {
  constructor(protected readonly service: ReviewPositiveFactorOtherService) {}

  async _reviewPositiveFactorOthersMeta(
    @graphql.Args() args: ReviewPositiveFactorOtherCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ReviewPositiveFactorOther])
  async reviewPositiveFactorOthers(
    @graphql.Args() args: ReviewPositiveFactorOtherFindManyArgs
  ): Promise<ReviewPositiveFactorOther[]> {
    return this.service.reviewPositiveFactorOthers(args);
  }

  @graphql.Query(() => ReviewPositiveFactorOther, { nullable: true })
  async reviewPositiveFactorOther(
    @graphql.Args() args: ReviewPositiveFactorOtherFindUniqueArgs
  ): Promise<ReviewPositiveFactorOther | null> {
    const result = await this.service.reviewPositiveFactorOther(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ReviewPositiveFactorOther)
  async createReviewPositiveFactorOther(
    @graphql.Args() args: CreateReviewPositiveFactorOtherArgs
  ): Promise<ReviewPositiveFactorOther> {
    return await this.service.createReviewPositiveFactorOther({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ReviewPositiveFactorOther)
  async updateReviewPositiveFactorOther(
    @graphql.Args() args: UpdateReviewPositiveFactorOtherArgs
  ): Promise<ReviewPositiveFactorOther | null> {
    try {
      return await this.service.updateReviewPositiveFactorOther({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReviewPositiveFactorOther)
  async deleteReviewPositiveFactorOther(
    @graphql.Args() args: DeleteReviewPositiveFactorOtherArgs
  ): Promise<ReviewPositiveFactorOther | null> {
    try {
      return await this.service.deleteReviewPositiveFactorOther(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
