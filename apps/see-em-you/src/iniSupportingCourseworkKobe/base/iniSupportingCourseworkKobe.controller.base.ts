/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { IniSupportingCourseworkKobeService } from "../iniSupportingCourseworkKobe.service";
import { IniSupportingCourseworkKobeCreateInput } from "./IniSupportingCourseworkKobeCreateInput";
import { IniSupportingCourseworkKobe } from "./IniSupportingCourseworkKobe";
import { IniSupportingCourseworkKobeFindManyArgs } from "./IniSupportingCourseworkKobeFindManyArgs";
import { IniSupportingCourseworkKobeWhereUniqueInput } from "./IniSupportingCourseworkKobeWhereUniqueInput";
import { IniSupportingCourseworkKobeUpdateInput } from "./IniSupportingCourseworkKobeUpdateInput";

export class IniSupportingCourseworkKobeControllerBase {
  constructor(protected readonly service: IniSupportingCourseworkKobeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: IniSupportingCourseworkKobe })
  async createIniSupportingCourseworkKobe(
    @common.Body() data: IniSupportingCourseworkKobeCreateInput
  ): Promise<IniSupportingCourseworkKobe> {
    return await this.service.createIniSupportingCourseworkKobe({
      data: data,
      select: {
        applicationId: true,
        description: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [IniSupportingCourseworkKobe] })
  @ApiNestedQuery(IniSupportingCourseworkKobeFindManyArgs)
  async iniSupportingCourseworkKobes(
    @common.Req() request: Request
  ): Promise<IniSupportingCourseworkKobe[]> {
    const args = plainToClass(
      IniSupportingCourseworkKobeFindManyArgs,
      request.query
    );
    return this.service.iniSupportingCourseworkKobes({
      ...args,
      select: {
        applicationId: true,
        description: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: IniSupportingCourseworkKobe })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async iniSupportingCourseworkKobe(
    @common.Param() params: IniSupportingCourseworkKobeWhereUniqueInput
  ): Promise<IniSupportingCourseworkKobe | null> {
    const result = await this.service.iniSupportingCourseworkKobe({
      where: params,
      select: {
        applicationId: true,
        description: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: IniSupportingCourseworkKobe })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateIniSupportingCourseworkKobe(
    @common.Param() params: IniSupportingCourseworkKobeWhereUniqueInput,
    @common.Body() data: IniSupportingCourseworkKobeUpdateInput
  ): Promise<IniSupportingCourseworkKobe | null> {
    try {
      return await this.service.updateIniSupportingCourseworkKobe({
        where: params,
        data: data,
        select: {
          applicationId: true,
          description: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: IniSupportingCourseworkKobe })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteIniSupportingCourseworkKobe(
    @common.Param() params: IniSupportingCourseworkKobeWhereUniqueInput
  ): Promise<IniSupportingCourseworkKobe | null> {
    try {
      return await this.service.deleteIniSupportingCourseworkKobe({
        where: params,
        select: {
          applicationId: true,
          description: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
