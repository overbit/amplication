/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { IniSupportingCourseworkKobe } from "./IniSupportingCourseworkKobe";
import { IniSupportingCourseworkKobeCountArgs } from "./IniSupportingCourseworkKobeCountArgs";
import { IniSupportingCourseworkKobeFindManyArgs } from "./IniSupportingCourseworkKobeFindManyArgs";
import { IniSupportingCourseworkKobeFindUniqueArgs } from "./IniSupportingCourseworkKobeFindUniqueArgs";
import { CreateIniSupportingCourseworkKobeArgs } from "./CreateIniSupportingCourseworkKobeArgs";
import { UpdateIniSupportingCourseworkKobeArgs } from "./UpdateIniSupportingCourseworkKobeArgs";
import { DeleteIniSupportingCourseworkKobeArgs } from "./DeleteIniSupportingCourseworkKobeArgs";
import { IniSupportingCourseworkKobeService } from "../iniSupportingCourseworkKobe.service";
@graphql.Resolver(() => IniSupportingCourseworkKobe)
export class IniSupportingCourseworkKobeResolverBase {
  constructor(protected readonly service: IniSupportingCourseworkKobeService) {}

  async _iniSupportingCourseworkKobesMeta(
    @graphql.Args() args: IniSupportingCourseworkKobeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [IniSupportingCourseworkKobe])
  async iniSupportingCourseworkKobes(
    @graphql.Args() args: IniSupportingCourseworkKobeFindManyArgs
  ): Promise<IniSupportingCourseworkKobe[]> {
    return this.service.iniSupportingCourseworkKobes(args);
  }

  @graphql.Query(() => IniSupportingCourseworkKobe, { nullable: true })
  async iniSupportingCourseworkKobe(
    @graphql.Args() args: IniSupportingCourseworkKobeFindUniqueArgs
  ): Promise<IniSupportingCourseworkKobe | null> {
    const result = await this.service.iniSupportingCourseworkKobe(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => IniSupportingCourseworkKobe)
  async createIniSupportingCourseworkKobe(
    @graphql.Args() args: CreateIniSupportingCourseworkKobeArgs
  ): Promise<IniSupportingCourseworkKobe> {
    return await this.service.createIniSupportingCourseworkKobe({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => IniSupportingCourseworkKobe)
  async updateIniSupportingCourseworkKobe(
    @graphql.Args() args: UpdateIniSupportingCourseworkKobeArgs
  ): Promise<IniSupportingCourseworkKobe | null> {
    try {
      return await this.service.updateIniSupportingCourseworkKobe({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => IniSupportingCourseworkKobe)
  async deleteIniSupportingCourseworkKobe(
    @graphql.Args() args: DeleteIniSupportingCourseworkKobeArgs
  ): Promise<IniSupportingCourseworkKobe | null> {
    try {
      return await this.service.deleteIniSupportingCourseworkKobe(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
