/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, IpedsRace as PrismaIpedsRace } from "@prisma/client";

export class IpedsRaceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.IpedsRaceCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.IpedsRaceCountArgs>
  ): Promise<number> {
    return this.prisma.ipedsRace.count(args);
  }

  async ipedsRaces<T extends Prisma.IpedsRaceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.IpedsRaceFindManyArgs>
  ): Promise<PrismaIpedsRace[]> {
    return this.prisma.ipedsRace.findMany(args);
  }
  async ipedsRace<T extends Prisma.IpedsRaceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.IpedsRaceFindUniqueArgs>
  ): Promise<PrismaIpedsRace | null> {
    return this.prisma.ipedsRace.findUnique(args);
  }
  async createIpedsRace<T extends Prisma.IpedsRaceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.IpedsRaceCreateArgs>
  ): Promise<PrismaIpedsRace> {
    return this.prisma.ipedsRace.create<T>(args);
  }
  async updateIpedsRace<T extends Prisma.IpedsRaceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.IpedsRaceUpdateArgs>
  ): Promise<PrismaIpedsRace> {
    return this.prisma.ipedsRace.update<T>(args);
  }
  async deleteIpedsRace<T extends Prisma.IpedsRaceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.IpedsRaceDeleteArgs>
  ): Promise<PrismaIpedsRace> {
    return this.prisma.ipedsRace.delete(args);
  }
}
