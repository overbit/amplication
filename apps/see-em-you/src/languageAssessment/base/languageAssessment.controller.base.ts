/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LanguageAssessmentService } from "../languageAssessment.service";
import { LanguageAssessmentCreateInput } from "./LanguageAssessmentCreateInput";
import { LanguageAssessment } from "./LanguageAssessment";
import { LanguageAssessmentFindManyArgs } from "./LanguageAssessmentFindManyArgs";
import { LanguageAssessmentWhereUniqueInput } from "./LanguageAssessmentWhereUniqueInput";
import { LanguageAssessmentUpdateInput } from "./LanguageAssessmentUpdateInput";

export class LanguageAssessmentControllerBase {
  constructor(protected readonly service: LanguageAssessmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LanguageAssessment })
  async createLanguageAssessment(
    @common.Body() data: LanguageAssessmentCreateInput
  ): Promise<LanguageAssessment> {
    return await this.service.createLanguageAssessment({
      data: data,
      select: {
        applicationId: true,
        language: true,
        listening: true,
        speaking: true,
        reading: true,
        writing: true,
        nativeSpeaker: true,
        yearsStudy: true,
        studyLevel: true,
        competencyEvidence: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LanguageAssessment] })
  @ApiNestedQuery(LanguageAssessmentFindManyArgs)
  async languageAssessments(
    @common.Req() request: Request
  ): Promise<LanguageAssessment[]> {
    const args = plainToClass(LanguageAssessmentFindManyArgs, request.query);
    return this.service.languageAssessments({
      ...args,
      select: {
        applicationId: true,
        language: true,
        listening: true,
        speaking: true,
        reading: true,
        writing: true,
        nativeSpeaker: true,
        yearsStudy: true,
        studyLevel: true,
        competencyEvidence: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LanguageAssessment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async languageAssessment(
    @common.Param() params: LanguageAssessmentWhereUniqueInput
  ): Promise<LanguageAssessment | null> {
    const result = await this.service.languageAssessment({
      where: params,
      select: {
        applicationId: true,
        language: true,
        listening: true,
        speaking: true,
        reading: true,
        writing: true,
        nativeSpeaker: true,
        yearsStudy: true,
        studyLevel: true,
        competencyEvidence: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LanguageAssessment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLanguageAssessment(
    @common.Param() params: LanguageAssessmentWhereUniqueInput,
    @common.Body() data: LanguageAssessmentUpdateInput
  ): Promise<LanguageAssessment | null> {
    try {
      return await this.service.updateLanguageAssessment({
        where: params,
        data: data,
        select: {
          applicationId: true,
          language: true,
          listening: true,
          speaking: true,
          reading: true,
          writing: true,
          nativeSpeaker: true,
          yearsStudy: true,
          studyLevel: true,
          competencyEvidence: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LanguageAssessment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLanguageAssessment(
    @common.Param() params: LanguageAssessmentWhereUniqueInput
  ): Promise<LanguageAssessment | null> {
    try {
      return await this.service.deleteLanguageAssessment({
        where: params,
        select: {
          applicationId: true,
          language: true,
          listening: true,
          speaking: true,
          reading: true,
          writing: true,
          nativeSpeaker: true,
          yearsStudy: true,
          studyLevel: true,
          competencyEvidence: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
