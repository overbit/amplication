/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DegreeLevelService } from "../degreeLevel.service";
import { DegreeLevelCreateInput } from "./DegreeLevelCreateInput";
import { DegreeLevel } from "./DegreeLevel";
import { DegreeLevelFindManyArgs } from "./DegreeLevelFindManyArgs";
import { DegreeLevelWhereUniqueInput } from "./DegreeLevelWhereUniqueInput";
import { DegreeLevelUpdateInput } from "./DegreeLevelUpdateInput";

export class DegreeLevelControllerBase {
  constructor(protected readonly service: DegreeLevelService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DegreeLevel })
  async createDegreeLevel(
    @common.Body() data: DegreeLevelCreateInput
  ): Promise<DegreeLevel> {
    return await this.service.createDegreeLevel({
      data: data,
      select: {
        name: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DegreeLevel] })
  @ApiNestedQuery(DegreeLevelFindManyArgs)
  async degreeLevels(@common.Req() request: Request): Promise<DegreeLevel[]> {
    const args = plainToClass(DegreeLevelFindManyArgs, request.query);
    return this.service.degreeLevels({
      ...args,
      select: {
        name: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DegreeLevel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async degreeLevel(
    @common.Param() params: DegreeLevelWhereUniqueInput
  ): Promise<DegreeLevel | null> {
    const result = await this.service.degreeLevel({
      where: params,
      select: {
        name: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DegreeLevel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDegreeLevel(
    @common.Param() params: DegreeLevelWhereUniqueInput,
    @common.Body() data: DegreeLevelUpdateInput
  ): Promise<DegreeLevel | null> {
    try {
      return await this.service.updateDegreeLevel({
        where: params,
        data: data,
        select: {
          name: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DegreeLevel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDegreeLevel(
    @common.Param() params: DegreeLevelWhereUniqueInput
  ): Promise<DegreeLevel | null> {
    try {
      return await this.service.deleteDegreeLevel({
        where: params,
        select: {
          name: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
