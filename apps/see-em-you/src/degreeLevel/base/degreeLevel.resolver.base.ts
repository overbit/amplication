/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateDegreeLevelArgs } from "./CreateDegreeLevelArgs";
import { UpdateDegreeLevelArgs } from "./UpdateDegreeLevelArgs";
import { DeleteDegreeLevelArgs } from "./DeleteDegreeLevelArgs";
import { DegreeLevelCountArgs } from "./DegreeLevelCountArgs";
import { DegreeLevelFindManyArgs } from "./DegreeLevelFindManyArgs";
import { DegreeLevelFindUniqueArgs } from "./DegreeLevelFindUniqueArgs";
import { DegreeLevel } from "./DegreeLevel";
import { DegreeLevelService } from "../degreeLevel.service";
@graphql.Resolver(() => DegreeLevel)
export class DegreeLevelResolverBase {
  constructor(protected readonly service: DegreeLevelService) {}

  async _degreeLevelsMeta(
    @graphql.Args() args: DegreeLevelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DegreeLevel])
  async degreeLevels(
    @graphql.Args() args: DegreeLevelFindManyArgs
  ): Promise<DegreeLevel[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => DegreeLevel, { nullable: true })
  async degreeLevel(
    @graphql.Args() args: DegreeLevelFindUniqueArgs
  ): Promise<DegreeLevel | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DegreeLevel)
  async createDegreeLevel(
    @graphql.Args() args: CreateDegreeLevelArgs
  ): Promise<DegreeLevel> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DegreeLevel)
  async updateDegreeLevel(
    @graphql.Args() args: UpdateDegreeLevelArgs
  ): Promise<DegreeLevel | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DegreeLevel)
  async deleteDegreeLevel(
    @graphql.Args() args: DeleteDegreeLevelArgs
  ): Promise<DegreeLevel | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
