/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SlateRecommend2Service } from "../slateRecommend2.service";
import { SlateRecommend2CreateInput } from "./SlateRecommend2CreateInput";
import { SlateRecommend2WhereInput } from "./SlateRecommend2WhereInput";
import { SlateRecommend2WhereUniqueInput } from "./SlateRecommend2WhereUniqueInput";
import { SlateRecommend2FindManyArgs } from "./SlateRecommend2FindManyArgs";
import { SlateRecommend2UpdateInput } from "./SlateRecommend2UpdateInput";
import { SlateRecommend2 } from "./SlateRecommend2";

export class SlateRecommend2ControllerBase {
  constructor(protected readonly service: SlateRecommend2Service) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SlateRecommend2 })
  async create(
    @common.Body() data: SlateRecommend2CreateInput
  ): Promise<SlateRecommend2> {
    return await this.service.create({
      data: data,
      select: {
        first: true,
        id: true,
        last: true,
        middle: true,
        prefix: true,
        reference2Email: true,
        reference2First: true,
        reference2Industry: true,
        reference2Last: true,
        reference2Organization: true,
        reference2Phone: true,
        reference2Submitted: true,
        reference2Title: true,
        reference2Type: true,
        referenceNum2IsrmsRecommenderScore1: true,
        referenceNum2IsrmsRecommenderScore10: true,
        referenceNum2IsrmsRecommenderScore11: true,
        referenceNum2IsrmsRecommenderScore12: true,
        referenceNum2IsrmsRecommenderScore13: true,
        referenceNum2IsrmsRecommenderScore14: true,
        referenceNum2IsrmsRecommenderScore15: true,
        referenceNum2IsrmsRecommenderScore2: true,
        referenceNum2IsrmsRecommenderScore3: true,
        referenceNum2IsrmsRecommenderScore4: true,
        referenceNum2IsrmsRecommenderScore5: true,
        referenceNum2IsrmsRecommenderScore6: true,
        referenceNum2IsrmsRecommenderScore7: true,
        referenceNum2IsrmsRecommenderScore8: true,
        referenceNum2IsrmsRecommenderScore9: true,
        referenceNum2MseRecommendationAdditional: true,
        referenceNum2MseRecommendationComparison: true,
        referenceNum2MseRecommendationHowKnown: true,
        referenceNum2MseRecommendationProjectPerformance: true,
        referenceNum2MseRecommendationStrengthsWeakness: true,
        referenceNum2RecommenderScore1: true,
        referenceNum2RecommenderScore2: true,
        referenceNum2RecommenderScore3: true,
        referenceNum2RecommenderScore4: true,
        referenceNum2RecommenderScore5: true,
        referenceNum2RecommenderScore6: true,
        referenceNum2RecommenderScore7: true,
        referenceNum2RecommenderScore8: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SlateRecommend2] })
  @ApiNestedQuery(SlateRecommend2FindManyArgs)
  async findMany(@common.Req() request: Request): Promise<SlateRecommend2[]> {
    const args = plainToClass(SlateRecommend2FindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        first: true,
        id: true,
        last: true,
        middle: true,
        prefix: true,
        reference2Email: true,
        reference2First: true,
        reference2Industry: true,
        reference2Last: true,
        reference2Organization: true,
        reference2Phone: true,
        reference2Submitted: true,
        reference2Title: true,
        reference2Type: true,
        referenceNum2IsrmsRecommenderScore1: true,
        referenceNum2IsrmsRecommenderScore10: true,
        referenceNum2IsrmsRecommenderScore11: true,
        referenceNum2IsrmsRecommenderScore12: true,
        referenceNum2IsrmsRecommenderScore13: true,
        referenceNum2IsrmsRecommenderScore14: true,
        referenceNum2IsrmsRecommenderScore15: true,
        referenceNum2IsrmsRecommenderScore2: true,
        referenceNum2IsrmsRecommenderScore3: true,
        referenceNum2IsrmsRecommenderScore4: true,
        referenceNum2IsrmsRecommenderScore5: true,
        referenceNum2IsrmsRecommenderScore6: true,
        referenceNum2IsrmsRecommenderScore7: true,
        referenceNum2IsrmsRecommenderScore8: true,
        referenceNum2IsrmsRecommenderScore9: true,
        referenceNum2MseRecommendationAdditional: true,
        referenceNum2MseRecommendationComparison: true,
        referenceNum2MseRecommendationHowKnown: true,
        referenceNum2MseRecommendationProjectPerformance: true,
        referenceNum2MseRecommendationStrengthsWeakness: true,
        referenceNum2RecommenderScore1: true,
        referenceNum2RecommenderScore2: true,
        referenceNum2RecommenderScore3: true,
        referenceNum2RecommenderScore4: true,
        referenceNum2RecommenderScore5: true,
        referenceNum2RecommenderScore6: true,
        referenceNum2RecommenderScore7: true,
        referenceNum2RecommenderScore8: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SlateRecommend2 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: SlateRecommend2WhereUniqueInput
  ): Promise<SlateRecommend2 | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        first: true,
        id: true,
        last: true,
        middle: true,
        prefix: true,
        reference2Email: true,
        reference2First: true,
        reference2Industry: true,
        reference2Last: true,
        reference2Organization: true,
        reference2Phone: true,
        reference2Submitted: true,
        reference2Title: true,
        reference2Type: true,
        referenceNum2IsrmsRecommenderScore1: true,
        referenceNum2IsrmsRecommenderScore10: true,
        referenceNum2IsrmsRecommenderScore11: true,
        referenceNum2IsrmsRecommenderScore12: true,
        referenceNum2IsrmsRecommenderScore13: true,
        referenceNum2IsrmsRecommenderScore14: true,
        referenceNum2IsrmsRecommenderScore15: true,
        referenceNum2IsrmsRecommenderScore2: true,
        referenceNum2IsrmsRecommenderScore3: true,
        referenceNum2IsrmsRecommenderScore4: true,
        referenceNum2IsrmsRecommenderScore5: true,
        referenceNum2IsrmsRecommenderScore6: true,
        referenceNum2IsrmsRecommenderScore7: true,
        referenceNum2IsrmsRecommenderScore8: true,
        referenceNum2IsrmsRecommenderScore9: true,
        referenceNum2MseRecommendationAdditional: true,
        referenceNum2MseRecommendationComparison: true,
        referenceNum2MseRecommendationHowKnown: true,
        referenceNum2MseRecommendationProjectPerformance: true,
        referenceNum2MseRecommendationStrengthsWeakness: true,
        referenceNum2RecommenderScore1: true,
        referenceNum2RecommenderScore2: true,
        referenceNum2RecommenderScore3: true,
        referenceNum2RecommenderScore4: true,
        referenceNum2RecommenderScore5: true,
        referenceNum2RecommenderScore6: true,
        referenceNum2RecommenderScore7: true,
        referenceNum2RecommenderScore8: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SlateRecommend2 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: SlateRecommend2WhereUniqueInput,
    @common.Body() data: SlateRecommend2UpdateInput
  ): Promise<SlateRecommend2 | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          first: true,
          id: true,
          last: true,
          middle: true,
          prefix: true,
          reference2Email: true,
          reference2First: true,
          reference2Industry: true,
          reference2Last: true,
          reference2Organization: true,
          reference2Phone: true,
          reference2Submitted: true,
          reference2Title: true,
          reference2Type: true,
          referenceNum2IsrmsRecommenderScore1: true,
          referenceNum2IsrmsRecommenderScore10: true,
          referenceNum2IsrmsRecommenderScore11: true,
          referenceNum2IsrmsRecommenderScore12: true,
          referenceNum2IsrmsRecommenderScore13: true,
          referenceNum2IsrmsRecommenderScore14: true,
          referenceNum2IsrmsRecommenderScore15: true,
          referenceNum2IsrmsRecommenderScore2: true,
          referenceNum2IsrmsRecommenderScore3: true,
          referenceNum2IsrmsRecommenderScore4: true,
          referenceNum2IsrmsRecommenderScore5: true,
          referenceNum2IsrmsRecommenderScore6: true,
          referenceNum2IsrmsRecommenderScore7: true,
          referenceNum2IsrmsRecommenderScore8: true,
          referenceNum2IsrmsRecommenderScore9: true,
          referenceNum2MseRecommendationAdditional: true,
          referenceNum2MseRecommendationComparison: true,
          referenceNum2MseRecommendationHowKnown: true,
          referenceNum2MseRecommendationProjectPerformance: true,
          referenceNum2MseRecommendationStrengthsWeakness: true,
          referenceNum2RecommenderScore1: true,
          referenceNum2RecommenderScore2: true,
          referenceNum2RecommenderScore3: true,
          referenceNum2RecommenderScore4: true,
          referenceNum2RecommenderScore5: true,
          referenceNum2RecommenderScore6: true,
          referenceNum2RecommenderScore7: true,
          referenceNum2RecommenderScore8: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SlateRecommend2 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: SlateRecommend2WhereUniqueInput
  ): Promise<SlateRecommend2 | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          first: true,
          id: true,
          last: true,
          middle: true,
          prefix: true,
          reference2Email: true,
          reference2First: true,
          reference2Industry: true,
          reference2Last: true,
          reference2Organization: true,
          reference2Phone: true,
          reference2Submitted: true,
          reference2Title: true,
          reference2Type: true,
          referenceNum2IsrmsRecommenderScore1: true,
          referenceNum2IsrmsRecommenderScore10: true,
          referenceNum2IsrmsRecommenderScore11: true,
          referenceNum2IsrmsRecommenderScore12: true,
          referenceNum2IsrmsRecommenderScore13: true,
          referenceNum2IsrmsRecommenderScore14: true,
          referenceNum2IsrmsRecommenderScore15: true,
          referenceNum2IsrmsRecommenderScore2: true,
          referenceNum2IsrmsRecommenderScore3: true,
          referenceNum2IsrmsRecommenderScore4: true,
          referenceNum2IsrmsRecommenderScore5: true,
          referenceNum2IsrmsRecommenderScore6: true,
          referenceNum2IsrmsRecommenderScore7: true,
          referenceNum2IsrmsRecommenderScore8: true,
          referenceNum2IsrmsRecommenderScore9: true,
          referenceNum2MseRecommendationAdditional: true,
          referenceNum2MseRecommendationComparison: true,
          referenceNum2MseRecommendationHowKnown: true,
          referenceNum2MseRecommendationProjectPerformance: true,
          referenceNum2MseRecommendationStrengthsWeakness: true,
          referenceNum2RecommenderScore1: true,
          referenceNum2RecommenderScore2: true,
          referenceNum2RecommenderScore3: true,
          referenceNum2RecommenderScore4: true,
          referenceNum2RecommenderScore5: true,
          referenceNum2RecommenderScore6: true,
          referenceNum2RecommenderScore7: true,
          referenceNum2RecommenderScore8: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
