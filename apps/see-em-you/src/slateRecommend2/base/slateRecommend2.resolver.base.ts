/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateSlateRecommend2Args } from "./CreateSlateRecommend2Args";
import { UpdateSlateRecommend2Args } from "./UpdateSlateRecommend2Args";
import { DeleteSlateRecommend2Args } from "./DeleteSlateRecommend2Args";
import { SlateRecommend2CountArgs } from "./SlateRecommend2CountArgs";
import { SlateRecommend2FindManyArgs } from "./SlateRecommend2FindManyArgs";
import { SlateRecommend2FindUniqueArgs } from "./SlateRecommend2FindUniqueArgs";
import { SlateRecommend2 } from "./SlateRecommend2";
import { SlateRecommend2Service } from "../slateRecommend2.service";
@graphql.Resolver(() => SlateRecommend2)
export class SlateRecommend2ResolverBase {
  constructor(protected readonly service: SlateRecommend2Service) {}

  async _slateRecommend2sMeta(
    @graphql.Args() args: SlateRecommend2CountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SlateRecommend2])
  async slateRecommend2s(
    @graphql.Args() args: SlateRecommend2FindManyArgs
  ): Promise<SlateRecommend2[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => SlateRecommend2, { nullable: true })
  async slateRecommend2(
    @graphql.Args() args: SlateRecommend2FindUniqueArgs
  ): Promise<SlateRecommend2 | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SlateRecommend2)
  async createSlateRecommend2(
    @graphql.Args() args: CreateSlateRecommend2Args
  ): Promise<SlateRecommend2> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SlateRecommend2)
  async updateSlateRecommend2(
    @graphql.Args() args: UpdateSlateRecommend2Args
  ): Promise<SlateRecommend2 | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SlateRecommend2)
  async deleteSlateRecommend2(
    @graphql.Args() args: DeleteSlateRecommend2Args
  ): Promise<SlateRecommend2 | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
