/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SlateMaterialService } from "../slateMaterial.service";
import { SlateMaterialCreateInput } from "./SlateMaterialCreateInput";
import { SlateMaterial } from "./SlateMaterial";
import { SlateMaterialFindManyArgs } from "./SlateMaterialFindManyArgs";
import { SlateMaterialWhereUniqueInput } from "./SlateMaterialWhereUniqueInput";
import { SlateMaterialUpdateInput } from "./SlateMaterialUpdateInput";

export class SlateMaterialControllerBase {
  constructor(protected readonly service: SlateMaterialService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SlateMaterial })
  async createSlateMaterial(
    @common.Body() data: SlateMaterialCreateInput
  ): Promise<SlateMaterial> {
    return await this.service.createSlateMaterial({
      data: data,
      select: {
        applicationSlateGuid: true,
        materialExport1: true,
        fileName: true,
        materialName: true,
        name: true,
        email: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SlateMaterial] })
  @ApiNestedQuery(SlateMaterialFindManyArgs)
  async slateMaterials(
    @common.Req() request: Request
  ): Promise<SlateMaterial[]> {
    const args = plainToClass(SlateMaterialFindManyArgs, request.query);
    return this.service.slateMaterials({
      ...args,
      select: {
        applicationSlateGuid: true,
        materialExport1: true,
        fileName: true,
        materialName: true,
        name: true,
        email: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SlateMaterial })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async slateMaterial(
    @common.Param() params: SlateMaterialWhereUniqueInput
  ): Promise<SlateMaterial | null> {
    const result = await this.service.slateMaterial({
      where: params,
      select: {
        applicationSlateGuid: true,
        materialExport1: true,
        fileName: true,
        materialName: true,
        name: true,
        email: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SlateMaterial })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSlateMaterial(
    @common.Param() params: SlateMaterialWhereUniqueInput,
    @common.Body() data: SlateMaterialUpdateInput
  ): Promise<SlateMaterial | null> {
    try {
      return await this.service.updateSlateMaterial({
        where: params,
        data: data,
        select: {
          applicationSlateGuid: true,
          materialExport1: true,
          fileName: true,
          materialName: true,
          name: true,
          email: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SlateMaterial })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSlateMaterial(
    @common.Param() params: SlateMaterialWhereUniqueInput
  ): Promise<SlateMaterial | null> {
    try {
      return await this.service.deleteSlateMaterial({
        where: params,
        select: {
          applicationSlateGuid: true,
          materialExport1: true,
          fileName: true,
          materialName: true,
          name: true,
          email: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
