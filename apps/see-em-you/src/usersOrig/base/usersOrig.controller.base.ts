/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UsersOrigService } from "../usersOrig.service";
import { UsersOrigCreateInput } from "./UsersOrigCreateInput";
import { UsersOrig } from "./UsersOrig";
import { UsersOrigFindManyArgs } from "./UsersOrigFindManyArgs";
import { UsersOrigWhereUniqueInput } from "./UsersOrigWhereUniqueInput";
import { UsersOrigUpdateInput } from "./UsersOrigUpdateInput";

export class UsersOrigControllerBase {
  constructor(protected readonly service: UsersOrigService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UsersOrig })
  async createUsersOrig(
    @common.Body() data: UsersOrigCreateInput
  ): Promise<UsersOrig> {
    return await this.service.createUsersOrig({
      data: data,
      select: {
        email: true,
        firstname: true,
        guid: true,
        id: true,
        initials: true,
        lastname: true,
        middlename: true,
        password: true,
        signupDate: true,
        title: true,
        username: true,
        verified: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UsersOrig] })
  @ApiNestedQuery(UsersOrigFindManyArgs)
  async usersOrigs(@common.Req() request: Request): Promise<UsersOrig[]> {
    const args = plainToClass(UsersOrigFindManyArgs, request.query);
    return this.service.usersOrigs({
      ...args,
      select: {
        email: true,
        firstname: true,
        guid: true,
        id: true,
        initials: true,
        lastname: true,
        middlename: true,
        password: true,
        signupDate: true,
        title: true,
        username: true,
        verified: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UsersOrig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async usersOrig(
    @common.Param() params: UsersOrigWhereUniqueInput
  ): Promise<UsersOrig | null> {
    const result = await this.service.usersOrig({
      where: params,
      select: {
        email: true,
        firstname: true,
        guid: true,
        id: true,
        initials: true,
        lastname: true,
        middlename: true,
        password: true,
        signupDate: true,
        title: true,
        username: true,
        verified: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UsersOrig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUsersOrig(
    @common.Param() params: UsersOrigWhereUniqueInput,
    @common.Body() data: UsersOrigUpdateInput
  ): Promise<UsersOrig | null> {
    try {
      return await this.service.updateUsersOrig({
        where: params,
        data: data,
        select: {
          email: true,
          firstname: true,
          guid: true,
          id: true,
          initials: true,
          lastname: true,
          middlename: true,
          password: true,
          signupDate: true,
          title: true,
          username: true,
          verified: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UsersOrig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUsersOrig(
    @common.Param() params: UsersOrigWhereUniqueInput
  ): Promise<UsersOrig | null> {
    try {
      return await this.service.deleteUsersOrig({
        where: params,
        select: {
          email: true,
          firstname: true,
          guid: true,
          id: true,
          initials: true,
          lastname: true,
          middlename: true,
          password: true,
          signupDate: true,
          title: true,
          username: true,
          verified: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
