/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateUsersOrigArgs } from "./CreateUsersOrigArgs";
import { UpdateUsersOrigArgs } from "./UpdateUsersOrigArgs";
import { DeleteUsersOrigArgs } from "./DeleteUsersOrigArgs";
import { UsersOrigCountArgs } from "./UsersOrigCountArgs";
import { UsersOrigFindManyArgs } from "./UsersOrigFindManyArgs";
import { UsersOrigFindUniqueArgs } from "./UsersOrigFindUniqueArgs";
import { UsersOrig } from "./UsersOrig";
import { UsersOrigService } from "../usersOrig.service";
@graphql.Resolver(() => UsersOrig)
export class UsersOrigResolverBase {
  constructor(protected readonly service: UsersOrigService) {}

  async _usersOrigsMeta(
    @graphql.Args() args: UsersOrigCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UsersOrig])
  async usersOrigs(
    @graphql.Args() args: UsersOrigFindManyArgs
  ): Promise<UsersOrig[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => UsersOrig, { nullable: true })
  async usersOrig(
    @graphql.Args() args: UsersOrigFindUniqueArgs
  ): Promise<UsersOrig | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UsersOrig)
  async createUsersOrig(
    @graphql.Args() args: CreateUsersOrigArgs
  ): Promise<UsersOrig> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UsersOrig)
  async updateUsersOrig(
    @graphql.Args() args: UpdateUsersOrigArgs
  ): Promise<UsersOrig | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UsersOrig)
  async deleteUsersOrig(
    @graphql.Args() args: DeleteUsersOrigArgs
  ): Promise<UsersOrig | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
