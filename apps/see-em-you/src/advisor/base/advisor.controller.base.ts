/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AdvisorService } from "../advisor.service";
import { AdvisorCreateInput } from "./AdvisorCreateInput";
import { Advisor } from "./Advisor";
import { AdvisorFindManyArgs } from "./AdvisorFindManyArgs";
import { AdvisorWhereUniqueInput } from "./AdvisorWhereUniqueInput";
import { AdvisorUpdateInput } from "./AdvisorUpdateInput";

export class AdvisorControllerBase {
  constructor(protected readonly service: AdvisorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Advisor })
  async createAdvisor(
    @common.Body() data: AdvisorCreateInput
  ): Promise<Advisor> {
    return await this.service.createAdvisor({
      data: data,
      select: {
        userId: true,
        departmentId: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Advisor] })
  @ApiNestedQuery(AdvisorFindManyArgs)
  async advisors(@common.Req() request: Request): Promise<Advisor[]> {
    const args = plainToClass(AdvisorFindManyArgs, request.query);
    return this.service.advisors({
      ...args,
      select: {
        userId: true,
        departmentId: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Advisor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async advisor(
    @common.Param() params: AdvisorWhereUniqueInput
  ): Promise<Advisor | null> {
    const result = await this.service.advisor({
      where: params,
      select: {
        userId: true,
        departmentId: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Advisor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAdvisor(
    @common.Param() params: AdvisorWhereUniqueInput,
    @common.Body() data: AdvisorUpdateInput
  ): Promise<Advisor | null> {
    try {
      return await this.service.updateAdvisor({
        where: params,
        data: data,
        select: {
          userId: true,
          departmentId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Advisor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAdvisor(
    @common.Param() params: AdvisorWhereUniqueInput
  ): Promise<Advisor | null> {
    try {
      return await this.service.deleteAdvisor({
        where: params,
        select: {
          userId: true,
          departmentId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
