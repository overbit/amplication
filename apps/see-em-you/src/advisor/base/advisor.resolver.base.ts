/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateAdvisorArgs } from "./CreateAdvisorArgs";
import { UpdateAdvisorArgs } from "./UpdateAdvisorArgs";
import { DeleteAdvisorArgs } from "./DeleteAdvisorArgs";
import { AdvisorCountArgs } from "./AdvisorCountArgs";
import { AdvisorFindManyArgs } from "./AdvisorFindManyArgs";
import { AdvisorFindUniqueArgs } from "./AdvisorFindUniqueArgs";
import { Advisor } from "./Advisor";
import { AdvisorService } from "../advisor.service";
@graphql.Resolver(() => Advisor)
export class AdvisorResolverBase {
  constructor(protected readonly service: AdvisorService) {}

  async _advisorsMeta(
    @graphql.Args() args: AdvisorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Advisor])
  async advisors(
    @graphql.Args() args: AdvisorFindManyArgs
  ): Promise<Advisor[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Advisor, { nullable: true })
  async advisor(
    @graphql.Args() args: AdvisorFindUniqueArgs
  ): Promise<Advisor | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Advisor)
  async createAdvisor(
    @graphql.Args() args: CreateAdvisorArgs
  ): Promise<Advisor> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Advisor)
  async updateAdvisor(
    @graphql.Args() args: UpdateAdvisorArgs
  ): Promise<Advisor | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Advisor)
  async deleteAdvisor(
    @graphql.Args() args: DeleteAdvisorArgs
  ): Promise<Advisor | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
