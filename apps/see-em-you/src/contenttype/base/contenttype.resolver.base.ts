/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateContenttypeArgs } from "./CreateContenttypeArgs";
import { UpdateContenttypeArgs } from "./UpdateContenttypeArgs";
import { DeleteContenttypeArgs } from "./DeleteContenttypeArgs";
import { ContenttypeCountArgs } from "./ContenttypeCountArgs";
import { ContenttypeFindManyArgs } from "./ContenttypeFindManyArgs";
import { ContenttypeFindUniqueArgs } from "./ContenttypeFindUniqueArgs";
import { Contenttype } from "./Contenttype";
import { ContenttypeService } from "../contenttype.service";
@graphql.Resolver(() => Contenttype)
export class ContenttypeResolverBase {
  constructor(protected readonly service: ContenttypeService) {}

  async _contenttypesMeta(
    @graphql.Args() args: ContenttypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Contenttype])
  async contenttypes(
    @graphql.Args() args: ContenttypeFindManyArgs
  ): Promise<Contenttype[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Contenttype, { nullable: true })
  async contenttype(
    @graphql.Args() args: ContenttypeFindUniqueArgs
  ): Promise<Contenttype | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Contenttype)
  async createContenttype(
    @graphql.Args() args: CreateContenttypeArgs
  ): Promise<Contenttype> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Contenttype)
  async updateContenttype(
    @graphql.Args() args: UpdateContenttypeArgs
  ): Promise<Contenttype | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Contenttype)
  async deleteContenttype(
    @graphql.Args() args: DeleteContenttypeArgs
  ): Promise<Contenttype | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
