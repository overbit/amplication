/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ScsUser as PrismaScsUser } from "@prisma/client";

export class ScsUserServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ScsUserCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScsUserCountArgs>
  ): Promise<number> {
    return this.prisma.scsUser.count(args);
  }

  async scsUsers<T extends Prisma.ScsUserFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScsUserFindManyArgs>
  ): Promise<PrismaScsUser[]> {
    return this.prisma.scsUser.findMany(args);
  }
  async scsUser<T extends Prisma.ScsUserFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScsUserFindUniqueArgs>
  ): Promise<PrismaScsUser | null> {
    return this.prisma.scsUser.findUnique(args);
  }
  async createScsUser<T extends Prisma.ScsUserCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScsUserCreateArgs>
  ): Promise<PrismaScsUser> {
    return this.prisma.scsUser.create<T>(args);
  }
  async updateScsUser<T extends Prisma.ScsUserUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScsUserUpdateArgs>
  ): Promise<PrismaScsUser> {
    return this.prisma.scsUser.update<T>(args);
  }
  async deleteScsUser<T extends Prisma.ScsUserDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScsUserDeleteArgs>
  ): Promise<PrismaScsUser> {
    return this.prisma.scsUser.delete(args);
  }
}
