/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MhciSlateIeltService } from "../mhciSlateIelt.service";
import { MhciSlateIeltCreateInput } from "./MhciSlateIeltCreateInput";
import { MhciSlateIelt } from "./MhciSlateIelt";
import { MhciSlateIeltFindManyArgs } from "./MhciSlateIeltFindManyArgs";
import { MhciSlateIeltWhereUniqueInput } from "./MhciSlateIeltWhereUniqueInput";
import { MhciSlateIeltUpdateInput } from "./MhciSlateIeltUpdateInput";

export class MhciSlateIeltControllerBase {
  constructor(protected readonly service: MhciSlateIeltService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MhciSlateIelt })
  async createMhciSlateIelt(
    @common.Body() data: MhciSlateIeltCreateInput
  ): Promise<MhciSlateIelt> {
    return await this.service.createMhciSlateIelt({
      data: data,
      select: {
        prefix: true,
        first: true,
        middle: true,
        last: true,
        ieltsOverallBandScore: true,
        ieltsListening: true,
        ieltsReading: true,
        ieltsWriting: true,
        ieltsSpeaking: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MhciSlateIelt] })
  @ApiNestedQuery(MhciSlateIeltFindManyArgs)
  async mhciSlateIelts(
    @common.Req() request: Request
  ): Promise<MhciSlateIelt[]> {
    const args = plainToClass(MhciSlateIeltFindManyArgs, request.query);
    return this.service.mhciSlateIelts({
      ...args,
      select: {
        prefix: true,
        first: true,
        middle: true,
        last: true,
        ieltsOverallBandScore: true,
        ieltsListening: true,
        ieltsReading: true,
        ieltsWriting: true,
        ieltsSpeaking: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MhciSlateIelt })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mhciSlateIelt(
    @common.Param() params: MhciSlateIeltWhereUniqueInput
  ): Promise<MhciSlateIelt | null> {
    const result = await this.service.mhciSlateIelt({
      where: params,
      select: {
        prefix: true,
        first: true,
        middle: true,
        last: true,
        ieltsOverallBandScore: true,
        ieltsListening: true,
        ieltsReading: true,
        ieltsWriting: true,
        ieltsSpeaking: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MhciSlateIelt })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMhciSlateIelt(
    @common.Param() params: MhciSlateIeltWhereUniqueInput,
    @common.Body() data: MhciSlateIeltUpdateInput
  ): Promise<MhciSlateIelt | null> {
    try {
      return await this.service.updateMhciSlateIelt({
        where: params,
        data: data,
        select: {
          prefix: true,
          first: true,
          middle: true,
          last: true,
          ieltsOverallBandScore: true,
          ieltsListening: true,
          ieltsReading: true,
          ieltsWriting: true,
          ieltsSpeaking: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MhciSlateIelt })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMhciSlateIelt(
    @common.Param() params: MhciSlateIeltWhereUniqueInput
  ): Promise<MhciSlateIelt | null> {
    try {
      return await this.service.deleteMhciSlateIelt({
        where: params,
        select: {
          prefix: true,
          first: true,
          middle: true,
          last: true,
          ieltsOverallBandScore: true,
          ieltsListening: true,
          ieltsReading: true,
          ieltsWriting: true,
          ieltsSpeaking: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
