/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LuUsersUsertypesOrigService } from "../luUsersUsertypesOrig.service";
import { LuUsersUsertypesOrigCreateInput } from "./LuUsersUsertypesOrigCreateInput";
import { LuUsersUsertypesOrig } from "./LuUsersUsertypesOrig";
import { LuUsersUsertypesOrigFindManyArgs } from "./LuUsersUsertypesOrigFindManyArgs";
import { LuUsersUsertypesOrigWhereUniqueInput } from "./LuUsersUsertypesOrigWhereUniqueInput";
import { LuUsersUsertypesOrigUpdateInput } from "./LuUsersUsertypesOrigUpdateInput";

export class LuUsersUsertypesOrigControllerBase {
  constructor(protected readonly service: LuUsersUsertypesOrigService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LuUsersUsertypesOrig })
  async createLuUsersUsertypesOrig(
    @common.Body() data: LuUsersUsertypesOrigCreateInput
  ): Promise<LuUsersUsertypesOrig> {
    return await this.service.createLuUsersUsertypesOrig({
      data: data,
      select: {
        userId: true,
        usertypeId: true,
        domain: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LuUsersUsertypesOrig] })
  @ApiNestedQuery(LuUsersUsertypesOrigFindManyArgs)
  async luUsersUsertypesOrigs(
    @common.Req() request: Request
  ): Promise<LuUsersUsertypesOrig[]> {
    const args = plainToClass(LuUsersUsertypesOrigFindManyArgs, request.query);
    return this.service.luUsersUsertypesOrigs({
      ...args,
      select: {
        userId: true,
        usertypeId: true,
        domain: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LuUsersUsertypesOrig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async luUsersUsertypesOrig(
    @common.Param() params: LuUsersUsertypesOrigWhereUniqueInput
  ): Promise<LuUsersUsertypesOrig | null> {
    const result = await this.service.luUsersUsertypesOrig({
      where: params,
      select: {
        userId: true,
        usertypeId: true,
        domain: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LuUsersUsertypesOrig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLuUsersUsertypesOrig(
    @common.Param() params: LuUsersUsertypesOrigWhereUniqueInput,
    @common.Body() data: LuUsersUsertypesOrigUpdateInput
  ): Promise<LuUsersUsertypesOrig | null> {
    try {
      return await this.service.updateLuUsersUsertypesOrig({
        where: params,
        data: data,
        select: {
          userId: true,
          usertypeId: true,
          domain: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LuUsersUsertypesOrig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLuUsersUsertypesOrig(
    @common.Param() params: LuUsersUsertypesOrigWhereUniqueInput
  ): Promise<LuUsersUsertypesOrig | null> {
    try {
      return await this.service.deleteLuUsersUsertypesOrig({
        where: params,
        select: {
          userId: true,
          usertypeId: true,
          domain: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
