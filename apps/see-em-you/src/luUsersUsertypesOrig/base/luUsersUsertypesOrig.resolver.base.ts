/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateLuUsersUsertypesOrigArgs } from "./CreateLuUsersUsertypesOrigArgs";
import { UpdateLuUsersUsertypesOrigArgs } from "./UpdateLuUsersUsertypesOrigArgs";
import { DeleteLuUsersUsertypesOrigArgs } from "./DeleteLuUsersUsertypesOrigArgs";
import { LuUsersUsertypesOrigCountArgs } from "./LuUsersUsertypesOrigCountArgs";
import { LuUsersUsertypesOrigFindManyArgs } from "./LuUsersUsertypesOrigFindManyArgs";
import { LuUsersUsertypesOrigFindUniqueArgs } from "./LuUsersUsertypesOrigFindUniqueArgs";
import { LuUsersUsertypesOrig } from "./LuUsersUsertypesOrig";
import { LuUsersUsertypesOrigService } from "../luUsersUsertypesOrig.service";
@graphql.Resolver(() => LuUsersUsertypesOrig)
export class LuUsersUsertypesOrigResolverBase {
  constructor(protected readonly service: LuUsersUsertypesOrigService) {}

  async _luUsersUsertypesOrigsMeta(
    @graphql.Args() args: LuUsersUsertypesOrigCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LuUsersUsertypesOrig])
  async luUsersUsertypesOrigs(
    @graphql.Args() args: LuUsersUsertypesOrigFindManyArgs
  ): Promise<LuUsersUsertypesOrig[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => LuUsersUsertypesOrig, { nullable: true })
  async luUsersUsertypesOrig(
    @graphql.Args() args: LuUsersUsertypesOrigFindUniqueArgs
  ): Promise<LuUsersUsertypesOrig | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LuUsersUsertypesOrig)
  async createLuUsersUsertypesOrig(
    @graphql.Args() args: CreateLuUsersUsertypesOrigArgs
  ): Promise<LuUsersUsertypesOrig> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LuUsersUsertypesOrig)
  async updateLuUsersUsertypesOrig(
    @graphql.Args() args: UpdateLuUsersUsertypesOrigArgs
  ): Promise<LuUsersUsertypesOrig | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LuUsersUsertypesOrig)
  async deleteLuUsersUsertypesOrig(
    @graphql.Args() args: DeleteLuUsersUsertypesOrigArgs
  ): Promise<LuUsersUsertypesOrig | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
