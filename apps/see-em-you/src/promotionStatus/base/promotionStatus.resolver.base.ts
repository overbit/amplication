/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreatePromotionStatusArgs } from "./CreatePromotionStatusArgs";
import { UpdatePromotionStatusArgs } from "./UpdatePromotionStatusArgs";
import { DeletePromotionStatusArgs } from "./DeletePromotionStatusArgs";
import { PromotionStatusCountArgs } from "./PromotionStatusCountArgs";
import { PromotionStatusFindManyArgs } from "./PromotionStatusFindManyArgs";
import { PromotionStatusFindUniqueArgs } from "./PromotionStatusFindUniqueArgs";
import { PromotionStatus } from "./PromotionStatus";
import { PromotionStatusService } from "../promotionStatus.service";
@graphql.Resolver(() => PromotionStatus)
export class PromotionStatusResolverBase {
  constructor(protected readonly service: PromotionStatusService) {}

  async _promotionStatusesMeta(
    @graphql.Args() args: PromotionStatusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PromotionStatus])
  async promotionStatuses(
    @graphql.Args() args: PromotionStatusFindManyArgs
  ): Promise<PromotionStatus[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => PromotionStatus, { nullable: true })
  async promotionStatus(
    @graphql.Args() args: PromotionStatusFindUniqueArgs
  ): Promise<PromotionStatus | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PromotionStatus)
  async createPromotionStatus(
    @graphql.Args() args: CreatePromotionStatusArgs
  ): Promise<PromotionStatus> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PromotionStatus)
  async updatePromotionStatus(
    @graphql.Args() args: UpdatePromotionStatusArgs
  ): Promise<PromotionStatus | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PromotionStatus)
  async deletePromotionStatus(
    @graphql.Args() args: DeletePromotionStatusArgs
  ): Promise<PromotionStatus | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
