/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PromotionStatusService } from "../promotionStatus.service";
import { PromotionStatusCreateInput } from "./PromotionStatusCreateInput";
import { PromotionStatus } from "./PromotionStatus";
import { PromotionStatusFindManyArgs } from "./PromotionStatusFindManyArgs";
import { PromotionStatusWhereUniqueInput } from "./PromotionStatusWhereUniqueInput";
import { PromotionStatusUpdateInput } from "./PromotionStatusUpdateInput";

export class PromotionStatusControllerBase {
  constructor(protected readonly service: PromotionStatusService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PromotionStatus })
  async createPromotionStatus(
    @common.Body() data: PromotionStatusCreateInput
  ): Promise<PromotionStatus> {
    return await this.service.createPromotionStatus({
      data: data,
      select: {
        applicationId: true,
        departmentId: true,
        round: true,
        statusTime: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PromotionStatus] })
  @ApiNestedQuery(PromotionStatusFindManyArgs)
  async promotionStatuses(
    @common.Req() request: Request
  ): Promise<PromotionStatus[]> {
    const args = plainToClass(PromotionStatusFindManyArgs, request.query);
    return this.service.promotionStatuses({
      ...args,
      select: {
        applicationId: true,
        departmentId: true,
        round: true,
        statusTime: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PromotionStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async promotionStatus(
    @common.Param() params: PromotionStatusWhereUniqueInput
  ): Promise<PromotionStatus | null> {
    const result = await this.service.promotionStatus({
      where: params,
      select: {
        applicationId: true,
        departmentId: true,
        round: true,
        statusTime: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PromotionStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePromotionStatus(
    @common.Param() params: PromotionStatusWhereUniqueInput,
    @common.Body() data: PromotionStatusUpdateInput
  ): Promise<PromotionStatus | null> {
    try {
      return await this.service.updatePromotionStatus({
        where: params,
        data: data,
        select: {
          applicationId: true,
          departmentId: true,
          round: true,
          statusTime: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PromotionStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePromotionStatus(
    @common.Param() params: PromotionStatusWhereUniqueInput
  ): Promise<PromotionStatus | null> {
    try {
      return await this.service.deletePromotionStatus({
        where: params,
        select: {
          applicationId: true,
          departmentId: true,
          round: true,
          statusTime: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
