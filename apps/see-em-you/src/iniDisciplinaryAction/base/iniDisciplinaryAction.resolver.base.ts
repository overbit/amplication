/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { IniDisciplinaryAction } from "./IniDisciplinaryAction";
import { IniDisciplinaryActionCountArgs } from "./IniDisciplinaryActionCountArgs";
import { IniDisciplinaryActionFindManyArgs } from "./IniDisciplinaryActionFindManyArgs";
import { IniDisciplinaryActionFindUniqueArgs } from "./IniDisciplinaryActionFindUniqueArgs";
import { CreateIniDisciplinaryActionArgs } from "./CreateIniDisciplinaryActionArgs";
import { UpdateIniDisciplinaryActionArgs } from "./UpdateIniDisciplinaryActionArgs";
import { DeleteIniDisciplinaryActionArgs } from "./DeleteIniDisciplinaryActionArgs";
import { IniDisciplinaryActionService } from "../iniDisciplinaryAction.service";
@graphql.Resolver(() => IniDisciplinaryAction)
export class IniDisciplinaryActionResolverBase {
  constructor(protected readonly service: IniDisciplinaryActionService) {}

  async _iniDisciplinaryActionsMeta(
    @graphql.Args() args: IniDisciplinaryActionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [IniDisciplinaryAction])
  async iniDisciplinaryActions(
    @graphql.Args() args: IniDisciplinaryActionFindManyArgs
  ): Promise<IniDisciplinaryAction[]> {
    return this.service.iniDisciplinaryActions(args);
  }

  @graphql.Query(() => IniDisciplinaryAction, { nullable: true })
  async iniDisciplinaryAction(
    @graphql.Args() args: IniDisciplinaryActionFindUniqueArgs
  ): Promise<IniDisciplinaryAction | null> {
    const result = await this.service.iniDisciplinaryAction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => IniDisciplinaryAction)
  async createIniDisciplinaryAction(
    @graphql.Args() args: CreateIniDisciplinaryActionArgs
  ): Promise<IniDisciplinaryAction> {
    return await this.service.createIniDisciplinaryAction({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => IniDisciplinaryAction)
  async updateIniDisciplinaryAction(
    @graphql.Args() args: UpdateIniDisciplinaryActionArgs
  ): Promise<IniDisciplinaryAction | null> {
    try {
      return await this.service.updateIniDisciplinaryAction({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => IniDisciplinaryAction)
  async deleteIniDisciplinaryAction(
    @graphql.Args() args: DeleteIniDisciplinaryActionArgs
  ): Promise<IniDisciplinaryAction | null> {
    try {
      return await this.service.deleteIniDisciplinaryAction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
