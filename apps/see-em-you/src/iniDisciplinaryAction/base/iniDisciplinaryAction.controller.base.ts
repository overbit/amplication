/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { IniDisciplinaryActionService } from "../iniDisciplinaryAction.service";
import { IniDisciplinaryActionCreateInput } from "./IniDisciplinaryActionCreateInput";
import { IniDisciplinaryAction } from "./IniDisciplinaryAction";
import { IniDisciplinaryActionFindManyArgs } from "./IniDisciplinaryActionFindManyArgs";
import { IniDisciplinaryActionWhereUniqueInput } from "./IniDisciplinaryActionWhereUniqueInput";
import { IniDisciplinaryActionUpdateInput } from "./IniDisciplinaryActionUpdateInput";

export class IniDisciplinaryActionControllerBase {
  constructor(protected readonly service: IniDisciplinaryActionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: IniDisciplinaryAction })
  async createIniDisciplinaryAction(
    @common.Body() data: IniDisciplinaryActionCreateInput
  ): Promise<IniDisciplinaryAction> {
    return await this.service.createIniDisciplinaryAction({
      data: data,
      select: {
        applicationId: true,
        id: true,
        retraction: true,
        retractionDescription: true,
        sanction: true,
        sanctionDescription: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [IniDisciplinaryAction] })
  @ApiNestedQuery(IniDisciplinaryActionFindManyArgs)
  async iniDisciplinaryActions(
    @common.Req() request: Request
  ): Promise<IniDisciplinaryAction[]> {
    const args = plainToClass(IniDisciplinaryActionFindManyArgs, request.query);
    return this.service.iniDisciplinaryActions({
      ...args,
      select: {
        applicationId: true,
        id: true,
        retraction: true,
        retractionDescription: true,
        sanction: true,
        sanctionDescription: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: IniDisciplinaryAction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async iniDisciplinaryAction(
    @common.Param() params: IniDisciplinaryActionWhereUniqueInput
  ): Promise<IniDisciplinaryAction | null> {
    const result = await this.service.iniDisciplinaryAction({
      where: params,
      select: {
        applicationId: true,
        id: true,
        retraction: true,
        retractionDescription: true,
        sanction: true,
        sanctionDescription: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: IniDisciplinaryAction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateIniDisciplinaryAction(
    @common.Param() params: IniDisciplinaryActionWhereUniqueInput,
    @common.Body() data: IniDisciplinaryActionUpdateInput
  ): Promise<IniDisciplinaryAction | null> {
    try {
      return await this.service.updateIniDisciplinaryAction({
        where: params,
        data: data,
        select: {
          applicationId: true,
          id: true,
          retraction: true,
          retractionDescription: true,
          sanction: true,
          sanctionDescription: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: IniDisciplinaryAction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteIniDisciplinaryAction(
    @common.Param() params: IniDisciplinaryActionWhereUniqueInput
  ): Promise<IniDisciplinaryAction | null> {
    try {
      return await this.service.deleteIniDisciplinaryAction({
        where: params,
        select: {
          applicationId: true,
          id: true,
          retraction: true,
          retractionDescription: true,
          sanction: true,
          sanctionDescription: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
