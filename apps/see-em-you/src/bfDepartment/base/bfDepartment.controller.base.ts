/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BfDepartmentService } from "../bfDepartment.service";
import { BfDepartmentCreateInput } from "./BfDepartmentCreateInput";
import { BfDepartment } from "./BfDepartment";
import { BfDepartmentFindManyArgs } from "./BfDepartmentFindManyArgs";
import { BfDepartmentWhereUniqueInput } from "./BfDepartmentWhereUniqueInput";
import { BfDepartmentUpdateInput } from "./BfDepartmentUpdateInput";

export class BfDepartmentControllerBase {
  constructor(protected readonly service: BfDepartmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BfDepartment })
  async createBfDepartment(
    @common.Body() data: BfDepartmentCreateInput
  ): Promise<BfDepartment> {
    return await this.service.createBfDepartment({
      data: data,
      select: {
        bfDepartment: true,
        departmentId: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BfDepartment] })
  @ApiNestedQuery(BfDepartmentFindManyArgs)
  async bfDepartments(@common.Req() request: Request): Promise<BfDepartment[]> {
    const args = plainToClass(BfDepartmentFindManyArgs, request.query);
    return this.service.bfDepartments({
      ...args,
      select: {
        bfDepartment: true,
        departmentId: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BfDepartment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bfDepartment(
    @common.Param() params: BfDepartmentWhereUniqueInput
  ): Promise<BfDepartment | null> {
    const result = await this.service.bfDepartment({
      where: params,
      select: {
        bfDepartment: true,
        departmentId: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BfDepartment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBfDepartment(
    @common.Param() params: BfDepartmentWhereUniqueInput,
    @common.Body() data: BfDepartmentUpdateInput
  ): Promise<BfDepartment | null> {
    try {
      return await this.service.updateBfDepartment({
        where: params,
        data: data,
        select: {
          bfDepartment: true,
          departmentId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BfDepartment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBfDepartment(
    @common.Param() params: BfDepartmentWhereUniqueInput
  ): Promise<BfDepartment | null> {
    try {
      return await this.service.deleteBfDepartment({
        where: params,
        select: {
          bfDepartment: true,
          departmentId: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
