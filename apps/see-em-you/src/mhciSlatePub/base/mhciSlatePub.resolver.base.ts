/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateMhciSlatePubArgs } from "./CreateMhciSlatePubArgs";
import { UpdateMhciSlatePubArgs } from "./UpdateMhciSlatePubArgs";
import { DeleteMhciSlatePubArgs } from "./DeleteMhciSlatePubArgs";
import { MhciSlatePubCountArgs } from "./MhciSlatePubCountArgs";
import { MhciSlatePubFindManyArgs } from "./MhciSlatePubFindManyArgs";
import { MhciSlatePubFindUniqueArgs } from "./MhciSlatePubFindUniqueArgs";
import { MhciSlatePub } from "./MhciSlatePub";
import { MhciSlatePubService } from "../mhciSlatePub.service";
@graphql.Resolver(() => MhciSlatePub)
export class MhciSlatePubResolverBase {
  constructor(protected readonly service: MhciSlatePubService) {}

  async _mhciSlatePubsMeta(
    @graphql.Args() args: MhciSlatePubCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MhciSlatePub])
  async mhciSlatePubs(
    @graphql.Args() args: MhciSlatePubFindManyArgs
  ): Promise<MhciSlatePub[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => MhciSlatePub, { nullable: true })
  async mhciSlatePub(
    @graphql.Args() args: MhciSlatePubFindUniqueArgs
  ): Promise<MhciSlatePub | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MhciSlatePub)
  async createMhciSlatePub(
    @graphql.Args() args: CreateMhciSlatePubArgs
  ): Promise<MhciSlatePub> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MhciSlatePub)
  async updateMhciSlatePub(
    @graphql.Args() args: UpdateMhciSlatePubArgs
  ): Promise<MhciSlatePub | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MhciSlatePub)
  async deleteMhciSlatePub(
    @graphql.Args() args: DeleteMhciSlatePubArgs
  ): Promise<MhciSlatePub | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
