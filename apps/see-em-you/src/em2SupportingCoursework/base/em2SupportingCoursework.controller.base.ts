/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { Em2SupportingCourseworkService } from "../em2SupportingCoursework.service";
import { Em2SupportingCourseworkCreateInput } from "./Em2SupportingCourseworkCreateInput";
import { Em2SupportingCoursework } from "./Em2SupportingCoursework";
import { Em2SupportingCourseworkFindManyArgs } from "./Em2SupportingCourseworkFindManyArgs";
import { Em2SupportingCourseworkWhereUniqueInput } from "./Em2SupportingCourseworkWhereUniqueInput";
import { Em2SupportingCourseworkUpdateInput } from "./Em2SupportingCourseworkUpdateInput";

export class Em2SupportingCourseworkControllerBase {
  constructor(protected readonly service: Em2SupportingCourseworkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Em2SupportingCoursework })
  async createEm2SupportingCoursework(
    @common.Body() data: Em2SupportingCourseworkCreateInput
  ): Promise<Em2SupportingCoursework> {
    return await this.service.createEm2SupportingCoursework({
      data: data,
      select: {
        applicationId: true,
        dataStructuresTitle: true,
        dataStructuresNumber: true,
        statisticsTitle: true,
        statisticsNumber: true,
        msitExperience: true,
        programmingDescription: true,
        programmingDescription2: true,
        makerkitsDescription: true,
        makerkitsDescription2: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Em2SupportingCoursework] })
  @ApiNestedQuery(Em2SupportingCourseworkFindManyArgs)
  async em2SupportingCourseworks(
    @common.Req() request: Request
  ): Promise<Em2SupportingCoursework[]> {
    const args = plainToClass(
      Em2SupportingCourseworkFindManyArgs,
      request.query
    );
    return this.service.em2SupportingCourseworks({
      ...args,
      select: {
        applicationId: true,
        dataStructuresTitle: true,
        dataStructuresNumber: true,
        statisticsTitle: true,
        statisticsNumber: true,
        msitExperience: true,
        programmingDescription: true,
        programmingDescription2: true,
        makerkitsDescription: true,
        makerkitsDescription2: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Em2SupportingCoursework })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async em2SupportingCoursework(
    @common.Param() params: Em2SupportingCourseworkWhereUniqueInput
  ): Promise<Em2SupportingCoursework | null> {
    const result = await this.service.em2SupportingCoursework({
      where: params,
      select: {
        applicationId: true,
        dataStructuresTitle: true,
        dataStructuresNumber: true,
        statisticsTitle: true,
        statisticsNumber: true,
        msitExperience: true,
        programmingDescription: true,
        programmingDescription2: true,
        makerkitsDescription: true,
        makerkitsDescription2: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Em2SupportingCoursework })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEm2SupportingCoursework(
    @common.Param() params: Em2SupportingCourseworkWhereUniqueInput,
    @common.Body() data: Em2SupportingCourseworkUpdateInput
  ): Promise<Em2SupportingCoursework | null> {
    try {
      return await this.service.updateEm2SupportingCoursework({
        where: params,
        data: data,
        select: {
          applicationId: true,
          dataStructuresTitle: true,
          dataStructuresNumber: true,
          statisticsTitle: true,
          statisticsNumber: true,
          msitExperience: true,
          programmingDescription: true,
          programmingDescription2: true,
          makerkitsDescription: true,
          makerkitsDescription2: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Em2SupportingCoursework })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEm2SupportingCoursework(
    @common.Param() params: Em2SupportingCourseworkWhereUniqueInput
  ): Promise<Em2SupportingCoursework | null> {
    try {
      return await this.service.deleteEm2SupportingCoursework({
        where: params,
        select: {
          applicationId: true,
          dataStructuresTitle: true,
          dataStructuresNumber: true,
          statisticsTitle: true,
          statisticsNumber: true,
          msitExperience: true,
          programmingDescription: true,
          programmingDescription2: true,
          makerkitsDescription: true,
          makerkitsDescription2: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
