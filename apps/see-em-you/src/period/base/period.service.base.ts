/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Period as PrismaPeriod,
  AaDepartment as PrismaAaDepartment,
  Cohort as PrismaCohort,
  PeriodApplication as PrismaPeriodApplication,
} from "@prisma/client";

export class PeriodServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.PeriodCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.PeriodCountArgs>
  ): Promise<number> {
    return this.prisma.period.count(args);
  }

  async periods<T extends Prisma.PeriodFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PeriodFindManyArgs>
  ): Promise<PrismaPeriod[]> {
    return this.prisma.period.findMany(args);
  }
  async period<T extends Prisma.PeriodFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PeriodFindUniqueArgs>
  ): Promise<PrismaPeriod | null> {
    return this.prisma.period.findUnique(args);
  }
  async createPeriod<T extends Prisma.PeriodCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PeriodCreateArgs>
  ): Promise<PrismaPeriod> {
    return this.prisma.period.create<T>(args);
  }
  async updatePeriod<T extends Prisma.PeriodUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PeriodUpdateArgs>
  ): Promise<PrismaPeriod> {
    return this.prisma.period.update<T>(args);
  }
  async deletePeriod<T extends Prisma.PeriodDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PeriodDeleteArgs>
  ): Promise<PrismaPeriod> {
    return this.prisma.period.delete(args);
  }

  async findAaDepartment(
    parentId: number,
    args: Prisma.AaDepartmentFindManyArgs
  ): Promise<PrismaAaDepartment[]> {
    return this.prisma.period
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .aaDepartment(args);
  }

  async findCohort(
    parentId: number,
    args: Prisma.CohortFindManyArgs
  ): Promise<PrismaCohort[]> {
    return this.prisma.period
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .cohort(args);
  }

  async findPeriodApplication(
    parentId: number,
    args: Prisma.PeriodApplicationFindManyArgs
  ): Promise<PrismaPeriodApplication[]> {
    return this.prisma.period
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .periodApplication(args);
  }
}
