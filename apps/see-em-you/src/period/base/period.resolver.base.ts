/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Period } from "./Period";
import { PeriodCountArgs } from "./PeriodCountArgs";
import { PeriodFindManyArgs } from "./PeriodFindManyArgs";
import { PeriodFindUniqueArgs } from "./PeriodFindUniqueArgs";
import { CreatePeriodArgs } from "./CreatePeriodArgs";
import { UpdatePeriodArgs } from "./UpdatePeriodArgs";
import { DeletePeriodArgs } from "./DeletePeriodArgs";
import { AaDepartmentFindManyArgs } from "../../aaDepartment/base/AaDepartmentFindManyArgs";
import { AaDepartment } from "../../aaDepartment/base/AaDepartment";
import { CohortFindManyArgs } from "../../cohort/base/CohortFindManyArgs";
import { Cohort } from "../../cohort/base/Cohort";
import { PeriodApplicationFindManyArgs } from "../../periodApplication/base/PeriodApplicationFindManyArgs";
import { PeriodApplication } from "../../periodApplication/base/PeriodApplication";
import { PeriodService } from "../period.service";
@graphql.Resolver(() => Period)
export class PeriodResolverBase {
  constructor(protected readonly service: PeriodService) {}

  async _periodsMeta(
    @graphql.Args() args: PeriodCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Period])
  async periods(@graphql.Args() args: PeriodFindManyArgs): Promise<Period[]> {
    return this.service.periods(args);
  }

  @graphql.Query(() => Period, { nullable: true })
  async period(
    @graphql.Args() args: PeriodFindUniqueArgs
  ): Promise<Period | null> {
    const result = await this.service.period(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Period)
  async createPeriod(@graphql.Args() args: CreatePeriodArgs): Promise<Period> {
    return await this.service.createPeriod({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Period)
  async updatePeriod(
    @graphql.Args() args: UpdatePeriodArgs
  ): Promise<Period | null> {
    try {
      return await this.service.updatePeriod({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Period)
  async deletePeriod(
    @graphql.Args() args: DeletePeriodArgs
  ): Promise<Period | null> {
    try {
      return await this.service.deletePeriod(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [AaDepartment], { name: "aaDepartment" })
  async findAaDepartment(
    @graphql.Parent() parent: Period,
    @graphql.Args() args: AaDepartmentFindManyArgs
  ): Promise<AaDepartment[]> {
    const results = await this.service.findAaDepartment(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Cohort], { name: "cohort" })
  async findCohort(
    @graphql.Parent() parent: Period,
    @graphql.Args() args: CohortFindManyArgs
  ): Promise<Cohort[]> {
    const results = await this.service.findCohort(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [PeriodApplication], {
    name: "periodApplication",
  })
  async findPeriodApplication(
    @graphql.Parent() parent: Period,
    @graphql.Args() args: PeriodApplicationFindManyArgs
  ): Promise<PeriodApplication[]> {
    const results = await this.service.findPeriodApplication(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
